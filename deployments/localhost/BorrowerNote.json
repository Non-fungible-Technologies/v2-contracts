{
  "address": "0x666D0c3da3dBc946D5128D06115bb4eed4595580",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "ERC721P_DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "ERC721P_InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721P_NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PN_AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PN_BurningRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PN_CannotInitialize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PN_ContractPaused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PN_MintingRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "loanCore",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a27f03c374bbb65fcefa8d71d11515dc9a6c6e5db8cb7e6ca4034b9e5fe8664",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x666D0c3da3dBc946D5128D06115bb4eed4595580",
    "transactionIndex": 0,
    "gasUsed": "4726079",
    "logsBloom": "0x
    "blockHash": "0xc40add49a09fed1ad7c313e721645011618045548b413b93a15aae26d94cf052",
    "transactionHash": "0x5a27f03c374bbb65fcefa8d71d11515dc9a6c6e5db8cb7e6ca4034b9e5fe8664",
    "logs": [],
    "blockNumber": 14836447,
    "cumulativeGasUsed": "4726079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Arcade.xyz BorrowerNote",
    "aBN"
  ],
  "numDeployments": 1,
  "solcInputHash": "a1cd719426b304bc168f22b2f267e710",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC721P_DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"ERC721P_InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721P_NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PN_AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PN_BurningRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PN_CannotInitialize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PN_ContractPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PN_MintingRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanCore\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Non-Fungible Technologies, Inc. Built off Openzeppelin's ERC721PresetMinterPauserAutoId. Used for representing rights and obligations in the context of a loan - the right to claim collateral for lenders (instantiated as LenderNote), and the right to recover collateral upon repayment for borrowers (instantiated as BorrowerNote).\",\"details\":\"{ERC721} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - token ID and URI autogeneration This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.\",\"errors\":{\"ERC721P_DeadlineExpired(uint256)\":[{\"params\":{\"deadline\":\"Permit deadline parameter as a timestamp.\"}}],\"ERC721P_InvalidSignature(address)\":[{\"params\":{\"signer\":\"Signer recovered from ECDSA sugnature hash.\"}}],\"ERC721P_NotTokenOwner(address)\":[{\"params\":{\"owner\":\"Owner parameter for the function call.\"}}],\"PN_BurningRole(address)\":[{\"params\":{\"caller\":\"Address of the function caller.\"}}],\"PN_MintingRole(address)\":[{\"params\":{\"caller\":\"Address of the function caller.\"}}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"separator             The bytes for the domain separator.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"See {ERC721-_burn}.\",\"params\":{\"tokenId\":\"The ID of the token to burn, should match a loan.\"}},\"constructor\":{\"details\":\"Creates the promissory note contract, granting minter, burner      and pauser roles to the specified owner address (which in practice      will be LoanCore).\",\"params\":{\"name\":\"The name of the token (see ERC721).\",\"symbol\":\"The symbol of the token (see ERC721). \\u00e5     \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"params\":{\"loanCore\":\"The address of the admin.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,uint256)\":{\"details\":\"See {ERC721-_mint}.\",\"params\":{\"loanId\":\"The ID of the token to mint, should match a loan.\",\"to\":\"The owner of the minted token.\"},\"returns\":{\"_0\":\"tokenId              The newly minted token ID.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nonces(address)\":{\"params\":{\"owner\":\"The given owner to check the nonce for.\"},\"returns\":{\"_0\":\"current              The current noonce for the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The maximum timestamp the signature is valid for.\",\"owner\":\"The owner of the token being permitted.\",\"r\":\"Component of the signature.\",\"s\":\"Component of the signature.\",\"spender\":\"The address allowed to spend the token.\",\"tokenId\":\"The token ID of the given asset.\",\"v\":\"Component of the signature.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setPaused(bool)\":{\"params\":{\"paused\":\"Whether the contract should be paused.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"stateVariables\":{\"owner\":{\"details\":\"Initially deployer, then account with burn/mint/pause roles (LoanCore).\"}},\"title\":\"PromissoryNote\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721P_DeadlineExpired(uint256)\":[{\"notice\":\"Deadline for the permit has expired.\"}],\"ERC721P_InvalidSignature(address)\":[{\"notice\":\"Invalid signature.\"}],\"ERC721P_NotTokenOwner(address)\":[{\"notice\":\"Address of the owner to also be the owner of the tokenId.\"}],\"PN_AlreadyInitialized()\":[{\"notice\":\"Roles have been initialized.\"}],\"PN_BurningRole(address)\":[{\"notice\":\"Caller of burn function must have the BURNER_ROLE in AccessControl.\"}],\"PN_CannotInitialize()\":[{\"notice\":\"Deployer is allowed to initialize roles. Caller is not deployer.\"}],\"PN_ContractPaused()\":[{\"notice\":\"No token transfers while contract is in paused state.\"}],\"PN_MintingRole(address)\":[{\"notice\":\"Caller of mint function must have the MINTER_ROLE in AccessControl.\"}]},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"burn(uint256)\":{\"notice\":\"Create a new token and assign it to a specified owner. The token ID         should match a loan ID, and can only be called by a burner - in practice         LoanCore, which burns notes when a loan ends. Also unserts the mapping to         lookup loan IDs by note IDs.\"},\"initialize(address)\":{\"notice\":\"Grants owner access to the specified address, which should be an         instance of LoanCore. Once admin role is set, it is immutable,         and cannot be set again.\"},\"mint(address,uint256)\":{\"notice\":\"Create a new token and assign it to a specified owner. The token ID         should match the loan ID, and can only be called by the minter. Also         updates the mapping to lookup loan IDs by note IDs.\"},\"nonces(address)\":{\"notice\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated. Every successful call to permit increases the owner's nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Allows the spender to spend the token ID which is owned by owner, given owner's signed approval. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `owner` must be the owner of `tokenId`. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"},\"setPaused(bool)\":{\"notice\":\"Pauses transfers on the note. This essentially blocks all loan lifecycle         operations, since all originations and transfers require transfers of         the note.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PromissoryNote.sol\":\"PromissoryNote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/ERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IERC721Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport { ERC721P_DeadlineExpired, ERC721P_NotTokenOwner, ERC721P_InvalidSignature } from \\\"./errors/LendingUtils.sol\\\";\\n\\n/**\\n * @title ERC721Permit\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * @dev Implementation of the ERC721 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/draft-EIP712.sol\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC721Permit is ERC721, IERC721Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    // ============================================ STATE ==============================================\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @dev Nonce for permit signatures.\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC721 token name.\\n     *\\n     * @param name                  The name of the signing domain.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    // ===================================== PERMIT FUNCTIONALITY =======================================\\n\\n    /**\\n     * @notice Allows the spender to spend the token ID which is owned by owner,\\n     * given owner's signed approval.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `owner` must be the owner of `tokenId`.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * @param owner                 The owner of the token being permitted.\\n     * @param spender               The address allowed to spend the token.\\n     * @param tokenId               The token ID of the given asset.\\n     * @param deadline              The maximum timestamp the signature is valid for.\\n     * @param v                     Component of the signature.\\n     * @param r                     Component of the signature.\\n     * @param s                     Component of the signature.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        if (block.timestamp > deadline) revert ERC721P_DeadlineExpired(deadline);\\n        if (owner != ERC721.ownerOf(tokenId)) revert ERC721P_NotTokenOwner(owner);\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, tokenId, _useNonce(owner), deadline)\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) revert ERC721P_InvalidSignature(signer);\\n\\n        _approve(spender, tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated.\\n     *\\n     * Every successful call to permit increases the owner's nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * @param owner                 The given owner to check the nonce for.\\n     *\\n     * @return current              The current noonce for the owner.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @notice Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     *\\n     * @return separator             The bytes for the domain separator.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev Consumes the nonce - returns the current value and increments.\\n     *\\n     * @param owner                 The address of the user to consume a nonce for.\\n     *\\n     * @return current              The current nonce, before incrementation.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x37c342424eed3fd294f364fcfe335739ca4ac655266299fd2eab13a17ab454e2\",\"license\":\"MIT\"},\"contracts/PromissoryNote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"./ERC721Permit.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/IPromissoryNote.sol\\\";\\n\\nimport { PN_MintingRole, PN_BurningRole, PN_ContractPaused, PN_CannotInitialize, PN_AlreadyInitialized } from \\\"./errors/Lending.sol\\\";\\nimport { ERC721P_InvalidSignature, ERC721P_DeadlineExpired } from \\\"./errors/LendingUtils.sol\\\";\\n\\n/**\\n * @title PromissoryNote\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Built off Openzeppelin's ERC721PresetMinterPauserAutoId. Used for\\n * representing rights and obligations in the context of a loan - the\\n * right to claim collateral for lenders (instantiated as LenderNote),\\n * and the right to recover collateral upon repayment for borrowers\\n * (instantiated as BorrowerNote).\\n *\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract PromissoryNote is\\n    Context,\\n    AccessControlEnumerable,\\n    ERC721Enumerable,\\n    ERC721Pausable,\\n    ERC721Permit,\\n    IPromissoryNote\\n{\\n    using Counters for Counters.Counter;\\n\\n    // ============================================ STATE ==============================================\\n\\n    // =================== Constants =====================\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    // ============= Loan State ==============\\n\\n    /// @dev Initially deployer, then account with burn/mint/pause roles (LoanCore).\\n    address public owner;\\n    bool private initialized;\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    // ========================================= CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @dev Creates the promissory note contract, granting minter, burner\\n     *      and pauser roles to the specified owner address (which in practice\\n     *      will be LoanCore).\\n     *\\n     * @param name                  The name of the token (see ERC721).\\n     * @param symbol                The symbol of the token (see ERC721).\\n\\u00e5     */\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) ERC721Permit(name) {\\n        // We don't want token IDs of 0\\n        _tokenIdTracker.increment();\\n\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Grants owner access to the specified address, which should be an\\n     *         instance of LoanCore. Once admin role is set, it is immutable,\\n     *         and cannot be set again.\\n     *\\n     * @param loanCore              The address of the admin.\\n     */\\n    function initialize(address loanCore) external {\\n        if (initialized) revert PN_AlreadyInitialized();\\n        if (_msgSender() != owner) revert PN_CannotInitialize();\\n\\n        _setupRole(ADMIN_ROLE, loanCore);\\n\\n        owner = loanCore;\\n        initialized = true;\\n    }\\n\\n    // ======================================= TOKEN OPERATIONS =========================================\\n\\n    /**\\n     * @notice Create a new token and assign it to a specified owner. The token ID\\n     *         should match the loan ID, and can only be called by the minter. Also\\n     *         updates the mapping to lookup loan IDs by note IDs.\\n     *\\n     * @dev See {ERC721-_mint}.\\n     *\\n     * @param to                    The owner of the minted token.\\n     * @param loanId                The ID of the token to mint, should match a loan.\\n     *\\n     * @return tokenId              The newly minted token ID.\\n     */\\n    function mint(address to, uint256 loanId) external override returns (uint256) {\\n        if (!hasRole(ADMIN_ROLE, _msgSender())) revert PN_MintingRole(_msgSender());\\n        _mint(to, loanId);\\n\\n        return loanId;\\n    }\\n\\n    /**\\n     * @notice Create a new token and assign it to a specified owner. The token ID\\n     *         should match a loan ID, and can only be called by a burner - in practice\\n     *         LoanCore, which burns notes when a loan ends. Also unserts the mapping to\\n     *         lookup loan IDs by note IDs.\\n     *\\n     * @dev See {ERC721-_burn}.\\n     *\\n     * @param tokenId               The ID of the token to burn, should match a loan.\\n     */\\n    function burn(uint256 tokenId) external override {\\n        if (!hasRole(ADMIN_ROLE, _msgSender())) revert PN_BurningRole(_msgSender());\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice Pauses transfers on the note. This essentially blocks all loan lifecycle\\n     *         operations, since all originations and transfers require transfers of\\n     *         the note.\\n     *\\n     * @param paused                Whether the contract should be paused.\\n     */\\n    function setPaused(bool paused) external override onlyRole(ADMIN_ROLE) {\\n        if (paused) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    // ===================================== ERC721 UTILITIES ===========================================\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer.\\n     *      This notifies the promissory note about the ownership transfer.\\n     *\\n     * @dev Does not let tokens be transferred when contract is paused.\\n     *\\n     * @param from                  The previous owner of the token.\\n     * @param to                    The owner of the token after transfer.\\n     * @param tokenId               The token ID.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        if (paused()) revert PN_ContractPaused();\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1e36ca1c1fbd4e6720c7e93001c9f0c7ebf5d9d36ec212e90fb9e0b28e68a462\",\"license\":\"MIT\"},\"contracts/errors/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror OC_ZeroAddress();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice Loan terms must have even number of installments and intallment periods must be < 1000000.\\n *\\n * @param numInstallments               Number of installment periods in loan.\\n */\\nerror OC_NumberInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param verifier                      The address of the verifier contract.\\n * @param data                          The verification data (to be parsed by verifier).\\n * @param vault                         The user's vault subject to verification.\\n */\\nerror OC_PredicateFailed(address verifier, bytes data, address vault);\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount1155(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring an invalid token ID.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId1155(address asset, int256 tokenId);\\n\\n/**\\n * @notice Provided ERC20 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount20(address asset, uint256 amount);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Repayment has already been completed for this loan without installments.\\n */\\nerror RC_NoPaymentDue();\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address caller);\\n\\n/**\\n * @notice Loan has not started yet.\\n *\\n * @param startDate                 block timestamp of the startDate of loan stored in LoanData.\\n */\\nerror RC_BeforeStartDate(uint256 startDate);\\n\\n/**\\n * @notice Loan terms do not have any installments, use repay for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_NoInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice Loan terms have installments, use repaypart or repayPartMinimum for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_HasInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice No interest payment or late fees due.\\n *\\n * @param amount                    Minimum interest plus late fee amount returned\\n *                                  from minimum payment calculation.\\n */\\nerror RC_NoMinPaymentDue(uint256 amount);\\n\\n/**\\n * @notice Repaid amount must be larger than zero.\\n */\\nerror RC_RepayPartZero();\\n\\n/**\\n * @notice Amount paramater less than the minimum amount due.\\n *\\n * @param amount                    Amount function call parameter.\\n * @param minAmount                 The minimum amount due.\\n */\\nerror RC_RepayPartLTMin(uint256 amount, uint256 minAmount);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror LC_ZeroAddress();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice Collateral is not in use for an attempted rollover.\\n */\\nerror LC_CollateralNotInUse();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param returnAmount                  Total amount due for entire loan repayment.\\n */\\nerror LC_BalanceGTZero(uint256 returnAmount);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Installment loan has not defaulted.\\n */\\nerror LC_LoanNotDefaulted();\\n\\n// ================================== Full Insterest Amount Calc ====================================\\n/// @notice All errors prefixed with FIAC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror FIAC_InterestRate(uint256 interestRate);\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deployer is allowed to initialize roles. Caller is not deployer.\\n */\\nerror PN_CannotInitialize();\\n\\n/**\\n * @notice Roles have been initialized.\\n */\\nerror PN_AlreadyInitialized();\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice No token transfers while contract is in paused state.\\n */\\nerror PN_ContractPaused();\\n\",\"keccak256\":\"0xd5eb071223bd51339354cc8548e4c9bf139e468bd50609cb1c2b3ad32d7243b0\",\"license\":\"MIT\"},\"contracts/errors/LendingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingUtilsErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for utilities used by the lending protocol contracts.\\n * Errors are prefixed by the contract that throws them (e.g., \\\"PR_\\\" for PunkRouter).\\n */\\n\\n// ==================================== ERC721 Permit ======================================\\n/// @notice All errors prefixed with ERC721P_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deadline for the permit has expired.\\n *\\n * @param deadline                      Permit deadline parameter as a timestamp.\\n */\\nerror ERC721P_DeadlineExpired(uint256 deadline);\\n\\n/**\\n * @notice Address of the owner to also be the owner of the tokenId.\\n *\\n * @param owner                        Owner parameter for the function call.\\n */\\nerror ERC721P_NotTokenOwner(address owner);\\n\\n/**\\n * @notice Invalid signature.\\n *\\n * @param signer                        Signer recovered from ECDSA sugnature hash.\\n */\\nerror ERC721P_InvalidSignature(address signer);\\n\\n// ==================================== Punk Router ======================================\\n/// @notice All errors prefixed with PR_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Not the owner of the specified punkIndex.\\n *\\n * @param caller                        Msg.sender of the function call.\\n */\\nerror PR_NotOwner(address caller);\\n\",\"keccak256\":\"0x9224411f0478d4d91af141cd1769afc4b95e300e56184436f13e7b681bf714d9\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    // ================ Permit Functionality ================\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ================ View Functions ================\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfc9739185bc9a2f85ef6e5e3c2b3e255b9f79a862e2610133ff7da84391492f3\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IFeeController {\\n    // ================ Events =================\\n\\n    event UpdateOriginationFee(uint256 _newFee);\\n    event UpdateRolloverFee(uint256 _newFee);\\n\\n    // ================ Fee Setters =================\\n\\n    function setOriginationFee(uint256 _originationFee) external;\\n\\n    function setRolloverFee(uint256 _rolloverFee) external;\\n\\n    // ================ Fee Getters =================\\n\\n    function getOriginationFee() external view returns (uint256);\\n\\n    function getRolloverFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x14a7c697be149c54757817c95864f05fc5c28faaab31bda39d4f815e654f36f2\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\nimport \\\"./IPromissoryNote.sol\\\";\\nimport \\\"./IFeeController.sol\\\";\\nimport \\\"./ILoanCore.sol\\\";\\n\\ninterface ILoanCore {\\n    // ================ Events =================\\n\\n    event LoanCreated(LoanLibrary.LoanTerms terms, uint256 loanId);\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event InstallmentPaymentReceived(uint256 loanId, uint256 repaidAmount, uint256 remBalance);\\n    event LoanClaimed(uint256 loanId);\\n    event FeesClaimed(address token, address to, uint256 amount);\\n    event SetFeeController(address feeController);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms\\n    ) external returns (uint256 loanId);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function repayPart(\\n        uint256 _loanId,\\n        uint256 _currentMissedPayments,\\n        uint256 _paymentToPrincipal,\\n        uint256 _paymentToInterest,\\n        uint256 _paymentToLateFees\\n    ) external;\\n\\n    function claim(uint256 loanId, uint256 currentInstallmentPeriod) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external returns (IPromissoryNote);\\n\\n    function lenderNote() external returns (IPromissoryNote);\\n\\n    function feeController() external returns (IFeeController);\\n}\\n\",\"keccak256\":\"0x46bc473cf9fcf8ca3ddf9f92f3f0f42917d321ff5b1f94b6ebde24721a932cec\",\"license\":\"MIT\"},\"contracts/interfaces/IPromissoryNote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPromissoryNote is IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setPaused(bool paused) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\",\"keccak256\":\"0xdd7786e272e67ac1732d6a45c5662e9f8f28824e4d6f8e365ecc9c76f9d4822c\",\"license\":\"MIT\"},\"contracts/libraries/LoanLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        /// @dev Must be an AssetVault for LoanTermsWithItems\\n        address collateralAddress;\\n        // An encoded list of predicates\\n        bytes items;\\n        // The payable currency for the loan principal and interest\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract\\n        bytes data;\\n        // The verifier contract\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan\\n        LoanState state;\\n        // Number of installment payments made on the loan\\n        uint24 numInstallmentsPaid;\\n        // installment loan specific\\n        // Start date of the loan, using block.timestamp - for determining installment period\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan\\n        LoanTerms terms;\\n        // Remaining balance of the loan. Starts as equal to principal. Can reduce based on\\n        // payments made, can increased based on compounded interest from missed payments and late fees\\n        uint256 balance;\\n        // Amount paid in total by the borrower\\n        uint256 balancePaid;\\n        // Total amount of late fees accrued\\n        uint256 lateFeesAccrued;\\n    }\\n}\\n\",\"keccak256\":\"0x9e0237c41db40fb4ffc5f58cd16e91a71bb02ad4481b487404262e6d9ce7ba33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040527f48d39b37a35214940203bbbd4f383519797769b13d936f387d89430afef27688610120908152503480156200003a57600080fd5b506040516200595338038062005953833981810160405281019062000060919062000466565b81806040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525084848160029080519060200190620000b292919062000219565b508060039080519060200190620000cb92919062000219565b5050506000600c60006101000a81548160ff02191690831515021790555060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260c081815250508160e081815250504660a0818152505062000151818484620001c760201b60201c565b608081815250508061010081815250505050505050506200017e600f6200020360201b620016a81760201c565b33600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000628565b60008383834630604051602001620001e495949392919062000566565b6040516020818303038152906040528051906020012090509392505050565b6001816000016000828254019250508190555050565b8280546200022790620005f2565b90600052602060002090601f0160209004810192826200024b576000855562000297565b82601f106200026657805160ff191683800117855562000297565b8280016001018555821562000297579182015b828111156200029657825182559160200191906001019062000279565b5b509050620002a69190620002aa565b5090565b5b80821115620002c5576000816000905550600101620002ab565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200033282620002e7565b810181811067ffffffffffffffff82111715620003545762000353620002f8565b5b80604052505050565b600062000369620002c9565b905062000377828262000327565b919050565b600067ffffffffffffffff8211156200039a5762000399620002f8565b5b620003a582620002e7565b9050602081019050919050565b60005b83811015620003d2578082015181840152602081019050620003b5565b83811115620003e2576000848401525b50505050565b6000620003ff620003f9846200037c565b6200035d565b9050828152602081018484840111156200041e576200041d620002e2565b5b6200042b848285620003b2565b509392505050565b600082601f8301126200044b576200044a620002dd565b5b81516200045d848260208601620003e8565b91505092915050565b6000806040838503121562000480576200047f620002d3565b5b600083015167ffffffffffffffff811115620004a157620004a0620002d8565b5b620004af8582860162000433565b925050602083015167ffffffffffffffff811115620004d357620004d2620002d8565b5b620004e18582860162000433565b9150509250929050565b6000819050919050565b6200050081620004eb565b82525050565b6000819050919050565b6200051b8162000506565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200054e8262000521565b9050919050565b620005608162000541565b82525050565b600060a0820190506200057d6000830188620004f5565b6200058c6020830187620004f5565b6200059b6040830186620004f5565b620005aa606083018562000510565b620005b9608083018462000555565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200060b57607f821691505b60208210811415620006225762000621620005c3565b5b50919050565b60805160a05160c05160e05161010051610120516152db6200067860003960006114e401526000611e3101526000611e7301526000611e5201526000611dde01526000611e0601526152db6000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80636352211e1161011a578063a217fddf116100ad578063c87b56dd1161007c578063c87b56dd14610623578063ca15c87314610653578063d505accf14610683578063d547741f1461069f578063e985e9c5146106bb57610206565b8063a217fddf146105b1578063a22cb465146105cf578063b88d4fde146105eb578063c4d66de81461060757610206565b80638da5cb5b116100e95780638da5cb5b146105155780639010d07c1461053357806391d148541461056357806395d89b411461059357610206565b80636352211e1461046757806370a082311461049757806375b238fc146104c75780637ecebe00146104e557610206565b80632f2ff15d1161019d57806340c10f191161016c57806340c10f19146103b157806342842e0e146103e157806342966c68146103fd5780634f6ccce7146104195780635c975abb1461044957610206565b80632f2ff15d1461032b5780632f745c59146103475780633644e5151461037757806336568abe1461039557610206565b806316c38b3c116101d957806316c38b3c146102a557806318160ddd146102c157806323b872dd146102df578063248a9ca3146102fb57610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc14610259578063095ea7b314610289575b600080fd5b6102256004803603810190610220919061378a565b6106eb565b60405161023291906137d2565b60405180910390f35b6102436106fd565b6040516102509190613886565b60405180910390f35b610273600480360381019061026e91906138de565b61078f565b604051610280919061394c565b60405180910390f35b6102a3600480360381019061029e9190613993565b610814565b005b6102bf60048036038101906102ba91906139ff565b61092c565b005b6102c961097e565b6040516102d69190613a3b565b60405180910390f35b6102f960048036038101906102f49190613a56565b61098b565b005b61031560048036038101906103109190613adf565b6109eb565b6040516103229190613b1b565b60405180910390f35b61034560048036038101906103409190613b36565b610a0a565b005b610361600480360381019061035c9190613993565b610a3e565b60405161036e9190613a3b565b60405180910390f35b61037f610ae3565b60405161038c9190613b1b565b60405180910390f35b6103af60048036038101906103aa9190613b36565b610af2565b005b6103cb60048036038101906103c69190613993565b610b26565b6040516103d89190613a3b565b60405180910390f35b6103fb60048036038101906103f69190613a56565b610bb4565b005b610417600480360381019061041291906138de565b610bd4565b005b610433600480360381019061042e91906138de565b610c59565b6040516104409190613a3b565b60405180910390f35b610451610cca565b60405161045e91906137d2565b60405180910390f35b610481600480360381019061047c91906138de565b610ce1565b60405161048e919061394c565b60405180910390f35b6104b160048036038101906104ac9190613b76565b610d93565b6040516104be9190613a3b565b60405180910390f35b6104cf610e4b565b6040516104dc9190613b1b565b60405180910390f35b6104ff60048036038101906104fa9190613b76565b610e6f565b60405161050c9190613a3b565b60405180910390f35b61051d610ebf565b60405161052a919061394c565b60405180910390f35b61054d60048036038101906105489190613ba3565b610ee5565b60405161055a919061394c565b60405180910390f35b61057d60048036038101906105789190613b36565b610f14565b60405161058a91906137d2565b60405180910390f35b61059b610f7e565b6040516105a89190613886565b60405180910390f35b6105b9611010565b6040516105c69190613b1b565b60405180910390f35b6105e960048036038101906105e49190613be3565b611017565b005b61060560048036038101906106009190613d58565b611198565b005b610621600480360381019061061c9190613b76565b6111fa565b005b61063d600480360381019061063891906138de565b611358565b60405161064a9190613886565b60405180910390f35b61066d60048036038101906106689190613adf565b6113ff565b60405161067a9190613a3b565b60405180910390f35b61069d60048036038101906106989190613e14565b611423565b005b6106b960048036038101906106b49190613b36565b6115e0565b005b6106d560048036038101906106d09190613eb6565b611614565b6040516106e291906137d2565b60405180910390f35b60006106f6826116be565b9050919050565b60606002805461070c90613f25565b80601f016020809104026020016040519081016040528092919081815260200182805461073890613f25565b80156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b5050505050905090565b600061079a82611738565b6107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d090613fc9565b60405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061081f82610ce1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610890576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108879061405b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108af6117a4565b73ffffffffffffffffffffffffffffffffffffffff1614806108de57506108dd816108d86117a4565b611614565b5b61091d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610914906140ed565b60405180910390fd5b61092783836117ac565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561095e816109596117a4565b611865565b81156109715761096c611902565b61097a565b6109796119a5565b5b5050565b6000600a80549050905090565b61099c6109966117a4565b82611a47565b6109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d29061417f565b60405180910390fd5b6109e6838383611b25565b505050565b6000806000838152602001908152602001600020600101549050919050565b610a148282611d81565b610a398160016000858152602001908152602001600020611daa90919063ffffffff16565b505050565b6000610a4983610d93565b8210610a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8190614211565b60405180910390fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6000610aed611dda565b905090565b610afc8282611e9d565b610b218160016000858152602001908152602001600020611f2090919063ffffffff16565b505050565b6000610b597fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b546117a4565b610f14565b610ba157610b656117a4565b6040517fde9717bc000000000000000000000000000000000000000000000000000000008152600401610b98919061394c565b60405180910390fd5b610bab8383611f50565b81905092915050565b610bcf83838360405180602001604052806000815250611198565b505050565b610c057fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c006117a4565b610f14565b610c4d57610c116117a4565b6040517fbfc55edc000000000000000000000000000000000000000000000000000000008152600401610c44919061394c565b60405180910390fd5b610c568161211e565b50565b6000610c6361097e565b8210610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b906142a3565b60405180910390fd5b600a8281548110610cb857610cb76142c3565b5b90600052602060002001549050919050565b6000600c60009054906101000a900460ff16905090565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8190614364565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfb906143f6565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000610eb8600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061222f565b9050919050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610f0c826001600086815260200190815260200160002061223d90919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060038054610f8d90613f25565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb990613f25565b80156110065780601f10610fdb57610100808354040283529160200191611006565b820191906000526020600020905b815481529060010190602001808311610fe957829003601f168201915b5050505050905090565b6000801b81565b61101f6117a4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561108d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108490614462565b60405180910390fd5b806007600061109a6117a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166111476117a4565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161118c91906137d2565b60405180910390a35050565b6111a96111a36117a4565b83611a47565b6111e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111df9061417f565b60405180910390fd5b6111f484848484612257565b50505050565b600e60149054906101000a900460ff1615611241576040517f8707bbd800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112826117a4565b73ffffffffffffffffffffffffffffffffffffffff16146112cf576040517f1afde41400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112f97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826122b3565b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600e60146101000a81548160ff02191690831515021790555050565b606061136382611738565b6113a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611399906144f4565b60405180910390fd5b60006113ac6122e7565b905060008151116113cc57604051806020016040528060008152506113f7565b806113d6846122fe565b6040516020016113e7929190614550565b6040516020818303038152906040525b915050919050565b600061141c6001600084815260200190815260200160002061245f565b9050919050565b8342111561146857836040517f37c2818800000000000000000000000000000000000000000000000000000000815260040161145f9190613a3b565b60405180910390fd5b61147185610ce1565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146114e057866040517f285d879e0000000000000000000000000000000000000000000000000000000081526004016114d7919061394c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000088888861150f8c612474565b8960405160200161152596959493929190614574565b6040516020818303038152906040528051906020012090506000611548826124d2565b90506000611558828787876124ec565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115ca57806040517f5722542f0000000000000000000000000000000000000000000000000000000081526004016115c1919061394c565b60405180910390fd5b6115d489896117ac565b50505050505050505050565b6115ea8282612517565b61160f8160016000858152602001908152602001600020611f2090919063ffffffff16565b505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6001816000016000828254019250508190555050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611731575061173082612540565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661181f83610ce1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61186f8282610f14565b6118fe576118948173ffffffffffffffffffffffffffffffffffffffff166014612622565b6118a28360001c6020612622565b6040516020016118b392919061466d565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f59190613886565b60405180910390fd5b5050565b61190a610cca565b1561194a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611941906146f3565b60405180910390fd5b6001600c60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861198e6117a4565b60405161199b919061394c565b60405180910390a1565b6119ad610cca565b6119ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e39061475f565b60405180910390fd5b6000600c60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611a306117a4565b604051611a3d919061394c565b60405180910390a1565b6000611a5282611738565b611a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a88906147f1565b60405180910390fd5b6000611a9c83610ce1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b0b57508373ffffffffffffffffffffffffffffffffffffffff16611af38461078f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611b1c5750611b1b8185611614565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611b4582610ce1565b73ffffffffffffffffffffffffffffffffffffffff1614611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9290614883565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0290614915565b60405180910390fd5b611c1683838361285e565b611c216000826117ac565b6001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c719190614964565b925050819055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cc89190614998565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611d8a826109eb565b611d9b81611d966117a4565b611865565b611da583836128ad565b505050565b6000611dd2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61298d565b905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611e2c577f00000000000000000000000000000000000000000000000000000000000000009050611e9a565b611e977f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006129fd565b90505b90565b611ea56117a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0990614a60565b60405180910390fd5b611f1c8282612a37565b5050565b6000611f48836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b18565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb790614acc565b60405180910390fd5b611fc981611738565b15612009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200090614b38565b60405180910390fd5b6120156000838361285e565b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120659190614998565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600061212982610ce1565b90506121378160008461285e565b6121426000836117ac565b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121929190614964565b925050819055506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600081600001549050919050565b600061224c8360000183612c2c565b60001c905092915050565b612262848484611b25565b61226e84848484612c57565b6122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a490614bca565b60405180910390fd5b50505050565b6122bd8282612ddf565b6122e28160016000858152602001908152602001600020611daa90919063ffffffff16565b505050565b606060405180602001604052806000815250905090565b60606000821415612346576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061245a565b600082905060005b6000821461237857808061236190614bea565b915050600a826123719190614c62565b915061234e565b60008167ffffffffffffffff81111561239457612393613c2d565b5b6040519080825280601f01601f1916602001820160405280156123c65781602001600182028036833780820191505090505b5090505b60008514612453576001826123df9190614964565b9150600a856123ee9190614c93565b60306123fa9190614998565b60f81b8183815181106124105761240f6142c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561244c9190614c62565b94506123ca565b8093505050505b919050565b600061246d82600001612ded565b9050919050565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506124c18161222f565b91506124cc816116a8565b50919050565b60006124e56124df611dda565b83612dfe565b9050919050565b60008060006124fd87878787612e31565b9150915061250a81612f3e565b8192505050949350505050565b612520826109eb565b6125318161252c6117a4565b611865565b61253b8383612a37565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061260b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061261b575061261a82613113565b5b9050919050565b6060600060028360026126359190614cc4565b61263f9190614998565b67ffffffffffffffff81111561265857612657613c2d565b5b6040519080825280601f01601f19166020018201604052801561268a5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106126c2576126c16142c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612726576127256142c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026127669190614cc4565b6127709190614998565b90505b6001811115612810577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106127b2576127b16142c3565b5b1a60f81b8282815181106127c9576127c86142c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061280990614d1e565b9050612773565b5060008414612854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284b90614d94565b60405180910390fd5b8091505092915050565b612866610cca565b1561289d576040517ff396fbc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128a883838361318d565b505050565b6128b78282610f14565b61298957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061292e6117a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061299983836131e5565b6129f25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506129f7565b600090505b92915050565b60008383834630604051602001612a18959493929190614db4565b6040516020818303038152906040528051906020012090509392505050565b612a418282610f14565b15612b1457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612ab96117a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008083600101600084815260200190815260200160002054905060008114612c20576000600182612b4a9190614964565b9050600060018660000180549050612b629190614964565b9050818114612bd1576000866000018281548110612b8357612b826142c3565b5b9060005260206000200154905080876000018481548110612ba757612ba66142c3565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612be557612be4614e07565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612c26565b60009150505b92915050565b6000826000018281548110612c4457612c436142c3565b5b9060005260206000200154905092915050565b6000612c788473ffffffffffffffffffffffffffffffffffffffff16613208565b15612dd2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ca16117a4565b8786866040518563ffffffff1660e01b8152600401612cc39493929190614e8b565b6020604051808303816000875af1925050508015612cff57506040513d601f19601f82011682018060405250810190612cfc9190614eec565b60015b612d82573d8060008114612d2f576040519150601f19603f3d011682016040523d82523d6000602084013e612d34565b606091505b50600081511415612d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7190614bca565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612dd7565b600190505b949350505050565b612de982826128ad565b5050565b600081600001805490509050919050565b60008282604051602001612e13929190614f86565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612e6c576000600391509150612f35565b601b8560ff1614158015612e845750601c8560ff1614155b15612e96576000600491509150612f35565b600060018787878760405160008152602001604052604051612ebb9493929190614fcc565b6020604051602081039080840390855afa158015612edd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f2c57600060019250925050612f35565b80600092509250505b94509492505050565b60006004811115612f5257612f51615011565b5b816004811115612f6557612f64615011565b5b1415612f7057613110565b60016004811115612f8457612f83615011565b5b816004811115612f9757612f96615011565b5b1415612fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fcf9061508c565b60405180910390fd5b60026004811115612fec57612feb615011565b5b816004811115612fff57612ffe615011565b5b1415613040576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613037906150f8565b60405180910390fd5b6003600481111561305457613053615011565b5b81600481111561306757613066615011565b5b14156130a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309f9061518a565b60405180910390fd5b6004808111156130bb576130ba615011565b5b8160048111156130ce576130cd615011565b5b141561310f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131069061521c565b60405180910390fd5b5b50565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061318657506131858261321b565b5b9050919050565b613198838383613295565b6131a0610cca565b156131e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d7906152ae565b60405180910390fd5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080823b905060008111915050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061328e575061328d826133a9565b5b9050919050565b6132a0838383613413565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132e3576132de81613418565b613322565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613321576133208382613461565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561336557613360816135ce565b6133a4565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146133a3576133a2828261369f565b5b5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b600a80549050600b600083815260200190815260200160002081905550600a81908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161346e84610d93565b6134789190614964565b905060006009600084815260200190815260200160002054905081811461355d576000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816009600083815260200190815260200160002081905550505b6009600084815260200190815260200160002060009055600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600a805490506135e29190614964565b90506000600b60008481526020019081526020016000205490506000600a8381548110613612576136116142c3565b5b9060005260206000200154905080600a8381548110613634576136336142c3565b5b906000526020600020018190555081600b600083815260200190815260200160002081905550600b600085815260200190815260200160002060009055600a80548061368357613682614e07565b5b6001900381819060005260206000200160009055905550505050565b60006136aa83610d93565b905081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806009600084815260200190815260200160002081905550505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61376781613732565b811461377257600080fd5b50565b6000813590506137848161375e565b92915050565b6000602082840312156137a05761379f613728565b5b60006137ae84828501613775565b91505092915050565b60008115159050919050565b6137cc816137b7565b82525050565b60006020820190506137e760008301846137c3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561382757808201518184015260208101905061380c565b83811115613836576000848401525b50505050565b6000601f19601f8301169050919050565b6000613858826137ed565b61386281856137f8565b9350613872818560208601613809565b61387b8161383c565b840191505092915050565b600060208201905081810360008301526138a0818461384d565b905092915050565b6000819050919050565b6138bb816138a8565b81146138c657600080fd5b50565b6000813590506138d8816138b2565b92915050565b6000602082840312156138f4576138f3613728565b5b6000613902848285016138c9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139368261390b565b9050919050565b6139468161392b565b82525050565b6000602082019050613961600083018461393d565b92915050565b6139708161392b565b811461397b57600080fd5b50565b60008135905061398d81613967565b92915050565b600080604083850312156139aa576139a9613728565b5b60006139b88582860161397e565b92505060206139c9858286016138c9565b9150509250929050565b6139dc816137b7565b81146139e757600080fd5b50565b6000813590506139f9816139d3565b92915050565b600060208284031215613a1557613a14613728565b5b6000613a23848285016139ea565b91505092915050565b613a35816138a8565b82525050565b6000602082019050613a506000830184613a2c565b92915050565b600080600060608486031215613a6f57613a6e613728565b5b6000613a7d8682870161397e565b9350506020613a8e8682870161397e565b9250506040613a9f868287016138c9565b9150509250925092565b6000819050919050565b613abc81613aa9565b8114613ac757600080fd5b50565b600081359050613ad981613ab3565b92915050565b600060208284031215613af557613af4613728565b5b6000613b0384828501613aca565b91505092915050565b613b1581613aa9565b82525050565b6000602082019050613b306000830184613b0c565b92915050565b60008060408385031215613b4d57613b4c613728565b5b6000613b5b85828601613aca565b9250506020613b6c8582860161397e565b9150509250929050565b600060208284031215613b8c57613b8b613728565b5b6000613b9a8482850161397e565b91505092915050565b60008060408385031215613bba57613bb9613728565b5b6000613bc885828601613aca565b9250506020613bd9858286016138c9565b9150509250929050565b60008060408385031215613bfa57613bf9613728565b5b6000613c088582860161397e565b9250506020613c19858286016139ea565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613c658261383c565b810181811067ffffffffffffffff82111715613c8457613c83613c2d565b5b80604052505050565b6000613c9761371e565b9050613ca38282613c5c565b919050565b600067ffffffffffffffff821115613cc357613cc2613c2d565b5b613ccc8261383c565b9050602081019050919050565b82818337600083830152505050565b6000613cfb613cf684613ca8565b613c8d565b905082815260208101848484011115613d1757613d16613c28565b5b613d22848285613cd9565b509392505050565b600082601f830112613d3f57613d3e613c23565b5b8135613d4f848260208601613ce8565b91505092915050565b60008060008060808587031215613d7257613d71613728565b5b6000613d808782880161397e565b9450506020613d918782880161397e565b9350506040613da2878288016138c9565b925050606085013567ffffffffffffffff811115613dc357613dc261372d565b5b613dcf87828801613d2a565b91505092959194509250565b600060ff82169050919050565b613df181613ddb565b8114613dfc57600080fd5b50565b600081359050613e0e81613de8565b92915050565b600080600080600080600060e0888a031215613e3357613e32613728565b5b6000613e418a828b0161397e565b9750506020613e528a828b0161397e565b9650506040613e638a828b016138c9565b9550506060613e748a828b016138c9565b9450506080613e858a828b01613dff565b93505060a0613e968a828b01613aca565b92505060c0613ea78a828b01613aca565b91505092959891949750929550565b60008060408385031215613ecd57613ecc613728565b5b6000613edb8582860161397e565b9250506020613eec8582860161397e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f3d57607f821691505b60208210811415613f5157613f50613ef6565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613fb3602c836137f8565b9150613fbe82613f57565b604082019050919050565b60006020820190508181036000830152613fe281613fa6565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006140456021836137f8565b915061405082613fe9565b604082019050919050565b6000602082019050818103600083015261407481614038565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b60006140d76038836137f8565b91506140e28261407b565b604082019050919050565b60006020820190508181036000830152614106816140ca565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006141696031836137f8565b91506141748261410d565b604082019050919050565b600060208201905081810360008301526141988161415c565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006141fb602b836137f8565b91506142068261419f565b604082019050919050565b6000602082019050818103600083015261422a816141ee565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061428d602c836137f8565b915061429882614231565b604082019050919050565b600060208201905081810360008301526142bc81614280565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061434e6029836137f8565b9150614359826142f2565b604082019050919050565b6000602082019050818103600083015261437d81614341565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006143e0602a836137f8565b91506143eb82614384565b604082019050919050565b6000602082019050818103600083015261440f816143d3565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061444c6019836137f8565b915061445782614416565b602082019050919050565b6000602082019050818103600083015261447b8161443f565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006144de602f836137f8565b91506144e982614482565b604082019050919050565b6000602082019050818103600083015261450d816144d1565b9050919050565b600081905092915050565b600061452a826137ed565b6145348185614514565b9350614544818560208601613809565b80840191505092915050565b600061455c828561451f565b9150614568828461451f565b91508190509392505050565b600060c0820190506145896000830189613b0c565b614596602083018861393d565b6145a3604083018761393d565b6145b06060830186613a2c565b6145bd6080830185613a2c565b6145ca60a0830184613a2c565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061460b601783614514565b9150614616826145d5565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000614657601183614514565b915061466282614621565b601182019050919050565b6000614678826145fe565b9150614684828561451f565b915061468f8261464a565b915061469b828461451f565b91508190509392505050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006146dd6010836137f8565b91506146e8826146a7565b602082019050919050565b6000602082019050818103600083015261470c816146d0565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006147496014836137f8565b915061475482614713565b602082019050919050565b600060208201905081810360008301526147788161473c565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006147db602c836137f8565b91506147e68261477f565b604082019050919050565b6000602082019050818103600083015261480a816147ce565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b600061486d6029836137f8565b915061487882614811565b604082019050919050565b6000602082019050818103600083015261489c81614860565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006148ff6024836137f8565b915061490a826148a3565b604082019050919050565b6000602082019050818103600083015261492e816148f2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061496f826138a8565b915061497a836138a8565b92508282101561498d5761498c614935565b5b828203905092915050565b60006149a3826138a8565b91506149ae836138a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149e3576149e2614935565b5b828201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614a4a602f836137f8565b9150614a55826149ee565b604082019050919050565b60006020820190508181036000830152614a7981614a3d565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614ab66020836137f8565b9150614ac182614a80565b602082019050919050565b60006020820190508181036000830152614ae581614aa9565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614b22601c836137f8565b9150614b2d82614aec565b602082019050919050565b60006020820190508181036000830152614b5181614b15565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614bb46032836137f8565b9150614bbf82614b58565b604082019050919050565b60006020820190508181036000830152614be381614ba7565b9050919050565b6000614bf5826138a8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c2857614c27614935565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614c6d826138a8565b9150614c78836138a8565b925082614c8857614c87614c33565b5b828204905092915050565b6000614c9e826138a8565b9150614ca9836138a8565b925082614cb957614cb8614c33565b5b828206905092915050565b6000614ccf826138a8565b9150614cda836138a8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d1357614d12614935565b5b828202905092915050565b6000614d29826138a8565b91506000821415614d3d57614d3c614935565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614d7e6020836137f8565b9150614d8982614d48565b602082019050919050565b60006020820190508181036000830152614dad81614d71565b9050919050565b600060a082019050614dc96000830188613b0c565b614dd66020830187613b0c565b614de36040830186613b0c565b614df06060830185613a2c565b614dfd608083018461393d565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000614e5d82614e36565b614e678185614e41565b9350614e77818560208601613809565b614e808161383c565b840191505092915050565b6000608082019050614ea0600083018761393d565b614ead602083018661393d565b614eba6040830185613a2c565b8181036060830152614ecc8184614e52565b905095945050505050565b600081519050614ee68161375e565b92915050565b600060208284031215614f0257614f01613728565b5b6000614f1084828501614ed7565b91505092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614f4f600283614514565b9150614f5a82614f19565b600282019050919050565b6000819050919050565b614f80614f7b82613aa9565b614f65565b82525050565b6000614f9182614f42565b9150614f9d8285614f6f565b602082019150614fad8284614f6f565b6020820191508190509392505050565b614fc681613ddb565b82525050565b6000608082019050614fe16000830187613b0c565b614fee6020830186614fbd565b614ffb6040830185613b0c565b6150086060830184613b0c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006150766018836137f8565b915061508182615040565b602082019050919050565b600060208201905081810360008301526150a581615069565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006150e2601f836137f8565b91506150ed826150ac565b602082019050919050565b60006020820190508181036000830152615111816150d5565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006151746022836137f8565b915061517f82615118565b604082019050919050565b600060208201905081810360008301526151a381615167565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006152066022836137f8565b9150615211826151aa565b604082019050919050565b60006020820190508181036000830152615235816151f9565b9050919050565b7f4552433732315061757361626c653a20746f6b656e207472616e73666572207760008201527f68696c6520706175736564000000000000000000000000000000000000000000602082015250565b6000615298602b836137f8565b91506152a38261523c565b604082019050919050565b600060208201905081810360008301526152c78161528b565b905091905056fea164736f6c634300080b000a",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Non-Fungible Technologies, Inc. Built off Openzeppelin's ERC721PresetMinterPauserAutoId. Used for representing rights and obligations in the context of a loan - the right to claim collateral for lenders (instantiated as LenderNote), and the right to recover collateral upon repayment for borrowers (instantiated as BorrowerNote).",
    "details": "{ERC721} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - token ID and URI autogeneration This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts.",
    "errors": {
      "ERC721P_DeadlineExpired(uint256)": [
        {
          "params": {
            "deadline": "Permit deadline parameter as a timestamp."
          }
        }
      ],
      "ERC721P_InvalidSignature(address)": [
        {
          "params": {
            "signer": "Signer recovered from ECDSA sugnature hash."
          }
        }
      ],
      "ERC721P_NotTokenOwner(address)": [
        {
          "params": {
            "owner": "Owner parameter for the function call."
          }
        }
      ],
      "PN_BurningRole(address)": [
        {
          "params": {
            "caller": "Address of the function caller."
          }
        }
      ],
      "PN_MintingRole(address)": [
        {
          "params": {
            "caller": "Address of the function caller."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "returns": {
          "_0": "separator             The bytes for the domain separator."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "See {ERC721-_burn}.",
        "params": {
          "tokenId": "The ID of the token to burn, should match a loan."
        }
      },
      "constructor": {
        "details": "Creates the promissory note contract, granting minter, burner      and pauser roles to the specified owner address (which in practice      will be LoanCore).",
        "params": {
          "name": "The name of the token (see ERC721).",
          "symbol": "The symbol of the token (see ERC721). å     "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address)": {
        "params": {
          "loanCore": "The address of the admin."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,uint256)": {
        "details": "See {ERC721-_mint}.",
        "params": {
          "loanId": "The ID of the token to mint, should match a loan.",
          "to": "The owner of the minted token."
        },
        "returns": {
          "_0": "tokenId              The newly minted token ID."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nonces(address)": {
        "params": {
          "owner": "The given owner to check the nonce for."
        },
        "returns": {
          "_0": "current              The current noonce for the owner."
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The maximum timestamp the signature is valid for.",
          "owner": "The owner of the token being permitted.",
          "r": "Component of the signature.",
          "s": "Component of the signature.",
          "spender": "The address allowed to spend the token.",
          "tokenId": "The token ID of the given asset.",
          "v": "Component of the signature."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setPaused(bool)": {
        "params": {
          "paused": "Whether the contract should be paused."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "stateVariables": {
      "owner": {
        "details": "Initially deployer, then account with burn/mint/pause roles (LoanCore)."
      }
    },
    "title": "PromissoryNote",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC721P_DeadlineExpired(uint256)": [
        {
          "notice": "Deadline for the permit has expired."
        }
      ],
      "ERC721P_InvalidSignature(address)": [
        {
          "notice": "Invalid signature."
        }
      ],
      "ERC721P_NotTokenOwner(address)": [
        {
          "notice": "Address of the owner to also be the owner of the tokenId."
        }
      ],
      "PN_AlreadyInitialized()": [
        {
          "notice": "Roles have been initialized."
        }
      ],
      "PN_BurningRole(address)": [
        {
          "notice": "Caller of burn function must have the BURNER_ROLE in AccessControl."
        }
      ],
      "PN_CannotInitialize()": [
        {
          "notice": "Deployer is allowed to initialize roles. Caller is not deployer."
        }
      ],
      "PN_ContractPaused()": [
        {
          "notice": "No token transfers while contract is in paused state."
        }
      ],
      "PN_MintingRole(address)": [
        {
          "notice": "Caller of mint function must have the MINTER_ROLE in AccessControl."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "burn(uint256)": {
        "notice": "Create a new token and assign it to a specified owner. The token ID         should match a loan ID, and can only be called by a burner - in practice         LoanCore, which burns notes when a loan ends. Also unserts the mapping to         lookup loan IDs by note IDs."
      },
      "initialize(address)": {
        "notice": "Grants owner access to the specified address, which should be an         instance of LoanCore. Once admin role is set, it is immutable,         and cannot be set again."
      },
      "mint(address,uint256)": {
        "notice": "Create a new token and assign it to a specified owner. The token ID         should match the loan ID, and can only be called by the minter. Also         updates the mapping to lookup loan IDs by note IDs."
      },
      "nonces(address)": {
        "notice": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated. Every successful call to permit increases the owner's nonce by one. This prevents a signature from being used multiple times."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Allows the spender to spend the token ID which is owned by owner, given owner's signed approval. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `owner` must be the owner of `tokenId`. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
      },
      "setPaused(bool)": {
        "notice": "Pauses transfers on the note. This essentially blocks all loan lifecycle         operations, since all originations and transfers require transfers of         the note."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5057,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)5052_storage)"
      },
      {
        "astId": 5358,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)12229_storage)"
      },
      {
        "astId": 8785,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8787,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8791,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8795,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8799,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8805,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9754,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9758,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9761,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9765,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5878,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_paused",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 12549,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_nonces",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Counter)10712_storage)"
      },
      {
        "astId": 16660,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 16662,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "initialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 16665,
        "contract": "contracts/PromissoryNote.sol:PromissoryNote",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)10712_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)10712_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)10712_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)12229_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)12229_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5052_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5052_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)12229_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 12228,
            "contract": "contracts/PromissoryNote.sol:PromissoryNote",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)11928_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)10712_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 10711,
            "contract": "contracts/PromissoryNote.sol:PromissoryNote",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)5052_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 5049,
            "contract": "contracts/PromissoryNote.sol:PromissoryNote",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5051,
            "contract": "contracts/PromissoryNote.sol:PromissoryNote",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)11928_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 11923,
            "contract": "contracts/PromissoryNote.sol:PromissoryNote",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 11927,
            "contract": "contracts/PromissoryNote.sol:PromissoryNote",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}