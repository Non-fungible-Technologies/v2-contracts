{
  "address": "0x5848f1b79024883A65ed244EAE222A40A0189dF8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "CallAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "CallRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f2891cdfce7f52664976e18f4484e33d3eabd744c23df05bbbf52d987fb777e",
  "receipt": {
    "to": null,
    "from": "0x19F684cE81d774f306224627424dbA41D841cAD8",
    "contractAddress": "0x5848f1b79024883A65ed244EAE222A40A0189dF8",
    "transactionIndex": 0,
    "gasUsed": "391844",
    "logsBloom": "0x
    "blockHash": "0x0813e74fbd7dfb4a2ba6bb5458444fd410ebebbc13f117f2aeb24b9918ab97ec",
    "transactionHash": "0x3f2891cdfce7f52664976e18f4484e33d3eabd744c23df05bbbf52d987fb777e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31828874,
        "transactionHash": "0x3f2891cdfce7f52664976e18f4484e33d3eabd744c23df05bbbf52d987fb777e",
        "address": "0x5848f1b79024883A65ed244EAE222A40A0189dF8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019f684ce81d774f306224627424dba41d841cad8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0813e74fbd7dfb4a2ba6bb5458444fd410ebebbc13f117f2aeb24b9918ab97ec"
      }
    ],
    "blockNumber": 31828874,
    "cumulativeGasUsed": "391844",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5822da5cdcb5ff1446980bc3993c012a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"CallAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"CallRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Non-Fungible Technologies, Inc. Maintains a whitelist for calls that can be made from an AssetVault. Intended to be used to allow for \\\"claim\\\" and other-utility based functions while an asset is being held in escrow. Some functions are blacklisted, e.g. transfer functions, to prevent callers from being able to circumvent withdrawal rules for escrowed assets. Whitelists are specified in terms of \\\"target contract\\\" (callee) and function selector. The contract owner can add or remove items from the whitelist.\",\"kind\":\"dev\",\"methods\":{\"add(address,bytes4)\":{\"details\":\"A blacklist supersedes a whitelist, so should not add blacklisted selectors.\",\"params\":{\"callee\":\"The contract to whitelist.\",\"selector\":\"The function selector to whitelist.\"}},\"isBlacklisted(bytes4)\":{\"params\":{\"selector\":\"The function selector to check.\"},\"returns\":{\"_0\":\"isBlacklisted        True if blacklisted, else false.\"}},\"isWhitelisted(address,bytes4)\":{\"params\":{\"callee\":\"The contract that is intended to be called.\",\"selector\":\"The function selector that is intended to be called.\"},\"returns\":{\"_0\":\"isWhitelisted        True if whitelisted, else false.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(address,bytes4)\":{\"params\":{\"callee\":\"The contract to whitelist.\",\"selector\":\"The function selector to whitelist.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"ERC20_TRANSFER\":{\"details\":\"Global blacklist for transfer functions.\"}},\"title\":\"CallWhitelist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,bytes4)\":{\"notice\":\"Add the given callee and selector to the whitelist. Can only be called by owner.\"},\"isBlacklisted(bytes4)\":{\"notice\":\"Returns true if the given function selector is on the global blacklist.         Blacklisted function selectors cannot be called on any contract.\"},\"isWhitelisted(address,bytes4)\":{\"notice\":\"Returns true if the given function on the given callee is whitelisted.\"},\"remove(address,bytes4)\":{\"notice\":\"Remove the given calle and selector from the whitelist. Can only be called by owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/CallWhitelist.sol\":\"CallWhitelist\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interfaces/ICallWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface ICallWhitelist {\\n    // ============= Events ==============\\n\\n    event CallAdded(address operator, address callee, bytes4 selector);\\n    event CallRemoved(address operator, address callee, bytes4 selector);\\n\\n    // ================ View Functions ================\\n\\n    function isWhitelisted(address callee, bytes4 selector) external view returns (bool);\\n\\n    function isBlacklisted(bytes4 selector) external view returns (bool);\\n\\n    // ================ Update Operations ================\\n\\n    function add(address callee, bytes4 selector) external;\\n\\n    function remove(address callee, bytes4 selector) external;\\n}\\n\",\"keccak256\":\"0x732d4e4a0cfcec8325fd68867a457f000ef33ec32ace13c8791d6ac60997bcf0\",\"license\":\"MIT\"},\"contracts/vault/CallWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ICallWhitelist.sol\\\";\\n\\n/**\\n * @title CallWhitelist\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Maintains a whitelist for calls that can be made from an AssetVault.\\n * Intended to be used to allow for \\\"claim\\\" and other-utility based\\n * functions while an asset is being held in escrow. Some functions\\n * are blacklisted, e.g. transfer functions, to prevent callers from\\n * being able to circumvent withdrawal rules for escrowed assets.\\n * Whitelists are specified in terms of \\\"target contract\\\" (callee)\\n * and function selector.\\n *\\n * The contract owner can add or remove items from the whitelist.\\n */\\ncontract CallWhitelist is Ownable, ICallWhitelist {\\n    // ============================================ STATE ==============================================\\n\\n    // ============= Global Immutable State ==============\\n\\n    /**\\n     * @dev Global blacklist for transfer functions.\\n     */\\n    bytes4 private constant ERC20_TRANSFER = 0xa9059cbb;\\n    bytes4 private constant ERC20_ERC721_APPROVE = 0x095ea7b3;\\n    bytes4 private constant ERC20_ERC721_TRANSFER_FROM = 0x23b872dd;\\n\\n    bytes4 private constant ERC721_SAFE_TRANSFER_FROM = 0x42842e0e;\\n    bytes4 private constant ERC721_SAFE_TRANSFER_FROM_DATA = 0xb88d4fde;\\n    bytes4 private constant ERC721_ERC1155_SET_APPROVAL = 0xa22cb465;\\n\\n    bytes4 private constant ERC1155_SAFE_TRANSFER_FROM = 0xf242432a;\\n    bytes4 private constant ERC1155_SAFE_BATCH_TRANSFER_FROM = 0x2eb2c2d6;\\n\\n    // ================= Whitelist State ==================\\n\\n    /**\\n     * @notice Whitelist of callable functions on contracts. Maps addresses that\\n     *         can be called to function selectors which can be called on it.\\n     *         For example, if we want to allow function call 0x0000 on a contract\\n     *         at 0x1111, the mapping will contain whitelist[0x1111][0x0000] = true.\\n     */\\n    mapping(address => mapping(bytes4 => bool)) private whitelist;\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Returns true if the given function on the given callee is whitelisted.\\n     *\\n     * @param callee                The contract that is intended to be called.\\n     * @param selector              The function selector that is intended to be called.\\n     *\\n     * @return isWhitelisted        True if whitelisted, else false.\\n     */\\n    function isWhitelisted(address callee, bytes4 selector) external view override returns (bool) {\\n        return !isBlacklisted(selector) && whitelist[callee][selector];\\n    }\\n\\n    /**\\n     * @notice Returns true if the given function selector is on the global blacklist.\\n     *         Blacklisted function selectors cannot be called on any contract.\\n     *\\n     * @param selector              The function selector to check.\\n     *\\n     * @return isBlacklisted        True if blacklisted, else false.\\n     */\\n    function isBlacklisted(bytes4 selector) public pure override returns (bool) {\\n        return\\n            selector == ERC20_TRANSFER ||\\n            selector == ERC20_ERC721_APPROVE ||\\n            selector == ERC20_ERC721_TRANSFER_FROM ||\\n            selector == ERC721_SAFE_TRANSFER_FROM ||\\n            selector == ERC721_SAFE_TRANSFER_FROM_DATA ||\\n            selector == ERC721_ERC1155_SET_APPROVAL ||\\n            selector == ERC1155_SAFE_TRANSFER_FROM ||\\n            selector == ERC1155_SAFE_BATCH_TRANSFER_FROM;\\n    }\\n\\n    // ======================================== UPDATE OPERATIONS =======================================\\n\\n    /**\\n     * @notice Add the given callee and selector to the whitelist. Can only be called by owner.\\n     * @dev    A blacklist supersedes a whitelist, so should not add blacklisted selectors.\\n     *\\n     * @param callee                The contract to whitelist.\\n     * @param selector              The function selector to whitelist.\\n     */\\n    function add(address callee, bytes4 selector) external override onlyOwner {\\n        whitelist[callee][selector] = true;\\n        emit CallAdded(msg.sender, callee, selector);\\n    }\\n\\n    /**\\n     * @notice Remove the given calle and selector from the whitelist. Can only be called by owner.\\n     *\\n     * @param callee                The contract to whitelist.\\n     * @param selector              The function selector to whitelist.\\n     */\\n    function remove(address callee, bytes4 selector) external override onlyOwner {\\n        whitelist[callee][selector] = false;\\n        emit CallRemoved(msg.sender, callee, selector);\\n    }\\n}\\n\",\"keccak256\":\"0x244b2380cf62615c6903bf4938c79a399392f8e4340de9b34d07f2139e16e09e\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105ab8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100d25780638da5cb5b146100da5780639dc26f0f146100f5578063f2fde38b1461010857600080fd5b80631c0554ba146100825780632dba161f146100aa57806330ace3bd146100bf575b600080fd5b6100956100903660046104d3565b61011b565b60405190151581526020015b60405180910390f35b6100bd6100b83660046104d3565b610167565b005b6100bd6100cd3660046104d3565b610212565b6100bd6102a5565b6000546040516001600160a01b0390911681526020016100a1565b610095610103366004610506565b6102db565b6100bd610116366004610521565b6103b4565b6000610126826102db565b15801561016057506001600160a01b03831660009081526001602090815260408083206001600160e01b03198616845290915290205460ff165b9392505050565b6000546001600160a01b0316331461019a5760405162461bcd60e51b81526004016101919061053c565b60405180910390fd5b6001600160a01b03821660009081526001602081815260408084206001600160e01b03198616855290915291829020805460ff19169091179055517f6c4717042af0f452c112b6fff33e4a552b9f764fa41370abf2ebf2f152e124ad9061020690339085908590610571565b60405180910390a15050565b6000546001600160a01b0316331461023c5760405162461bcd60e51b81526004016101919061053c565b6001600160a01b03821660009081526001602090815260408083206001600160e01b03198516845290915290819020805460ff19169055517f5b7da002bcc7b0f0f515c6024952de7abfc209b013640e6e560ecefdac248b059061020690339085908590610571565b6000546001600160a01b031633146102cf5760405162461bcd60e51b81526004016101919061053c565b6102d9600061044f565b565b60006001600160e01b0319821663a9059cbb60e01b148061030c57506001600160e01b0319821663095ea7b360e01b145b8061032757506001600160e01b031982166323b872dd60e01b145b8061034257506001600160e01b03198216632142170760e11b145b8061035d57506001600160e01b03198216635c46a7ef60e11b145b8061037857506001600160e01b0319821663a22cb46560e01b145b8061039357506001600160e01b03198216637921219560e11b145b806103ae57506001600160e01b03198216631759616b60e11b145b92915050565b6000546001600160a01b031633146103de5760405162461bcd60e51b81526004016101919061053c565b6001600160a01b0381166104435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b61044c8161044f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146104b657600080fd5b919050565b80356001600160e01b0319811681146104b657600080fd5b600080604083850312156104e657600080fd5b6104ef8361049f565b91506104fd602084016104bb565b90509250929050565b60006020828403121561051857600080fd5b610160826104bb565b60006020828403121561053357600080fd5b6101608261049f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0393841681529190921660208201526001600160e01b031990911660408201526060019056fea164736f6c634300080b000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100d25780638da5cb5b146100da5780639dc26f0f146100f5578063f2fde38b1461010857600080fd5b80631c0554ba146100825780632dba161f146100aa57806330ace3bd146100bf575b600080fd5b6100956100903660046104d3565b61011b565b60405190151581526020015b60405180910390f35b6100bd6100b83660046104d3565b610167565b005b6100bd6100cd3660046104d3565b610212565b6100bd6102a5565b6000546040516001600160a01b0390911681526020016100a1565b610095610103366004610506565b6102db565b6100bd610116366004610521565b6103b4565b6000610126826102db565b15801561016057506001600160a01b03831660009081526001602090815260408083206001600160e01b03198616845290915290205460ff165b9392505050565b6000546001600160a01b0316331461019a5760405162461bcd60e51b81526004016101919061053c565b60405180910390fd5b6001600160a01b03821660009081526001602081815260408084206001600160e01b03198616855290915291829020805460ff19169091179055517f6c4717042af0f452c112b6fff33e4a552b9f764fa41370abf2ebf2f152e124ad9061020690339085908590610571565b60405180910390a15050565b6000546001600160a01b0316331461023c5760405162461bcd60e51b81526004016101919061053c565b6001600160a01b03821660009081526001602090815260408083206001600160e01b03198516845290915290819020805460ff19169055517f5b7da002bcc7b0f0f515c6024952de7abfc209b013640e6e560ecefdac248b059061020690339085908590610571565b6000546001600160a01b031633146102cf5760405162461bcd60e51b81526004016101919061053c565b6102d9600061044f565b565b60006001600160e01b0319821663a9059cbb60e01b148061030c57506001600160e01b0319821663095ea7b360e01b145b8061032757506001600160e01b031982166323b872dd60e01b145b8061034257506001600160e01b03198216632142170760e11b145b8061035d57506001600160e01b03198216635c46a7ef60e11b145b8061037857506001600160e01b0319821663a22cb46560e01b145b8061039357506001600160e01b03198216637921219560e11b145b806103ae57506001600160e01b03198216631759616b60e11b145b92915050565b6000546001600160a01b031633146103de5760405162461bcd60e51b81526004016101919061053c565b6001600160a01b0381166104435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b61044c8161044f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146104b657600080fd5b919050565b80356001600160e01b0319811681146104b657600080fd5b600080604083850312156104e657600080fd5b6104ef8361049f565b91506104fd602084016104bb565b90509250929050565b60006020828403121561051857600080fd5b610160826104bb565b60006020828403121561053357600080fd5b6101608261049f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0393841681529190921660208201526001600160e01b031990911660408201526060019056fea164736f6c634300080b000a",
  "devdoc": {
    "author": "Non-Fungible Technologies, Inc. Maintains a whitelist for calls that can be made from an AssetVault. Intended to be used to allow for \"claim\" and other-utility based functions while an asset is being held in escrow. Some functions are blacklisted, e.g. transfer functions, to prevent callers from being able to circumvent withdrawal rules for escrowed assets. Whitelists are specified in terms of \"target contract\" (callee) and function selector. The contract owner can add or remove items from the whitelist.",
    "kind": "dev",
    "methods": {
      "add(address,bytes4)": {
        "details": "A blacklist supersedes a whitelist, so should not add blacklisted selectors.",
        "params": {
          "callee": "The contract to whitelist.",
          "selector": "The function selector to whitelist."
        }
      },
      "isBlacklisted(bytes4)": {
        "params": {
          "selector": "The function selector to check."
        },
        "returns": {
          "_0": "isBlacklisted        True if blacklisted, else false."
        }
      },
      "isWhitelisted(address,bytes4)": {
        "params": {
          "callee": "The contract that is intended to be called.",
          "selector": "The function selector that is intended to be called."
        },
        "returns": {
          "_0": "isWhitelisted        True if whitelisted, else false."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(address,bytes4)": {
        "params": {
          "callee": "The contract to whitelist.",
          "selector": "The function selector to whitelist."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "ERC20_TRANSFER": {
        "details": "Global blacklist for transfer functions."
      }
    },
    "title": "CallWhitelist",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,bytes4)": {
        "notice": "Add the given callee and selector to the whitelist. Can only be called by owner."
      },
      "isBlacklisted(bytes4)": {
        "notice": "Returns true if the given function selector is on the global blacklist.         Blacklisted function selectors cannot be called on any contract."
      },
      "isWhitelisted(address,bytes4)": {
        "notice": "Returns true if the given function on the given callee is whitelisted."
      },
      "remove(address,bytes4)": {
        "notice": "Remove the given calle and selector from the whitelist. Can only be called by owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5624,
        "contract": "contracts/vault/CallWhitelist.sol:CallWhitelist",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20907,
        "contract": "contracts/vault/CallWhitelist.sol:CallWhitelist",
        "label": "whitelist",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}