{
  "address": "0x018CAf8f9f5273D9B83d8eec38e0135aE6FC61b2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownershipToken",
          "type": "address"
        }
      ],
      "name": "AV_AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AV_CallDisallowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "data",
          "type": "bytes4"
        }
      ],
      "name": "AV_NonWhitelistedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AV_WithdrawsDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AV_WithdrawsEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OERC721_CallerNotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Call",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "WithdrawEnabled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelist",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "contract ICallWhitelist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x19a3ed11076aeacb22a1ca03a3cabcb7db8b1483413ec6d9da130402e46f1cee",
  "receipt": {
    "to": null,
    "from": "0x19F684cE81d774f306224627424dbA41D841cAD8",
    "contractAddress": "0x018CAf8f9f5273D9B83d8eec38e0135aE6FC61b2",
    "transactionIndex": 1,
    "gasUsed": "1385504",
    "logsBloom": "0x
    "blockHash": "0x36344a5857e0478c60c55595f3a168f9b562e08a51a656b9d844b432503bf6e1",
    "transactionHash": "0x19a3ed11076aeacb22a1ca03a3cabcb7db8b1483413ec6d9da130402e46f1cee",
    "logs": [],
    "blockNumber": 31828876,
    "cumulativeGasUsed": "1515270",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5822da5cdcb5ff1446980bc3993c012a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownershipToken\",\"type\":\"address\"}],\"name\":\"AV_AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AV_CallDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"data\",\"type\":\"bytes4\"}],\"name\":\"AV_NonWhitelistedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AV_WithdrawsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AV_WithdrawsEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OERC721_CallerNotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"WithdrawEnabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract ICallWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Non-Fungible Technologies, Inc. The Asset Vault is a vault for the storage of collateralized assets. Designed for one-time use, like a piggy bank. Once withdrawals are enabled, and the bank is broken, the vault can no longer be used or transferred. It starts in a deposit-only state. Funds cannot be withdrawn at this point. When the owner calls \\\"enableWithdraw()\\\", the state is set to a withdrawEnabled state. Withdraws cannot be disabled once enabled. This restriction protects integrations and purchasers of AssetVaults from unexpected withdrawal and frontrunning attacks. For exampple: someone buys an AV assuming it contains token X, but I withdraw token X immediately before the sale concludes.\",\"details\":\"Asset Vaults support arbitrary external calls by either:     - the current owner of the vault     - someone who the current owner \\\"delegates\\\" through the ICallDelegator interface This is to enable airdrop claims by borrowers during loans and other forms of NFT utility. In practice, LoanCore delegates to the borrower during the period of an open loan. Arcade.xyz maintains an allowed and restricted list of calls to balance between utility and security.\",\"errors\":{\"AV_AlreadyInitialized(address)\":[{\"params\":{\"ownershipToken\":\"Caller of initialize function in asset vault contract.\"}}],\"AV_CallDisallowed(address)\":[{\"params\":{\"caller\":\"Msg.sender of the function call.\"}}],\"AV_NonWhitelistedCall(address,bytes4)\":[{\"params\":{\"data\":\"The data to call the contract with.\",\"to\":\"The contract address to call.\"}}],\"OERC721_CallerNotOwner(address)\":[{\"params\":{\"caller\":\"Msg.sender of the function call.\"}}]},\"kind\":\"dev\",\"methods\":{\"call(address,bytes)\":{\"params\":{\"data\":\"The data to call the contract with.\",\"to\":\"The contract address to call.\"}},\"constructor\":{\"details\":\"Initializes values so initialize cannot be called on template.\"},\"enableWithdraw()\":{\"details\":\"Any integration should be aware that a withdraw-enabled vault cannot      be transferred (will revert).\"},\"initialize(address)\":{\"params\":{\"_whitelist\":\"The contract maintaing the whitelist of allowed                              arbitrary calls.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"returns\":{\"ownerAddress\":\"        The owner of the underlying token derived from                              the calling address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawERC1155(address,uint256,address)\":{\"params\":{\"to\":\"The recipient of the withdrawn funds.\",\"token\":\"The ERC1155 token to withdraw.\",\"tokenId\":\"The ID of the token to withdraw.\"}},\"withdrawERC20(address,address)\":{\"params\":{\"to\":\"The recipient of the withdrawn funds.\",\"token\":\"The ERC20 token to withdraw.\"}},\"withdrawERC721(address,uint256,address)\":{\"params\":{\"to\":\"The recipient of the withdrawn token.\",\"token\":\"The token to withdraw.\",\"tokenId\":\"The ID of the NFT to withdraw.\"}},\"withdrawETH(address)\":{\"params\":{\"to\":\"The recipient of the withdrawn funds.\"}}},\"stateVariables\":{\"withdrawEnabled\":{\"details\":\"Note once set to true, it cannot be reverted back to false.\"}},\"title\":\"AssetVault\",\"version\":1},\"userdoc\":{\"errors\":{\"AV_AlreadyInitialized(address)\":[{\"notice\":\"Asset vault already initialized.\"}],\"AV_CallDisallowed(address)\":[{\"notice\":\"Call disallowed.\"}],\"AV_NonWhitelistedCall(address,bytes4)\":[{\"notice\":\"Call disallowed.\"}],\"AV_WithdrawsDisabled()\":[{\"notice\":\"Vault withdraws must be enabled.\"}],\"AV_WithdrawsEnabled()\":[{\"notice\":\"Vault withdraws enabled.\"}],\"OERC721_CallerNotOwner(address)\":[{\"notice\":\"Function caller is not the owner.\"}]},\"kind\":\"user\",\"methods\":{\"call(address,bytes)\":{\"notice\":\"Call a function on an external contract. Intended for claiming airdrops         and other forms of NFT utility. All allowed calls are whitelist by the         \\\"whitelist\\\" contract. The vault must have withdrawals disabled, and the caller         must either be the owner, or the owner must have explicitly         delegated this ability to the caller through ICallDelegator interface.\"},\"enableWithdraw()\":{\"notice\":\"Enables withdrawals on the vault. Irreversible. Caller must be the         owner of the underlying ownership NFT.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract, used on clone deployments. In practice,         always called by the VaultFactory contract.\"},\"owner()\":{\"notice\":\"Specifies the owner of the underlying token ID, derived         from the contract address of the contract implementing.\"},\"whitelist()\":{\"notice\":\"Whitelist contract to determine if a given external call is allowed.\"},\"withdrawERC1155(address,uint256,address)\":{\"notice\":\"Withdraw entire balance of a given ERC1155 token from the vault.         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),         and the caller must be the owner.\"},\"withdrawERC20(address,address)\":{\"notice\":\"Withdraw entire balance of a given ERC20 token from the vault.         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),         and the caller must be the owner.\"},\"withdrawERC721(address,uint256,address)\":{\"notice\":\"Withdraw entire balance of a given ERC20 token from the vault.         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),         and the caller must be the owner. The specified token must         exist and be owned by this contract.\"},\"withdrawETH(address)\":{\"notice\":\"Withdraw entire balance of ETH from the vault.         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),         and the caller must be the owner.\"},\"withdrawEnabled()\":{\"notice\":\"True if withdrawals are allowed out of this vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/AssetVault.sol\":\"AssetVault\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/errors/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title VaultErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains all custom errors for vault contracts used by the protocol.\\n * All errors prefixed by the contract that throws them (e.g., \\\"AV_\\\" for Asset Vault).\\n * Errors located in one place to make it possible to holistically look at all\\n * asset vault failure cases.\\n */\\n\\n// ==================================== Asset Vault ======================================\\n/// @notice All errors prefixed with AV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Vault withdraws must be enabled.\\n */\\nerror AV_WithdrawsDisabled();\\n\\n/**\\n * @notice Vault withdraws enabled.\\n */\\nerror AV_WithdrawsEnabled();\\n\\n/**\\n * @notice Asset vault already initialized.\\n *\\n * @param ownershipToken                    Caller of initialize function in asset vault contract.\\n */\\nerror AV_AlreadyInitialized(address ownershipToken);\\n\\n/**\\n * @notice Call disallowed.\\n *\\n * @param caller                             Msg.sender of the function call.\\n */\\nerror AV_CallDisallowed(address caller);\\n\\n/**\\n * @notice Call disallowed.\\n *\\n * @param to                                The contract address to call.\\n * @param data                              The data to call the contract with.\\n */\\nerror AV_NonWhitelistedCall(address to, bytes4 data);\\n\\n// ==================================== Ownable ERC721 ======================================\\n/// @notice All errors prefixed with OERC721_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Function caller is not the owner.\\n *\\n * @param caller                             Msg.sender of the function call.\\n */\\nerror OERC721_CallerNotOwner(address caller);\\n\\n// ==================================== Vault Factory ======================================\\n/// @notice All errors prefixed with VF_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Template contract is invalid.\\n *\\n * @param template                           Template contract to be cloned.\\n */\\nerror VF_InvalidTemplate(address template);\\n\\n/**\\n * @notice Global index out of bounds.\\n *\\n * @param tokenId                            AW-V2 tokenId of the asset vault.\\n */\\nerror VF_TokenIdOutOfBounds(uint256 tokenId);\\n\\n/**\\n * @notice Cannot transfer with withdraw enabled.\\n *\\n * @param tokenId                            AW-V2 tokenId of the asset vault.\\n */\\nerror VF_NoTransferWithdrawEnabled(uint256 tokenId);\\n\",\"keccak256\":\"0x7f0b8328374013d8230734405e3a89b5881db6e8e721024528e8619f911d0453\",\"license\":\"MIT\"},\"contracts/interfaces/IAssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./ICallWhitelist.sol\\\";\\n\\ninterface IAssetVault {\\n    // ============= Events ==============\\n\\n    event WithdrawEnabled(address operator);\\n    event WithdrawERC20(address indexed operator, address indexed token, address recipient, uint256 amount);\\n    event WithdrawERC721(address indexed operator, address indexed token, address recipient, uint256 tokenId);\\n\\n    event WithdrawERC1155(\\n        address indexed operator,\\n        address indexed token,\\n        address recipient,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event WithdrawETH(address indexed operator, address indexed recipient, uint256 amount);\\n    event Call(address indexed operator, address indexed to, bytes data);\\n\\n    // ================= Initializer ==================\\n\\n    function initialize(address _whitelist) external;\\n\\n    // ================ View Functions ================\\n\\n    function withdrawEnabled() external view returns (bool);\\n\\n    function whitelist() external view returns (ICallWhitelist);\\n\\n    // ================ Withdrawal Operations ================\\n\\n    function enableWithdraw() external;\\n\\n    function withdrawERC20(address token, address to) external;\\n\\n    function withdrawERC721(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external;\\n\\n    function withdrawERC1155(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external;\\n\\n    function withdrawETH(address to) external;\\n\\n    // ================ Utility Operations ================\\n\\n    function call(address to, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0xd35960d7a0da37033e2797fba894f77a7096d3dd911f66bf7027a3ef67a7076a\",\"license\":\"MIT\"},\"contracts/interfaces/ICallDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface ICallDelegator {\\n    // ============== View Functions ==============\\n\\n    function canCallOn(address caller, address vault) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7db3cd128f93f871c301421e8e57bddbf4a4b00e034ad07301fad32b02c5d3bc\",\"license\":\"MIT\"},\"contracts/interfaces/ICallWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface ICallWhitelist {\\n    // ============= Events ==============\\n\\n    event CallAdded(address operator, address callee, bytes4 selector);\\n    event CallRemoved(address operator, address callee, bytes4 selector);\\n\\n    // ================ View Functions ================\\n\\n    function isWhitelisted(address callee, bytes4 selector) external view returns (bool);\\n\\n    function isBlacklisted(bytes4 selector) external view returns (bool);\\n\\n    // ================ Update Operations ================\\n\\n    function add(address callee, bytes4 selector) external;\\n\\n    function remove(address callee, bytes4 selector) external;\\n}\\n\",\"keccak256\":\"0x732d4e4a0cfcec8325fd68867a457f000ef33ec32ace13c8791d6ac60997bcf0\",\"license\":\"MIT\"},\"contracts/vault/AssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/ICallWhitelist.sol\\\";\\nimport \\\"../interfaces/ICallDelegator.sol\\\";\\nimport \\\"../interfaces/IAssetVault.sol\\\";\\nimport \\\"./OwnableERC721.sol\\\";\\n\\nimport { AV_WithdrawsDisabled, AV_WithdrawsEnabled, AV_AlreadyInitialized, AV_CallDisallowed, AV_NonWhitelistedCall } from \\\"../errors/Vault.sol\\\";\\n\\n/**\\n * @title AssetVault\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Asset Vault is a vault for the storage of collateralized assets.\\n * Designed for one-time use, like a piggy bank. Once withdrawals are enabled,\\n * and the bank is broken, the vault can no longer be used or transferred.\\n *\\n * It starts in a deposit-only state. Funds cannot be withdrawn at this point. When\\n * the owner calls \\\"enableWithdraw()\\\", the state is set to a withdrawEnabled state.\\n * Withdraws cannot be disabled once enabled. This restriction protects integrations\\n * and purchasers of AssetVaults from unexpected withdrawal and frontrunning attacks.\\n * For exampple: someone buys an AV assuming it contains token X, but I withdraw token X\\n * immediately before the sale concludes.\\n *\\n * @dev Asset Vaults support arbitrary external calls by either:\\n *     - the current owner of the vault\\n *     - someone who the current owner \\\"delegates\\\" through the ICallDelegator interface\\n *\\n * This is to enable airdrop claims by borrowers during loans and other forms of NFT utility.\\n * In practice, LoanCore delegates to the borrower during the period of an open loan.\\n * Arcade.xyz maintains an allowed and restricted list of calls to balance between utility and security.\\n */\\ncontract AssetVault is IAssetVault, OwnableERC721, Initializable, ERC1155Holder, ERC721Holder, ReentrancyGuard {\\n    using Address for address;\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ==============================================\\n\\n    /// @notice True if withdrawals are allowed out of this vault.\\n    /// @dev Note once set to true, it cannot be reverted back to false.\\n    bool public override withdrawEnabled;\\n\\n    /// @notice Whitelist contract to determine if a given external call is allowed.\\n    ICallWhitelist public override whitelist;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @dev Initializes values so initialize cannot be called on template.\\n     */\\n    constructor() {\\n        withdrawEnabled = true;\\n        OwnableERC721._setNFT(msg.sender);\\n    }\\n\\n    // ========================================== INITIALIZER ===========================================\\n\\n    /**\\n     * @notice Initializes the contract, used on clone deployments. In practice,\\n     *         always called by the VaultFactory contract.\\n     *\\n     * @param _whitelist            The contract maintaing the whitelist of allowed\\n     *                              arbitrary calls.\\n     */\\n    function initialize(address _whitelist) external override initializer {\\n        if (withdrawEnabled || ownershipToken != address(0)) revert AV_AlreadyInitialized(ownershipToken);\\n        // set ownership to inherit from the factory who deployed us\\n        // The factory should have a tokenId == uint256(address(this))\\n        // whose owner has ownership control over this contract\\n        OwnableERC721._setNFT(msg.sender);\\n        whitelist = ICallWhitelist(_whitelist);\\n    }\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @inheritdoc OwnableERC721\\n     */\\n    function owner() public view override returns (address ownerAddress) {\\n        return OwnableERC721.owner();\\n    }\\n\\n    // ===================================== WITHDRAWAL OPERATIONS ======================================\\n\\n    /**\\n     * @notice Enables withdrawals on the vault. Irreversible. Caller must be the\\n     *         owner of the underlying ownership NFT.\\n     *\\n     * @dev Any integration should be aware that a withdraw-enabled vault cannot\\n     *      be transferred (will revert).\\n     *\\n     */\\n    function enableWithdraw() external override onlyOwner onlyWithdrawDisabled {\\n        withdrawEnabled = true;\\n        emit WithdrawEnabled(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw entire balance of a given ERC20 token from the vault.\\n     *         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),\\n     *         and the caller must be the owner.\\n     *\\n     * @param token                 The ERC20 token to withdraw.\\n     * @param to                    The recipient of the withdrawn funds.\\n     */\\n    function withdrawERC20(address token, address to) external override onlyOwner onlyWithdrawEnabled {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).safeTransfer(to, balance);\\n        emit WithdrawERC20(msg.sender, token, to, balance);\\n    }\\n\\n    /**\\n     * @notice Withdraw entire balance of a given ERC20 token from the vault.\\n     *         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),\\n     *         and the caller must be the owner. The specified token must\\n     *         exist and be owned by this contract.\\n     *\\n     * @param token                 The token to withdraw.\\n     * @param tokenId               The ID of the NFT to withdraw.\\n     * @param to                    The recipient of the withdrawn token.\\n     *\\n     */\\n    function withdrawERC721(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external override onlyOwner onlyWithdrawEnabled {\\n        IERC721(token).safeTransferFrom(address(this), to, tokenId);\\n        emit WithdrawERC721(msg.sender, token, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Withdraw entire balance of a given ERC1155 token from the vault.\\n     *         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),\\n     *         and the caller must be the owner.\\n     *\\n     * @param token                 The ERC1155 token to withdraw.\\n     * @param tokenId               The ID of the token to withdraw.\\n     * @param to                    The recipient of the withdrawn funds.\\n     */\\n    function withdrawERC1155(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external override onlyOwner onlyWithdrawEnabled {\\n        uint256 balance = IERC1155(token).balanceOf(address(this), tokenId);\\n        IERC1155(token).safeTransferFrom(address(this), to, tokenId, balance, \\\"\\\");\\n        emit WithdrawERC1155(msg.sender, token, to, tokenId, balance);\\n    }\\n\\n    /**\\n     * @notice Withdraw entire balance of ETH from the vault.\\n     *         The vault must be in a \\\"withdrawEnabled\\\" state (non-transferrable),\\n     *         and the caller must be the owner.\\n     *\\n     * @param to                    The recipient of the withdrawn funds.\\n     */\\n    function withdrawETH(address to) external override onlyOwner onlyWithdrawEnabled nonReentrant {\\n        // perform transfer\\n        uint256 balance = address(this).balance;\\n        payable(to).sendValue(balance);\\n        emit WithdrawETH(msg.sender, to, balance);\\n    }\\n\\n    // ====================================== UTILITY OPERATIONS ========================================\\n\\n    /**\\n     * @notice Call a function on an external contract. Intended for claiming airdrops\\n     *         and other forms of NFT utility. All allowed calls are whitelist by the\\n     *         \\\"whitelist\\\" contract. The vault must have withdrawals disabled, and the caller\\n     *         must either be the owner, or the owner must have explicitly\\n     *         delegated this ability to the caller through ICallDelegator interface.\\n     *\\n     * @param to The contract address to call.\\n     * @param data The data to call the contract with.\\n     */\\n    function call(address to, bytes calldata data) external override onlyWithdrawDisabled nonReentrant {\\n        if (msg.sender != owner() && !ICallDelegator(owner()).canCallOn(msg.sender, address(this)))\\n            revert AV_CallDisallowed(msg.sender);\\n\\n        if (!whitelist.isWhitelisted(to, bytes4(data[:4]))) revert AV_NonWhitelistedCall(to, bytes4(data[:4]));\\n\\n        to.functionCall(data);\\n\\n        emit Call(msg.sender, to, data);\\n    }\\n\\n    // ============================================ HELPERS =============================================\\n\\n    /**\\n     * @dev For methods only callable with withdraws enabled (all withdrawal operations).\\n     */\\n    modifier onlyWithdrawEnabled() {\\n        if (!withdrawEnabled) revert AV_WithdrawsDisabled();\\n        _;\\n    }\\n\\n    /**\\n     * @dev For methods only callable with withdraws disabled (call operations and enabling withdraws).\\n     */\\n    modifier onlyWithdrawDisabled() {\\n        if (withdrawEnabled) revert AV_WithdrawsEnabled();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Fallback \\\"receive Ether\\\" function. Contract can hold Ether\\n     *      which can be accessed using withdrawETH.\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xeeced9614f97b4e6001bee9cabad2671f17d6a6060cea169fc0d1175e5623f53\",\"license\":\"MIT\"},\"contracts/vault/OwnableERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport { OERC721_CallerNotOwner } from \\\"../errors/Vault.sol\\\";\\n\\n/**\\n * @title OwnableERC721\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Uses ERC721 ownership for access control to a set of contracts.\\n * Ownership of underlying contract determined by ownership of a token ID,\\n * where the token ID converts to an on-chain address.\\n */\\nabstract contract OwnableERC721 {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The ERC721 token that contract owners should have ownership of.\\n    address public ownershipToken;\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Specifies the owner of the underlying token ID, derived\\n     *         from the contract address of the contract implementing.\\n     *\\n     * @return ownerAddress         The owner of the underlying token derived from\\n     *                              the calling address.\\n     */\\n    function owner() public view virtual returns (address ownerAddress) {\\n        return IERC721(ownershipToken).ownerOf(uint256(uint160(address(this))));\\n    }\\n\\n    // ============================================ HELPERS =============================================\\n\\n    /**\\n     * @dev Set the ownership token - the ERC721 that specified who controls\\n     *      defined addresses.\\n     */\\n    function _setNFT(address _ownershipToken) internal {\\n        ownershipToken = _ownershipToken;\\n    }\\n\\n    /**\\n     * @dev Similar to Ownable - checks the method is being called by the owner,\\n     *      where the owner is defined by the token ID in the ownership token which\\n     *      maps to the calling contract address.\\n     */\\n    modifier onlyOwner() {\\n        if (owner() != msg.sender) revert OERC721_CallerNotOwner(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe4c7c981886f571070ff962ba44537c5b91159a5bf9a63159995932d3bb66f25\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060018080556002805460ff191690911790556100373361003c602090811b610cb117901c565b61005e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6116e18061006d6000396000f3fe6080604052600436106100ec5760003560e01c80637b9f76b51161008a5780639456fbcc116100595780639456fbcc14610294578063bc197c81146102b4578063c4d66de8146102e0578063f23a6e611461030057600080fd5b80637b9f76b51461021a5780638da5cb5b1461023a57806392e6b3441461024f57806393e59dc11461026f57600080fd5b80632287e96a116100c65780632287e96a146101935780635b984ff6146101ad578063690d8320146101c25780637b3d9af7146101e257600080fd5b806301ffc9a7146100f8578063150b7a021461012d5780631b8b921d1461017157600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004611143565b61032c565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061015861014836600461123c565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610124565b34801561017d57600080fd5b5061019161018c3660046112a8565b610363565b005b34801561019f57600080fd5b506002546101189060ff1681565b3480156101b957600080fd5b50610191610606565b3480156101ce57600080fd5b506101916101dd36600461132d565b61069e565b3480156101ee57600080fd5b50600054610202906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b34801561022657600080fd5b5061019161023536600461134a565b6107a7565b34801561024657600080fd5b506102026108b2565b34801561025b57600080fd5b5061019161026a36600461134a565b6108c1565b34801561027b57600080fd5b506002546102029061010090046001600160a01b031681565b3480156102a057600080fd5b506101916102af36600461138c565b610a5e565b3480156102c057600080fd5b506101586102cf36600461143a565b63bc197c8160e01b95945050505050565b3480156102ec57600080fd5b506101916102fb36600461132d565b610b79565b34801561030c57600080fd5b5061015861031b3660046114e8565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061035d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60025460ff161561038757604051631001146b60e11b815260040160405180910390fd5b600260015414156103df5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556103ec6108b2565b6001600160a01b0316336001600160a01b03161415801561048257506104106108b2565b604051631727adb360e11b81523360048201523060248201526001600160a01b039190911690632e4f5b6690604401602060405180830381865afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190611551565b155b156104a2576040516395bb88d360e01b81523360048201526024016103d6565b60025461010090046001600160a01b0316631c0554ba846104c7600460008688611573565b6104d09161159d565b6040518363ffffffff1660e01b81526004016104ed9291906115cd565b602060405180830381865afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190611551565b6105655782610541600460008486611573565b61054a9161159d565b60405163148113d760e11b81526004016103d69291906115cd565b6105af82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b03871692915050610cd3565b50826001600160a01b0316336001600160a01b03167f2a21062ee9199c2e205622999eeb7c3da73153674f36a0acd3f74fa6af67bde384846040516105f59291906115f0565b60405180910390a350506001805550565b3361060f6108b2565b6001600160a01b03161461063857604051632f079fab60e11b81523360048201526024016103d6565b60025460ff161561065c57604051631001146b60e11b815260040160405180910390fd5b6002805460ff191660011790556040513381527f791f6d5e6c2e44c825c52599c43037481174b362f3b48772bc1d12b3580375f39060200160405180910390a1565b336106a76108b2565b6001600160a01b0316146106d057604051632f079fab60e11b81523360048201526024016103d6565b60025460ff166106f357604051634ba56cfd60e01b815260040160405180910390fd5b600260015414156107465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103d6565b60026001554761075f6001600160a01b03831682610d1c565b6040518181526001600160a01b0383169033907f6b1f4ce962fec27598edceab6195c77516c3df32025eaf0c38d0d4009ac3bd489060200160405180910390a3505060018055565b336107b06108b2565b6001600160a01b0316146107d957604051632f079fab60e11b81523360048201526024016103d6565b60025460ff166107fc57604051634ba56cfd60e01b815260040160405180910390fd5b604051632142170760e11b81523060048201526001600160a01b038281166024830152604482018490528416906342842e0e90606401600060405180830381600087803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b5050604080516001600160a01b03858116825260208201879052871693503392507fdda3c0642e11f394f73a64f4b8ce1ff25619d2bb8ea8dd593966c499ee7e141b91015b60405180910390a3505050565b60006108bc610e3a565b905090565b336108ca6108b2565b6001600160a01b0316146108f357604051632f079fab60e11b81523360048201526024016103d6565b60025460ff1661091657604051634ba56cfd60e01b815260040160405180910390fd5b604051627eeac760e11b8152306004820152602481018390526000906001600160a01b0385169062fdd58e90604401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061161f565b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a48301529192509085169063f242432a9060c401600060405180830381600087803b1580156109ef57600080fd5b505af1158015610a03573d6000803e3d6000fd5b5050604080516001600160a01b0386811682526020820188905291810185905290871692503391507f37a31f808d48f07f163b599033008687f07840161063bf57da0e27406ebb0d7e9060600160405180910390a350505050565b33610a676108b2565b6001600160a01b031614610a9057604051632f079fab60e11b81523360048201526024016103d6565b60025460ff16610ab357604051634ba56cfd60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e919061161f565b9050610b346001600160a01b0384168383610ea7565b604080516001600160a01b0384811682526020820184905285169133917f08c1fcaf583c2b413bb27833685230422583405ae651b6d53e2053bf75bd074091016108a5565b600054600160a81b900460ff1680610b9b5750600054600160a01b900460ff16155b610bfe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d6565b600054600160a81b900460ff16158015610c28576000805461ffff60a01b191661010160a01b1790555b60025460ff1680610c4357506000546001600160a01b031615155b15610c7057600054604051635a44b77b60e01b81526001600160a01b0390911660048201526024016103d6565b610c7933610cb1565b60028054610100600160a81b0319166101006001600160a01b038516021790558015610cad576000805460ff60a81b191690555b5050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060610d1583836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610ef9565b9392505050565b80471015610d6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103d6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610db9576040519150601f19603f3d011682016040523d82523d6000602084013e610dbe565b606091505b5050905080610e355760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103d6565b505050565b600080546040516331a9108f60e11b81523060048201526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc9190611638565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e35908490610f10565b6060610f088484600085610fe2565b949350505050565b6000610f65826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ef99092919063ffffffff16565b805190915015610e355780806020019051810190610f839190611551565b610e355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d6565b6060824710156110435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d6565b843b6110915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d6565b600080866001600160a01b031685876040516110ad9190611685565b60006040518083038185875af1925050503d80600081146110ea576040519150601f19603f3d011682016040523d82523d6000602084013e6110ef565b606091505b50915091506110ff82828661110a565b979650505050505050565b60608315611119575081610d15565b8251156111295782518084602001fd5b8160405162461bcd60e51b81526004016103d691906116a1565b60006020828403121561115557600080fd5b81356001600160e01b031981168114610d1557600080fd5b6001600160a01b038116811461118257600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111c4576111c4611185565b604052919050565b600082601f8301126111dd57600080fd5b813567ffffffffffffffff8111156111f7576111f7611185565b61120a601f8201601f191660200161119b565b81815284602083860101111561121f57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561125257600080fd5b843561125d8161116d565b9350602085013561126d8161116d565b925060408501359150606085013567ffffffffffffffff81111561129057600080fd5b61129c878288016111cc565b91505092959194509250565b6000806000604084860312156112bd57600080fd5b83356112c88161116d565b9250602084013567ffffffffffffffff808211156112e557600080fd5b818601915086601f8301126112f957600080fd5b81358181111561130857600080fd5b87602082850101111561131a57600080fd5b6020830194508093505050509250925092565b60006020828403121561133f57600080fd5b8135610d158161116d565b60008060006060848603121561135f57600080fd5b833561136a8161116d565b92506020840135915060408401356113818161116d565b809150509250925092565b6000806040838503121561139f57600080fd5b82356113aa8161116d565b915060208301356113ba8161116d565b809150509250929050565b600082601f8301126113d657600080fd5b8135602067ffffffffffffffff8211156113f2576113f2611185565b8160051b61140182820161119b565b928352848101820192828101908785111561141b57600080fd5b83870192505b848310156110ff57823582529183019190830190611421565b600080600080600060a0868803121561145257600080fd5b853561145d8161116d565b9450602086013561146d8161116d565b9350604086013567ffffffffffffffff8082111561148a57600080fd5b61149689838a016113c5565b945060608801359150808211156114ac57600080fd5b6114b889838a016113c5565b935060808801359150808211156114ce57600080fd5b506114db888289016111cc565b9150509295509295909350565b600080600080600060a0868803121561150057600080fd5b853561150b8161116d565b9450602086013561151b8161116d565b93506040860135925060608601359150608086013567ffffffffffffffff81111561154557600080fd5b6114db888289016111cc565b60006020828403121561156357600080fd5b81518015158114610d1557600080fd5b6000808585111561158357600080fd5b8386111561159057600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156115c55780818660040360031b1b83161692505b505092915050565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561163157600080fd5b5051919050565b60006020828403121561164a57600080fd5b8151610d158161116d565b60005b83811015611670578181015183820152602001611658565b8381111561167f576000848401525b50505050565b60008251611697818460208701611655565b9190910192915050565b60208152600082518060208401526116c0816040850160208701611655565b601f01601f1916919091016040019291505056fea164736f6c634300080b000a",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80637b9f76b51161008a5780639456fbcc116100595780639456fbcc14610294578063bc197c81146102b4578063c4d66de8146102e0578063f23a6e611461030057600080fd5b80637b9f76b51461021a5780638da5cb5b1461023a57806392e6b3441461024f57806393e59dc11461026f57600080fd5b80632287e96a116100c65780632287e96a146101935780635b984ff6146101ad578063690d8320146101c25780637b3d9af7146101e257600080fd5b806301ffc9a7146100f8578063150b7a021461012d5780631b8b921d1461017157600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004611143565b61032c565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061015861014836600461123c565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610124565b34801561017d57600080fd5b5061019161018c3660046112a8565b610363565b005b34801561019f57600080fd5b506002546101189060ff1681565b3480156101b957600080fd5b50610191610606565b3480156101ce57600080fd5b506101916101dd36600461132d565b61069e565b3480156101ee57600080fd5b50600054610202906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b34801561022657600080fd5b5061019161023536600461134a565b6107a7565b34801561024657600080fd5b506102026108b2565b34801561025b57600080fd5b5061019161026a36600461134a565b6108c1565b34801561027b57600080fd5b506002546102029061010090046001600160a01b031681565b3480156102a057600080fd5b506101916102af36600461138c565b610a5e565b3480156102c057600080fd5b506101586102cf36600461143a565b63bc197c8160e01b95945050505050565b3480156102ec57600080fd5b506101916102fb36600461132d565b610b79565b34801561030c57600080fd5b5061015861031b3660046114e8565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061035d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60025460ff161561038757604051631001146b60e11b815260040160405180910390fd5b600260015414156103df5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556103ec6108b2565b6001600160a01b0316336001600160a01b03161415801561048257506104106108b2565b604051631727adb360e11b81523360048201523060248201526001600160a01b039190911690632e4f5b6690604401602060405180830381865afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190611551565b155b156104a2576040516395bb88d360e01b81523360048201526024016103d6565b60025461010090046001600160a01b0316631c0554ba846104c7600460008688611573565b6104d09161159d565b6040518363ffffffff1660e01b81526004016104ed9291906115cd565b602060405180830381865afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190611551565b6105655782610541600460008486611573565b61054a9161159d565b60405163148113d760e11b81526004016103d69291906115cd565b6105af82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b03871692915050610cd3565b50826001600160a01b0316336001600160a01b03167f2a21062ee9199c2e205622999eeb7c3da73153674f36a0acd3f74fa6af67bde384846040516105f59291906115f0565b60405180910390a350506001805550565b3361060f6108b2565b6001600160a01b03161461063857604051632f079fab60e11b81523360048201526024016103d6565b60025460ff161561065c57604051631001146b60e11b815260040160405180910390fd5b6002805460ff191660011790556040513381527f791f6d5e6c2e44c825c52599c43037481174b362f3b48772bc1d12b3580375f39060200160405180910390a1565b336106a76108b2565b6001600160a01b0316146106d057604051632f079fab60e11b81523360048201526024016103d6565b60025460ff166106f357604051634ba56cfd60e01b815260040160405180910390fd5b600260015414156107465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103d6565b60026001554761075f6001600160a01b03831682610d1c565b6040518181526001600160a01b0383169033907f6b1f4ce962fec27598edceab6195c77516c3df32025eaf0c38d0d4009ac3bd489060200160405180910390a3505060018055565b336107b06108b2565b6001600160a01b0316146107d957604051632f079fab60e11b81523360048201526024016103d6565b60025460ff166107fc57604051634ba56cfd60e01b815260040160405180910390fd5b604051632142170760e11b81523060048201526001600160a01b038281166024830152604482018490528416906342842e0e90606401600060405180830381600087803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b5050604080516001600160a01b03858116825260208201879052871693503392507fdda3c0642e11f394f73a64f4b8ce1ff25619d2bb8ea8dd593966c499ee7e141b91015b60405180910390a3505050565b60006108bc610e3a565b905090565b336108ca6108b2565b6001600160a01b0316146108f357604051632f079fab60e11b81523360048201526024016103d6565b60025460ff1661091657604051634ba56cfd60e01b815260040160405180910390fd5b604051627eeac760e11b8152306004820152602481018390526000906001600160a01b0385169062fdd58e90604401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061161f565b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a48301529192509085169063f242432a9060c401600060405180830381600087803b1580156109ef57600080fd5b505af1158015610a03573d6000803e3d6000fd5b5050604080516001600160a01b0386811682526020820188905291810185905290871692503391507f37a31f808d48f07f163b599033008687f07840161063bf57da0e27406ebb0d7e9060600160405180910390a350505050565b33610a676108b2565b6001600160a01b031614610a9057604051632f079fab60e11b81523360048201526024016103d6565b60025460ff16610ab357604051634ba56cfd60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e919061161f565b9050610b346001600160a01b0384168383610ea7565b604080516001600160a01b0384811682526020820184905285169133917f08c1fcaf583c2b413bb27833685230422583405ae651b6d53e2053bf75bd074091016108a5565b600054600160a81b900460ff1680610b9b5750600054600160a01b900460ff16155b610bfe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d6565b600054600160a81b900460ff16158015610c28576000805461ffff60a01b191661010160a01b1790555b60025460ff1680610c4357506000546001600160a01b031615155b15610c7057600054604051635a44b77b60e01b81526001600160a01b0390911660048201526024016103d6565b610c7933610cb1565b60028054610100600160a81b0319166101006001600160a01b038516021790558015610cad576000805460ff60a81b191690555b5050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060610d1583836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610ef9565b9392505050565b80471015610d6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103d6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610db9576040519150601f19603f3d011682016040523d82523d6000602084013e610dbe565b606091505b5050905080610e355760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103d6565b505050565b600080546040516331a9108f60e11b81523060048201526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc9190611638565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e35908490610f10565b6060610f088484600085610fe2565b949350505050565b6000610f65826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ef99092919063ffffffff16565b805190915015610e355780806020019051810190610f839190611551565b610e355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d6565b6060824710156110435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d6565b843b6110915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d6565b600080866001600160a01b031685876040516110ad9190611685565b60006040518083038185875af1925050503d80600081146110ea576040519150601f19603f3d011682016040523d82523d6000602084013e6110ef565b606091505b50915091506110ff82828661110a565b979650505050505050565b60608315611119575081610d15565b8251156111295782518084602001fd5b8160405162461bcd60e51b81526004016103d691906116a1565b60006020828403121561115557600080fd5b81356001600160e01b031981168114610d1557600080fd5b6001600160a01b038116811461118257600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111c4576111c4611185565b604052919050565b600082601f8301126111dd57600080fd5b813567ffffffffffffffff8111156111f7576111f7611185565b61120a601f8201601f191660200161119b565b81815284602083860101111561121f57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561125257600080fd5b843561125d8161116d565b9350602085013561126d8161116d565b925060408501359150606085013567ffffffffffffffff81111561129057600080fd5b61129c878288016111cc565b91505092959194509250565b6000806000604084860312156112bd57600080fd5b83356112c88161116d565b9250602084013567ffffffffffffffff808211156112e557600080fd5b818601915086601f8301126112f957600080fd5b81358181111561130857600080fd5b87602082850101111561131a57600080fd5b6020830194508093505050509250925092565b60006020828403121561133f57600080fd5b8135610d158161116d565b60008060006060848603121561135f57600080fd5b833561136a8161116d565b92506020840135915060408401356113818161116d565b809150509250925092565b6000806040838503121561139f57600080fd5b82356113aa8161116d565b915060208301356113ba8161116d565b809150509250929050565b600082601f8301126113d657600080fd5b8135602067ffffffffffffffff8211156113f2576113f2611185565b8160051b61140182820161119b565b928352848101820192828101908785111561141b57600080fd5b83870192505b848310156110ff57823582529183019190830190611421565b600080600080600060a0868803121561145257600080fd5b853561145d8161116d565b9450602086013561146d8161116d565b9350604086013567ffffffffffffffff8082111561148a57600080fd5b61149689838a016113c5565b945060608801359150808211156114ac57600080fd5b6114b889838a016113c5565b935060808801359150808211156114ce57600080fd5b506114db888289016111cc565b9150509295509295909350565b600080600080600060a0868803121561150057600080fd5b853561150b8161116d565b9450602086013561151b8161116d565b93506040860135925060608601359150608086013567ffffffffffffffff81111561154557600080fd5b6114db888289016111cc565b60006020828403121561156357600080fd5b81518015158114610d1557600080fd5b6000808585111561158357600080fd5b8386111561159057600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156115c55780818660040360031b1b83161692505b505092915050565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561163157600080fd5b5051919050565b60006020828403121561164a57600080fd5b8151610d158161116d565b60005b83811015611670578181015183820152602001611658565b8381111561167f576000848401525b50505050565b60008251611697818460208701611655565b9190910192915050565b60208152600082518060208401526116c0816040850160208701611655565b601f01601f1916919091016040019291505056fea164736f6c634300080b000a",
  "devdoc": {
    "author": "Non-Fungible Technologies, Inc. The Asset Vault is a vault for the storage of collateralized assets. Designed for one-time use, like a piggy bank. Once withdrawals are enabled, and the bank is broken, the vault can no longer be used or transferred. It starts in a deposit-only state. Funds cannot be withdrawn at this point. When the owner calls \"enableWithdraw()\", the state is set to a withdrawEnabled state. Withdraws cannot be disabled once enabled. This restriction protects integrations and purchasers of AssetVaults from unexpected withdrawal and frontrunning attacks. For exampple: someone buys an AV assuming it contains token X, but I withdraw token X immediately before the sale concludes.",
    "details": "Asset Vaults support arbitrary external calls by either:     - the current owner of the vault     - someone who the current owner \"delegates\" through the ICallDelegator interface This is to enable airdrop claims by borrowers during loans and other forms of NFT utility. In practice, LoanCore delegates to the borrower during the period of an open loan. Arcade.xyz maintains an allowed and restricted list of calls to balance between utility and security.",
    "errors": {
      "AV_AlreadyInitialized(address)": [
        {
          "params": {
            "ownershipToken": "Caller of initialize function in asset vault contract."
          }
        }
      ],
      "AV_CallDisallowed(address)": [
        {
          "params": {
            "caller": "Msg.sender of the function call."
          }
        }
      ],
      "AV_NonWhitelistedCall(address,bytes4)": [
        {
          "params": {
            "data": "The data to call the contract with.",
            "to": "The contract address to call."
          }
        }
      ],
      "OERC721_CallerNotOwner(address)": [
        {
          "params": {
            "caller": "Msg.sender of the function call."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "call(address,bytes)": {
        "params": {
          "data": "The data to call the contract with.",
          "to": "The contract address to call."
        }
      },
      "constructor": {
        "details": "Initializes values so initialize cannot be called on template."
      },
      "enableWithdraw()": {
        "details": "Any integration should be aware that a withdraw-enabled vault cannot      be transferred (will revert)."
      },
      "initialize(address)": {
        "params": {
          "_whitelist": "The contract maintaing the whitelist of allowed                              arbitrary calls."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "returns": {
          "ownerAddress": "        The owner of the underlying token derived from                              the calling address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawERC1155(address,uint256,address)": {
        "params": {
          "to": "The recipient of the withdrawn funds.",
          "token": "The ERC1155 token to withdraw.",
          "tokenId": "The ID of the token to withdraw."
        }
      },
      "withdrawERC20(address,address)": {
        "params": {
          "to": "The recipient of the withdrawn funds.",
          "token": "The ERC20 token to withdraw."
        }
      },
      "withdrawERC721(address,uint256,address)": {
        "params": {
          "to": "The recipient of the withdrawn token.",
          "token": "The token to withdraw.",
          "tokenId": "The ID of the NFT to withdraw."
        }
      },
      "withdrawETH(address)": {
        "params": {
          "to": "The recipient of the withdrawn funds."
        }
      }
    },
    "stateVariables": {
      "withdrawEnabled": {
        "details": "Note once set to true, it cannot be reverted back to false."
      }
    },
    "title": "AssetVault",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AV_AlreadyInitialized(address)": [
        {
          "notice": "Asset vault already initialized."
        }
      ],
      "AV_CallDisallowed(address)": [
        {
          "notice": "Call disallowed."
        }
      ],
      "AV_NonWhitelistedCall(address,bytes4)": [
        {
          "notice": "Call disallowed."
        }
      ],
      "AV_WithdrawsDisabled()": [
        {
          "notice": "Vault withdraws must be enabled."
        }
      ],
      "AV_WithdrawsEnabled()": [
        {
          "notice": "Vault withdraws enabled."
        }
      ],
      "OERC721_CallerNotOwner(address)": [
        {
          "notice": "Function caller is not the owner."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "call(address,bytes)": {
        "notice": "Call a function on an external contract. Intended for claiming airdrops         and other forms of NFT utility. All allowed calls are whitelist by the         \"whitelist\" contract. The vault must have withdrawals disabled, and the caller         must either be the owner, or the owner must have explicitly         delegated this ability to the caller through ICallDelegator interface."
      },
      "enableWithdraw()": {
        "notice": "Enables withdrawals on the vault. Irreversible. Caller must be the         owner of the underlying ownership NFT."
      },
      "initialize(address)": {
        "notice": "Initializes the contract, used on clone deployments. In practice,         always called by the VaultFactory contract."
      },
      "owner()": {
        "notice": "Specifies the owner of the underlying token ID, derived         from the contract address of the contract implementing."
      },
      "whitelist()": {
        "notice": "Whitelist contract to determine if a given external call is allowed."
      },
      "withdrawERC1155(address,uint256,address)": {
        "notice": "Withdraw entire balance of a given ERC1155 token from the vault.         The vault must be in a \"withdrawEnabled\" state (non-transferrable),         and the caller must be the owner."
      },
      "withdrawERC20(address,address)": {
        "notice": "Withdraw entire balance of a given ERC20 token from the vault.         The vault must be in a \"withdrawEnabled\" state (non-transferrable),         and the caller must be the owner."
      },
      "withdrawERC721(address,uint256,address)": {
        "notice": "Withdraw entire balance of a given ERC20 token from the vault.         The vault must be in a \"withdrawEnabled\" state (non-transferrable),         and the caller must be the owner. The specified token must         exist and be owned by this contract."
      },
      "withdrawETH(address)": {
        "notice": "Withdraw entire balance of ETH from the vault.         The vault must be in a \"withdrawEnabled\" state (non-transferrable),         and the caller must be the owner."
      },
      "withdrawEnabled()": {
        "notice": "True if withdrawals are allowed out of this vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21036,
        "contract": "contracts/vault/AssetVault.sol:AssetVault",
        "label": "ownershipToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5820,
        "contract": "contracts/vault/AssetVault.sol:AssetVault",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5823,
        "contract": "contracts/vault/AssetVault.sol:AssetVault",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5963,
        "contract": "contracts/vault/AssetVault.sol:AssetVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 20510,
        "contract": "contracts/vault/AssetVault.sol:AssetVault",
        "label": "withdrawEnabled",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 20515,
        "contract": "contracts/vault/AssetVault.sol:AssetVault",
        "label": "whitelist",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(ICallWhitelist)18651"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICallWhitelist)18651": {
        "encoding": "inplace",
        "label": "contract ICallWhitelist",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}