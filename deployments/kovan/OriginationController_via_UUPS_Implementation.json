{
  "address": "0xc7cBA2B98C536c8F6AEe610C97F84BB717b77d6E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "FIAC_InterestRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OC_ApprovedOwnLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OC_BatchLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OC_CallerNotParticipant",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "OC_InterestRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "OC_InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum LoanLibrary.LoanState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "OC_InvalidState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "OC_InvalidVerifier",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationSecs",
          "type": "uint256"
        }
      ],
      "name": "OC_LoanDuration",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numInstallments",
          "type": "uint256"
        }
      ],
      "name": "OC_NumberInstallments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "OC_PredicateFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        }
      ],
      "name": "OC_PrincipalTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldCollateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "oldCollateralId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newCollateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralId",
          "type": "uint256"
        }
      ],
      "name": "OC_RolloverCollateralMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newCurrency",
          "type": "address"
        }
      ],
      "name": "OC_RolloverCurrencyMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OC_SelfApprove",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "OC_SignatureIsExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OC_ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "SetAllowedVerifier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSTALLMENT_PERIOD_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LATE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedVerifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "getFullInterestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loanCore",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        }
      ],
      "name": "initializeLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "collateralSig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "permitDeadline",
          "type": "uint256"
        }
      ],
      "name": "initializeLoanWithCollateralPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "collateralSig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "permitDeadline",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.Predicate[]",
          "name": "itemPredicates",
          "type": "tuple[]"
        }
      ],
      "name": "initializeLoanWithCollateralPermitAndItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.Predicate[]",
          "name": "itemPredicates",
          "type": "tuple[]"
        }
      ],
      "name": "initializeLoanWithItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "isAllowedVerifier",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "sighash",
          "type": "bytes32"
        }
      ],
      "name": "isApprovedForContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "isSelfOrApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        },
        {
          "internalType": "enum IOriginationController.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "itemsHash",
          "type": "bytes32"
        }
      ],
      "name": "recoverItemsSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "sighash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        },
        {
          "internalType": "enum IOriginationController.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "recoverTokenSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "sighash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLoanId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        }
      ],
      "name": "rolloverLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newLoanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLoanId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "durationSecs",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "deadline",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "numInstallments",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "interestRate",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payableCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IOriginationController.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "nonce",
          "type": "uint160"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            }
          ],
          "internalType": "struct LoanLibrary.Predicate[]",
          "name": "itemPredicates",
          "type": "tuple[]"
        }
      ],
      "name": "rolloverLoanWithItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newLoanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "isAllowed",
          "type": "bool[]"
        }
      ],
      "name": "setAllowedVerifierBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1007de1f38defac528aff25083bb15df08717b5a20f9578d5f1def6d0d9e16d",
  "receipt": {
    "to": null,
    "from": "0x19F684cE81d774f306224627424dbA41D841cAD8",
    "contractAddress": "0xc7cBA2B98C536c8F6AEe610C97F84BB717b77d6E",
    "transactionIndex": 1,
    "gasUsed": "4076260",
    "logsBloom": "0x
    "blockHash": "0xe303445e3a225213f433b0f104fb4b4aa48e9d215ebb62ed3f3b5e3c858f843a",
    "transactionHash": "0xe1007de1f38defac528aff25083bb15df08717b5a20f9578d5f1def6d0d9e16d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 31951131,
        "transactionHash": "0xe1007de1f38defac528aff25083bb15df08717b5a20f9578d5f1def6d0d9e16d",
        "address": "0xc7cBA2B98C536c8F6AEe610C97F84BB717b77d6E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019f684ce81d774f306224627424dba41d841cad8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe303445e3a225213f433b0f104fb4b4aa48e9d215ebb62ed3f3b5e3c858f843a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 31951131,
        "transactionHash": "0xe1007de1f38defac528aff25083bb15df08717b5a20f9578d5f1def6d0d9e16d",
        "address": "0xc7cBA2B98C536c8F6AEe610C97F84BB717b77d6E",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0xe303445e3a225213f433b0f104fb4b4aa48e9d215ebb62ed3f3b5e3c858f843a"
      }
    ],
    "blockNumber": 31951131,
    "cumulativeGasUsed": "4111630",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8d88f69c17aa23c4805e0fc29994ffd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"FIAC_InterestRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OC_ApprovedOwnLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OC_BatchLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OC_CallerNotParticipant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"OC_InterestRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"OC_InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum LoanLibrary.LoanState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"OC_InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"OC_InvalidVerifier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationSecs\",\"type\":\"uint256\"}],\"name\":\"OC_LoanDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numInstallments\",\"type\":\"uint256\"}],\"name\":\"OC_NumberInstallments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"OC_PredicateFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"OC_PrincipalTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralId\",\"type\":\"uint256\"}],\"name\":\"OC_RolloverCollateralMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"OC_RolloverCurrencyMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OC_SelfApprove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"OC_SignatureIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OC_ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTALLMENT_PERIOD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LATE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedVerifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"getFullInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanCore\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"initializeLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"collateralSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"}],\"name\":\"initializeLoanWithCollateralPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"collateralSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"}],\"name\":\"initializeLoanWithCollateralPermitAndItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"}],\"name\":\"initializeLoanWithItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"isAllowedVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"sighash\",\"type\":\"bytes32\"}],\"name\":\"isApprovedForContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSelfOrApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"internalType\":\"enum IOriginationController.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"itemsHash\",\"type\":\"bytes32\"}],\"name\":\"recoverItemsSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sighash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"internalType\":\"enum IOriginationController.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"recoverTokenSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sighash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"rolloverLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"durationSecs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"numInstallments\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"interestRate\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"}],\"name\":\"rolloverLoanWithItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"setAllowedVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isAllowed\",\"type\":\"bool[]\"}],\"name\":\"setAllowedVerifierBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Non-Fungible Technologies, Inc. The Origination Controller is the entry point for all new loans in the Arcade.xyz lending protocol. This contract should have the exclusive responsibility to create new loans in LoanCore. All permissioning, signature verification, and collateral verification takes place in this contract. To originate a loan, the controller also takes custody of both the collateral and loan principal.\",\"errors\":{\"FIAC_InterestRate(uint256)\":[{\"params\":{\"interestRate\":\"InterestRate with 1e18 multiplier.\"}}],\"OC_ApprovedOwnLoan(address)\":[{\"params\":{\"caller\":\"The caller of the approve function, who was also the signer.\"}}],\"OC_CallerNotParticipant(address)\":[{\"params\":{\"caller\":\"The unapproved function caller.\"}}],\"OC_InterestRate(uint256)\":[{\"params\":{\"interestRate\":\"InterestRate with 1e18 multiplier.\"}}],\"OC_InvalidSignature(address,address)\":[{\"params\":{\"signer\":\"The signer determined from ECDSA.recover.\",\"target\":\"The target party of the signature, which should either be the signer,                                      or someone who has approved the signer.\"}}],\"OC_InvalidState(uint8)\":[{\"params\":{\"state\":\"Current state of a loan according to LoanState enum.\"}}],\"OC_InvalidVerifier(address)\":[{\"params\":{\"verifier\":\"The verifier the caller attempted to use.\"}}],\"OC_LoanDuration(uint256)\":[{\"params\":{\"durationSecs\":\"Total amount of time in seconds.\"}}],\"OC_NumberInstallments(uint256)\":[{\"params\":{\"numInstallments\":\"Number of installment periods in loan.\"}}],\"OC_PredicateFailed(address,bytes,address)\":[{\"params\":{\"data\":\"The verification data (to be parsed by verifier).\",\"vault\":\"The user's vault subject to verification.\",\"verifier\":\"The address of the verifier contract.\"}}],\"OC_PrincipalTooLow(uint256)\":[{\"params\":{\"principal\":\"Principal in ether.\"}}],\"OC_RolloverCollateralMismatch(address,uint256,address,uint256)\":[{\"params\":{\"newCollateralAddress\":\"The token ID of the active loan's collateral.\",\"newCollateralId\":\"The token ID of the new loan's collateral.\",\"oldCollateralAddress\":\"The address of the active loan's collateral.\",\"oldCollateralId\":\"The address of the new loan's collateral.\"}}],\"OC_RolloverCurrencyMismatch(address,address)\":[{\"params\":{\"newCurrency\":\"The currency of the new loan.\",\"oldCurrency\":\"The currency of the active loan.\"}}],\"OC_SelfApprove(address)\":[{\"params\":{\"caller\":\"The caller of the approve function.\"}}],\"OC_SignatureIsExpired(uint256)\":[{\"params\":{\"deadline\":\"Deadline in seconds.\"}}]},\"kind\":\"dev\",\"methods\":{\"approve(address,bool)\":{\"params\":{\"approved\":\"Whether the party should be approved.\",\"signer\":\"The party to set approval for.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getFullInterestAmount(uint256,uint256)\":{\"details\":\"Interest and principal must be entered with 18 units of      precision from the basis point unit (e.g. 1e18 == 0.01%)\",\"params\":{\"interestRate\":\"Interest rate in the loan terms.\",\"principal\":\"Principal amount in the loan terms.\"},\"returns\":{\"_0\":\"interest                  The amount of interest due.\"}},\"initialize(address,address)\":{\"details\":\"For this controller to work, it needs to be granted the ORIGINATOR_ROLE      in loan core after deployment.\",\"params\":{\"_loanCore\":\"The address of the loan core logic of the protocol.\"}},\"initializeLoan((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160)\":{\"details\":\"The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.\",\"params\":{\"borrower\":\"Address of the borrower.\",\"lender\":\"Address of the lender.\",\"loanTerms\":\"The terms agreed by the lender and borrower.\",\"nonce\":\"The signature nonce.\",\"sig\":\"The loan terms signature, with v, r, s fields, and a nonce.\"},\"returns\":{\"loanId\":\"                      The unique ID of the new loan.\"}},\"initializeLoanWithCollateralPermit((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256)\":{\"details\":\"The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.\",\"params\":{\"borrower\":\"Address of the borrower.\",\"collateralSig\":\"The collateral permit signature, with v, r, s fields.\",\"lender\":\"Address of the lender.\",\"loanTerms\":\"The terms agreed by the lender and borrower.\",\"nonce\":\"The signature nonce for the loan terms signature.\",\"permitDeadline\":\"The last timestamp for which the signature is valid.\",\"sig\":\"The loan terms signature, with v, r, s fields.\"},\"returns\":{\"loanId\":\"                      The unique ID of the new loan.\"}},\"initializeLoanWithCollateralPermitAndItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256,(bytes,address)[])\":{\"details\":\"The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.\",\"params\":{\"borrower\":\"Address of the borrower.\",\"collateralSig\":\"The collateral permit signature, with v, r, s fields.\",\"itemPredicates\":\"The predicate rules for the items in the bundle.\",\"lender\":\"Address of the lender.\",\"loanTerms\":\"The terms agreed by the lender and borrower.\",\"nonce\":\"The signature nonce for the loan terms signature.\",\"permitDeadline\":\"The last timestamp for which the signature is valid.\",\"sig\":\"The loan terms signature, with v, r, s fields.\"},\"returns\":{\"loanId\":\"                      The unique ID of the new loan.\"}},\"initializeLoanWithItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])\":{\"details\":\"The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.\",\"params\":{\"borrower\":\"Address of the borrower.\",\"itemPredicates\":\"The predicate rules for the items in the bundle.\",\"lender\":\"Address of the lender.\",\"loanTerms\":\"The terms agreed by the lender and borrower.\",\"nonce\":\"The signature nonce.\",\"sig\":\"The loan terms signature, with v, r, s fields, and a nonce.\"},\"returns\":{\"loanId\":\"                      The unique ID of the new loan.\"}},\"isAllowedVerifier(address)\":{\"params\":{\"verifier\":\"The verifier contract to query.\"},\"returns\":{\"_0\":\"isVerified          Whether the contract is verified.\"}},\"isApproved(address,address)\":{\"params\":{\"owner\":\"The grantor of permission.\",\"signer\":\"The grantee of permission.\"},\"returns\":{\"_0\":\"isApproved                   Whether the grantee has been approved by the grantor.\"}},\"isApprovedForContract(address,(uint8,bytes32,bytes32),bytes32)\":{\"params\":{\"sig\":\"A struct containing the signature data (for checking EIP-1271).\",\"sighash\":\"The hash of the signature payload (used for EIP-1271 check).\",\"target\":\"The grantor of permission - should be a smart contract.\"},\"returns\":{\"_0\":\"isApprovedForContract        Whether the signer is either the grantor themselves, or approved.\"}},\"isSelfOrApproved(address,address)\":{\"params\":{\"signer\":\"The grantee of permission.\",\"target\":\"The grantor of permission.\"},\"returns\":{\"_0\":\"isSelfOrApproved             Whether the signer is either the grantor themselves, or approved.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"recoverItemsSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8,bytes32)\":{\"details\":\"Bundle ID should _not_ be included in this signature, because the loan         can be initiated with any arbitrary bundle - as long as the bundle contains the items.\",\"params\":{\"itemsHash\":\"The required items in the specified bundle.\",\"loanTerms\":\"The terms of the loan.\",\"nonce\":\"The signature nonce.\",\"side\":\"The side of the loan being signed.\",\"sig\":\"The loan terms signature, with v, r, s fields.\"},\"returns\":{\"sighash\":\"                     The hash that was signed.\",\"signer\":\"                      The address of the recovered signer.\"}},\"recoverTokenSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8)\":{\"params\":{\"loanTerms\":\"The terms of the loan.\",\"nonce\":\"The signature nonce.\",\"side\":\"The side of the loan being signed.\",\"sig\":\"The signature, with v, r, s fields.\"},\"returns\":{\"sighash\":\"                     The hash that was signed.\",\"signer\":\"                      The address of the recovered signer.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rolloverLoan(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160)\":{\"params\":{\"lender\":\"Address of the lender.\",\"loanTerms\":\"The terms agreed by the lender and borrower.\",\"nonce\":\"The signature nonce for the loan terms signature.\",\"oldLoanId\":\"The ID of the old loan.\",\"sig\":\"The loan terms signature, with v, r, s fields.\"},\"returns\":{\"newLoanId\":\"                   The unique ID of the new loan.\"}},\"rolloverLoanWithItems(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])\":{\"params\":{\"itemPredicates\":\"The predicate rules for the items in the bundle.\",\"lender\":\"Address of the lender.\",\"loanTerms\":\"The terms agreed by the lender and borrower.\",\"nonce\":\"The signature nonce for the loan terms signature.\",\"oldLoanId\":\"The ID of the old loan.\",\"sig\":\"The loan terms signature, with v, r, s fields.\"},\"returns\":{\"newLoanId\":\"                   The unique ID of the new loan.\"}},\"setAllowedVerifier(address,bool)\":{\"params\":{\"isAllowed\":\"Whether the specified contract should be allowed.\",\"verifier\":\"The specified verifier contract, should implement IArcadeSignatureVerifier.\"}},\"setAllowedVerifierBatch(address[],bool[])\":{\"params\":{\"isAllowed\":\"Whether the specified contracts should be allowed, respectively.\",\"verifiers\":\"The list of specified verifier contracts, should implement IArcadeSignatureVerifier.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"OriginationController\",\"version\":1},\"userdoc\":{\"errors\":{\"FIAC_InterestRate(uint256)\":[{\"notice\":\"Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\"}],\"OC_ApprovedOwnLoan(address)\":[{\"notice\":\"A caller attempted to originate a loan with their own signature.\"}],\"OC_BatchLengthMismatch()\":[{\"notice\":\"Two related parameters for batch operations did not match in length.\"}],\"OC_CallerNotParticipant(address)\":[{\"notice\":\"The function caller was neither borrower or lender, and was not approved by either.\"}],\"OC_InterestRate(uint256)\":[{\"notice\":\"Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\"}],\"OC_InvalidSignature(address,address)\":[{\"notice\":\"The signature could not be recovered to the counterparty or approved party.\"}],\"OC_InvalidState(uint8)\":[{\"notice\":\"Ensure valid loan state for loan lifceycle operations.\"}],\"OC_InvalidVerifier(address)\":[{\"notice\":\"The verifier contract specified in a predicate has not been whitelisted.\"}],\"OC_LoanDuration(uint256)\":[{\"notice\":\"Loan duration must be greater than 1hr and less than 3yrs.\"}],\"OC_NumberInstallments(uint256)\":[{\"notice\":\"Loan terms must have even number of installments and intallment periods must be < 1000000.\"}],\"OC_PredicateFailed(address,bytes,address)\":[{\"notice\":\"One of the predicates for item verification failed.\"}],\"OC_PrincipalTooLow(uint256)\":[{\"notice\":\"Principal must be greater than 9999 Wei.\"}],\"OC_RolloverCollateralMismatch(address,uint256,address,uint256)\":[{\"notice\":\"New currency does not match for a loan rollover request.\"}],\"OC_RolloverCurrencyMismatch(address,address)\":[{\"notice\":\"New currency does not match for a loan rollover request.\"}],\"OC_SelfApprove(address)\":[{\"notice\":\"A caller attempted to approve themselves.\"}],\"OC_SignatureIsExpired(uint256)\":[{\"notice\":\"Signature must not be expired.\"}],\"OC_ZeroAddress()\":[{\"notice\":\"Zero address passed in where not allowed.\"}]},\"kind\":\"user\",\"methods\":{\"allowedVerifiers(address)\":{\"notice\":\"Mapping from address to whether that verifier contract has been whitelisted\"},\"approve(address,bool)\":{\"notice\":\"Approve a third party to sign or initialize loans on a counterparties' behalf.Useful to multisig counterparties (who cannot sign themselves) or third-party integrations.\"},\"getFullInterestAmount(uint256,uint256)\":{\"notice\":\"Calculate the interest due over a full term.\"},\"initialize(address,address)\":{\"notice\":\"Creates a new origination controller contract, also initializing the parent signature verifier.\"},\"initializeLoan((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160)\":{\"notice\":\"Initializes a loan with Loan Core.Works with either wrapped bundles with an ID, or specific ERC721 unwrapped NFTs.         In that case, collateralAddress should be the token contract.\"},\"initializeLoanWithCollateralPermit((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256)\":{\"notice\":\"Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.\"},\"initializeLoanWithCollateralPermitAndItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256,(bytes,address)[])\":{\"notice\":\"Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.Compared to initializeLoanWithCollateralPermit, this verifies the specific items in a bundle.\"},\"initializeLoanWithItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])\":{\"notice\":\"Initializes a loan with Loan Core.Compared to initializeLoan, this verifies the specific items in a bundle.Only works with bundles implementing the IVaultFactory interface.\"},\"isAllowedVerifier(address)\":{\"notice\":\"Return whether the address can be used as a verifier.\"},\"isApproved(address,address)\":{\"notice\":\"Reports whether a party is approved to act on a counterparties' behalf.\"},\"isApprovedForContract(address,(uint8,bytes32,bytes32),bytes32)\":{\"notice\":\"Reports whether the signer matches the target or is approved by the target.\"},\"isSelfOrApproved(address,address)\":{\"notice\":\"Reports whether the signer matches the target or is approved by the target.\"},\"recoverItemsSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8,bytes32)\":{\"notice\":\"Determine the external signer for a signature specifying specific items.\"},\"recoverTokenSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8)\":{\"notice\":\"Determine the external signer for a signature specifying only a collateral address and ID.\"},\"rolloverLoan(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160)\":{\"notice\":\"Rolls over an existing loan via Loan Core, using a signature         for a new loan to create. The lender can be the same lender as         the loan to be rolled over, or a new lender. The net funding between         the old and new loan is calculated, with funds withdrawn from relevant         parties.\"},\"rolloverLoanWithItems(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])\":{\"notice\":\"Rolls over an existing loan via Loan Core, using a signature         for a new loan to create (of items type). The lender can be the same lender as         the loan to be rolled over, or a new lender. The net funding between         the old and new loan is calculated, with funds withdrawn from relevant         parties.\"},\"setAllowedVerifier(address,bool)\":{\"notice\":\"Manage whitelist for contracts that are allowed to act as a predicate verifier.         Prevents counterparties from abusing misleading/obscure verification logic.         The contract owner should take extra care in whitelisting third-party verification contracts:         for instance, an upgradeable third-party verifier controlled by a borrower could be maliciously         upgraded to approve an empty bundle.\"},\"setAllowedVerifierBatch(address[],bool[])\":{\"notice\":\"Batch update for verification whitelist, in case of multiple verifiers         active in production.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OriginationController.sol\":\"OriginationController\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x20ba3c551439998a53313a63959be77ab70f14338a39592c7a6eb36e8bc3d148\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/InstallmentsCalc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IInstallmentsCalc.sol\\\";\\n\\nimport { FIAC_InterestRate } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title OriginationController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for a calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InstallmentsCalc is IInstallmentsCalc {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n    /// @dev The denominator to express the final interest in terms of basis ponits.\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 10_000;\\n    // Interest rate parameter\\n    uint256 public constant INSTALLMENT_PERIOD_MULTIPLIER = 1_000_000;\\n    // 50 / BASIS_POINTS_DENOMINATOR = 0.5%\\n    uint256 public constant LATE_FEE = 50;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                  Principal amount in the loan terms.\\n     * @param interestRate               Interest rate in the loan terms.\\n     *\\n     * @return interest                  The amount of interest due.\\n     */\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) public pure virtual returns (uint256) {\\n        // Interest rate to be greater than or equal to 0.01%\\n        if (interestRate / INTEREST_RATE_DENOMINATOR < 1) revert FIAC_InterestRate(interestRate);\\n\\n        return principal + ((principal * (interestRate / INTEREST_RATE_DENOMINATOR)) / BASIS_POINTS_DENOMINATOR);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the current installment period relative to the loan's startDate,\\n     *         durationSecs, and numInstallments. Using these three paremeters and the blocks current timestamp\\n     *         we are able to determine the current timeframe relative to the total number of installments.\\n     *\\n     * @dev Get current installment using the startDate, duration, and current time.\\n     *      NOTE!!! DurationSecs must be greater than 10 seconds (10%10 = 0).\\n     *              Also verify the _timestampMultiplier value for what is determined on the max and min loan durations.\\n     *\\n     * @param startDate                    The start date of the loan as a timestamp.\\n     * @param durationSecs                 The duration of the loan in seconds.\\n     * @param numInstallments              The total number of installments in the loan terms.\\n     */\\n    function currentInstallmentPeriod(\\n        uint256 startDate,\\n        uint256 durationSecs,\\n        uint256 numInstallments\\n    ) internal view returns (uint256) {\\n        // *** Local State\\n        uint256 _currentTime = block.timestamp;\\n        uint256 _installmentPeriod = 1; // can only be called after the loan has started\\n        uint256 _relativeTimeInLoan = 0; // initial value\\n        uint256 _timestampMultiplier = 1e20; // inital value\\n\\n        // *** Get Timestamp Mulitpier\\n        for (uint256 i = 1e18; i >= 10; i = i / 10) {\\n            if (durationSecs % i != durationSecs) {\\n                if (_timestampMultiplier == 1e20) {\\n                    _timestampMultiplier = (1e18 / i);\\n                }\\n            }\\n        }\\n\\n        // *** Time Per Installment\\n        uint256 _timePerInstallment = durationSecs / numInstallments;\\n\\n        // *** Relative Time In Loan\\n        _relativeTimeInLoan = (_currentTime - startDate) * _timestampMultiplier;\\n\\n        // *** Check to see when _timePerInstallment * i is greater than _relativeTimeInLoan\\n        // Used to determine the current installment period. (j+1 to account for the current period)\\n        uint256 j = 1;\\n        while ((_timePerInstallment * j) * _timestampMultiplier <= _relativeTimeInLoan) {\\n            _installmentPeriod = j + 1;\\n            j++;\\n        }\\n        // *** Return\\n        return (_installmentPeriod);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the compounded fees and minimum balance for all the missed payments\\n     *\\n     * @dev Get minimum installment payment due, and any late fees accrued due to payment being late\\n     *\\n     * @param balance                           Current balance of the loan\\n     * @param _interestRatePerInstallment       Interest rate per installment period\\n     * @param _installmentsMissed               Number of missed installment periods\\n     */\\n    function _getFees(\\n        uint256 balance,\\n        uint256 _interestRatePerInstallment,\\n        uint256 _installmentsMissed\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 minInterestDue = 0; // initial state\\n        uint256 currentBal = balance; // remaining principal\\n        uint256 lateFees = 0; // initial state\\n        // calculate the late fees based on number of installments missed\\n        // late fees compound on any installment periods missed. For consecutive missed payments\\n        // late fees of first installment missed are added to the principal of the next late fees calculation\\n        for (uint256 i = 0; i < _installmentsMissed; i++) {\\n            // interest due per period based on currentBal value\\n            uint256 intDuePerPeriod = (((currentBal * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n                BASIS_POINTS_DENOMINATOR);\\n            // update local state, next interest payment and late fee calculated off updated currentBal variable\\n            minInterestDue += intDuePerPeriod;\\n            lateFees += ((currentBal * LATE_FEE) / BASIS_POINTS_DENOMINATOR);\\n            currentBal += intDuePerPeriod + lateFees;\\n        }\\n\\n        // one additional interest period added to _installmentsMissed for the current payment being made.\\n        // no late fees added to this payment. currentBal compounded.\\n        minInterestDue +=\\n            ((currentBal * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n            BASIS_POINTS_DENOMINATOR;\\n\\n        return (minInterestDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Calulates and returns the minimum interest balance on loan, current late fees,\\n     *         and the current number of payments missed. If called twice in the same installment\\n     *         period, will return all zeros the second call.\\n     *\\n     * @dev Get minimum installment payment due, any late fees accrued, and\\n     *      the number of missed payments since last installment payment.\\n     *\\n     *      1. Calculate relative time values to determine the number of installment periods missed.\\n     *      2. Is the repayment late based on the number of installment periods missed?\\n     *          Y. Calculate minimum balance due with late fees.\\n     *          N. Return only interest rate payment as minimum balance due.\\n     *\\n     * @param balance                           Current balance of the loan\\n     * @param startDate                         Timestamp of the start of the loan duration\\n     * @param durationSecs                      Duration of the loan in seconds\\n     * @param numInstallments                   Total number of installments in the loan\\n     * @param numInstallmentsPaid               Total number of installments paid, not including this current payment\\n     * @param interestRate                      The total interest rate for the loans duration from the loan terms\\n     */\\n    function _calcAmountsDue(\\n        uint256 balance,\\n        uint256 startDate,\\n        uint256 durationSecs,\\n        uint256 numInstallments,\\n        uint256 numInstallmentsPaid,\\n        uint256 interestRate\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // *** Installment Time\\n        uint256 _installmentPeriod = currentInstallmentPeriod(startDate, durationSecs, numInstallments);\\n\\n        // *** Time related to number of installments paid\\n        if (numInstallmentsPaid >= _installmentPeriod) {\\n            // When numInstallmentsPaid is greater than or equal to the _installmentPeriod\\n            // this indicates that the minimum interest and any late fees for this installment period\\n            // have alread been repaid. Any additional amount sent in this installment period goes to principal\\n            return (0, 0, 0);\\n        }\\n\\n        // +1 for current install payment\\n        uint256 _installmentsMissed = _installmentPeriod - (numInstallmentsPaid + 1);\\n\\n        // ** Installment Interest - using mulitpier of 1 million.\\n        // There should not be loan with more than 1 million installment periods. Checked in LoanCore.\\n        uint256 _interestRatePerInstallment = ((interestRate / INTEREST_RATE_DENOMINATOR) *\\n            INSTALLMENT_PERIOD_MULTIPLIER) / numInstallments;\\n\\n        // ** Determine if late fees are added and if so, how much?\\n        // Calulate number of payments missed based on _latePayment, _pastDueDate\\n\\n        // * If payment on time...\\n        if (_installmentsMissed == 0) {\\n            // Minimum balance due calculation. Based on interest per installment period\\n            uint256 minBalDue = ((balance * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n                BASIS_POINTS_DENOMINATOR;\\n\\n            return (minBalDue, 0, 0);\\n        }\\n        // * If payment is late, or past the loan duration...\\n        else {\\n            // get late fees based on number of payments missed and current principal due\\n            (uint256 minInterestDue, uint256 lateFees) = _getFees(\\n                balance,\\n                _interestRatePerInstallment,\\n                _installmentsMissed\\n            );\\n\\n            return (minInterestDue, lateFees, _installmentsMissed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d5ea881981a2ebea770077cfdcce1197ff8cfe329641c94e59f498709838a88\",\"license\":\"MIT\"},\"contracts/OriginationController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nimport \\\"./interfaces/IOriginationController.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/IERC721Permit.sol\\\";\\nimport \\\"./interfaces/IAssetVault.sol\\\";\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/ISignatureVerifier.sol\\\";\\n\\nimport \\\"./InstallmentsCalc.sol\\\";\\nimport \\\"./verifiers/ItemsVerifier.sol\\\";\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\n\\nimport { OC_ZeroAddress, OC_InvalidState, OC_InvalidVerifier, OC_BatchLengthMismatch, OC_PredicateFailed, OC_SelfApprove, OC_ApprovedOwnLoan, OC_InvalidSignature, OC_CallerNotParticipant, OC_PrincipalTooLow, OC_LoanDuration, OC_InterestRate, OC_NumberInstallments, OC_SignatureIsExpired, OC_RolloverCurrencyMismatch, OC_RolloverCollateralMismatch } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title OriginationController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Origination Controller is the entry point for all new loans\\n * in the Arcade.xyz lending protocol. This contract should have the\\n * exclusive responsibility to create new loans in LoanCore. All\\n * permissioning, signature verification, and collateral verification\\n * takes place in this contract. To originate a loan, the controller\\n * also takes custody of both the collateral and loan principal.\\n */\\ncontract OriginationController is\\n    Initializable,\\n    InstallmentsCalc,\\n    Context,\\n    IOriginationController,\\n    EIP712,\\n    ReentrancyGuard,\\n    Ownable,\\n    UUPSUpgradeable,\\n    Proxied\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ==============================================\\n\\n    // =================== Constants =====================\\n\\n    /// @notice EIP712 type hash for bundle-based signatures.\\n    bytes32 private constant _TOKEN_ID_TYPEHASH =\\n        keccak256(\\n            // solhint-disable-next-line max-line-length\\n            \\\"LoanTerms(uint32 durationSecs,uint32 deadline,uint24 numInstallments,uint160 interestRate,uint256 principal,address collateralAddress,uint256 collateralId,address payableCurrency,uint160 nonce,uint8 side)\\\"\\n        );\\n\\n    /// @notice EIP712 type hash for item-based signatures.\\n    bytes32 private constant _ITEMS_TYPEHASH =\\n        keccak256(\\n            // solhint-disable max-line-length\\n            \\\"LoanTermsWithItems(uint32 durationSecs,uint32 deadline,uint24 numInstallments,uint160 interestRate,uint256 principal,address collateralAddress,bytes32 itemsHash,address payableCurrency,uint160 nonce,uint8 side)\\\"\\n        );\\n\\n    // =============== Contract References ===============\\n\\n    address public loanCore;\\n\\n    // ================= Approval State ==================\\n\\n    /// @notice Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _signerApprovals;\\n    /// @notice Mapping from address to whether that verifier contract has been whitelisted\\n    mapping(address => bool) public allowedVerifiers;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @notice Runs the initializer function in an upgradeable contract.\\n     *\\n     *  @dev Add Unsafe-allow comment to notify upgrades plugin to accept the constructor.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer EIP712(\\\"OriginationController\\\", \\\"2\\\") {}\\n\\n    // ========================================== INITIALIZER ===========================================\\n\\n    /**\\n     * @notice Creates a new origination controller contract, also initializing\\n     * the parent signature verifier.\\n     *\\n     * @dev For this controller to work, it needs to be granted the ORIGINATOR_ROLE\\n     *      in loan core after deployment.\\n     *\\n     * @param _loanCore                     The address of the loan core logic of the protocol.\\n     */\\n\\n    function initialize(address owner, address _loanCore) public initializer proxied {\\n        if (_loanCore == address(0)) revert OC_ZeroAddress();\\n\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, owner)\\n        }\\n\\n        loanCore = _loanCore;\\n    }\\n\\n    // ======================================= UPGRADE AUTHORIZATION ========================================\\n\\n    /**\\n     * @notice Authorization function to define who should be allowed to upgrade the contract\\n     *\\n     * @param newImplementation           The address of the upgraded verion of this contract\\n     */\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    // ==================================== ORIGINATION OPERATIONS ======================================\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core.\\n     * @notice Works with either wrapped bundles with an ID, or specific ERC721 unwrapped NFTs.\\n     *         In that case, collateralAddress should be the token contract.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields, and a nonce.\\n     * @param nonce                         The signature nonce.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoan(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) public override returns (uint256 loanId) {\\n        _validateLoanTerms(loanTerms);\\n\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, _msgSender()) ? Side.LEND : Side.BORROW;\\n\\n        (bytes32 sighash, address externalSigner) = recoverTokenSignature(loanTerms, sig, nonce, neededSide);\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        ILoanCore(loanCore).consumeNonce(externalSigner, nonce);\\n        loanId = _initialize(loanTerms, borrower, lender);\\n    }\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core.\\n     * @notice Compared to initializeLoan, this verifies the specific items in a bundle.\\n     * @notice Only works with bundles implementing the IVaultFactory interface.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields, and a nonce.\\n     * @param nonce                         The signature nonce.\\n     * @param itemPredicates                The predicate rules for the items in the bundle.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoanWithItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) public override returns (uint256 loanId) {\\n        _validateLoanTerms(loanTerms);\\n\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, _msgSender()) ? Side.LEND : Side.BORROW;\\n\\n        address vault = IVaultFactory(loanTerms.collateralAddress).instanceAt(loanTerms.collateralId);\\n        (bytes32 sighash, address externalSigner) = recoverItemsSignature(\\n            loanTerms,\\n            sig,\\n            nonce,\\n            neededSide,\\n            keccak256(abi.encode(itemPredicates))\\n        );\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        for (uint256 i = 0; i < itemPredicates.length; i++) {\\n            // Verify items are held in the wrapper\\n            address verifier = itemPredicates[i].verifier;\\n            if (!isAllowedVerifier(verifier)) revert OC_InvalidVerifier(verifier);\\n\\n            if (!IArcadeSignatureVerifier(verifier).verifyPredicates(itemPredicates[i].data, vault)) {\\n                revert OC_PredicateFailed(verifier, itemPredicates[i].data, vault);\\n            }\\n        }\\n\\n        ILoanCore(loanCore).consumeNonce(externalSigner, nonce);\\n        loanId = _initialize(loanTerms, borrower, lender);\\n    }\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     * @param collateralSig                 The collateral permit signature, with v, r, s fields.\\n     * @param permitDeadline                The last timestamp for which the signature is valid.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoanWithCollateralPermit(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline\\n    ) external override returns (uint256 loanId) {\\n        IERC721Permit(loanTerms.collateralAddress).permit(\\n            borrower,\\n            address(this),\\n            loanTerms.collateralId,\\n            permitDeadline,\\n            collateralSig.v,\\n            collateralSig.r,\\n            collateralSig.s\\n        );\\n\\n        loanId = initializeLoan(loanTerms, borrower, lender, sig, nonce);\\n    }\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.\\n     * @notice Compared to initializeLoanWithCollateralPermit, this verifies the specific items in a bundle.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     * @param collateralSig                 The collateral permit signature, with v, r, s fields.\\n     * @param permitDeadline                The last timestamp for which the signature is valid.\\n     * @param itemPredicates                The predicate rules for the items in the bundle.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoanWithCollateralPermitAndItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external override returns (uint256 loanId) {\\n        IERC721Permit(loanTerms.collateralAddress).permit(\\n            borrower,\\n            address(this),\\n            loanTerms.collateralId,\\n            permitDeadline,\\n            collateralSig.v,\\n            collateralSig.r,\\n            collateralSig.s\\n        );\\n\\n        loanId = initializeLoanWithItems(loanTerms, borrower, lender, sig, nonce, itemPredicates);\\n    }\\n\\n    /**\\n     * @notice Rolls over an existing loan via Loan Core, using a signature\\n     *         for a new loan to create. The lender can be the same lender as\\n     *         the loan to be rolled over, or a new lender. The net funding between\\n     *         the old and new loan is calculated, with funds withdrawn from relevant\\n     *         parties.\\n     *\\n     * @param oldLoanId                     The ID of the old loan.\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     *\\n     * @return newLoanId                    The unique ID of the new loan.\\n     */\\n    function rolloverLoan(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) public override returns (uint256 newLoanId) {\\n        _validateLoanTerms(loanTerms);\\n\\n        LoanLibrary.LoanData memory data = ILoanCore(loanCore).getLoan(oldLoanId);\\n        if (data.state != LoanLibrary.LoanState.Active) revert OC_InvalidState(data.state);\\n\\n        address borrower = IERC721(ILoanCore(loanCore).borrowerNote()).ownerOf(oldLoanId);\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, _msgSender()) ? Side.LEND : Side.BORROW;\\n\\n        _validateRollover(data.terms, loanTerms);\\n\\n        (bytes32 sighash, address externalSigner) = recoverTokenSignature(loanTerms, sig, nonce, neededSide);\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        ILoanCore(loanCore).consumeNonce(externalSigner, nonce);\\n\\n        newLoanId = _rollover(oldLoanId, loanTerms, borrower, lender);\\n    }\\n\\n    /**\\n     * @notice Rolls over an existing loan via Loan Core, using a signature\\n     *         for a new loan to create (of items type). The lender can be the same lender as\\n     *         the loan to be rolled over, or a new lender. The net funding between\\n     *         the old and new loan is calculated, with funds withdrawn from relevant\\n     *         parties.\\n     *\\n     * @param oldLoanId                     The ID of the old loan.\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     * @param itemPredicates                The predicate rules for the items in the bundle.\\n     *\\n     * @return newLoanId                    The unique ID of the new loan.\\n     */\\n    function rolloverLoanWithItems(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) public override returns (uint256 newLoanId) {\\n        _validateLoanTerms(loanTerms);\\n\\n        LoanLibrary.LoanData memory data = ILoanCore(loanCore).getLoan(oldLoanId);\\n        _validateRollover(data.terms, loanTerms);\\n\\n        address borrower = IERC721(ILoanCore(loanCore).borrowerNote()).ownerOf(oldLoanId);\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, _msgSender()) ? Side.LEND : Side.BORROW;\\n\\n        address vault = IVaultFactory(loanTerms.collateralAddress).instanceAt(loanTerms.collateralId);\\n        (bytes32 sighash, address externalSigner) = recoverItemsSignature(\\n            loanTerms,\\n            sig,\\n            nonce,\\n            neededSide,\\n            keccak256(abi.encode(itemPredicates))\\n        );\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        for (uint256 i = 0; i < itemPredicates.length; i++) {\\n            // Verify items are held in the wrapper\\n            address verifier = itemPredicates[i].verifier;\\n            if (!isAllowedVerifier(verifier)) revert OC_InvalidVerifier(verifier);\\n\\n            if (!IArcadeSignatureVerifier(verifier).verifyPredicates(itemPredicates[i].data, vault)) {\\n                revert OC_PredicateFailed(verifier, itemPredicates[i].data, vault);\\n            }\\n        }\\n\\n        ILoanCore(loanCore).consumeNonce(externalSigner, nonce);\\n\\n        newLoanId = _rollover(oldLoanId, loanTerms, borrower, lender);\\n    }\\n\\n    // ==================================== PERMISSION MANAGEMENT =======================================\\n\\n    /**\\n     * @notice Approve a third party to sign or initialize loans on a counterparties' behalf.\\n     * @notice Useful to multisig counterparties (who cannot sign themselves) or third-party integrations.\\n     *\\n     * @param signer                        The party to set approval for.\\n     * @param approved                      Whether the party should be approved.\\n     */\\n    function approve(address signer, bool approved) public override {\\n        if (signer == msg.sender) revert OC_SelfApprove(msg.sender);\\n\\n        _signerApprovals[msg.sender][signer] = approved;\\n\\n        emit Approval(msg.sender, signer, approved);\\n    }\\n\\n    /**\\n     * @notice Reports whether a party is approved to act on a counterparties' behalf.\\n     *\\n     * @param owner                         The grantor of permission.\\n     * @param signer                        The grantee of permission.\\n     *\\n     * @return isApproved                   Whether the grantee has been approved by the grantor.\\n     */\\n    function isApproved(address owner, address signer) public view virtual override returns (bool) {\\n        return _signerApprovals[owner][signer];\\n    }\\n\\n    /**\\n     * @notice Reports whether the signer matches the target or is approved by the target.\\n     *\\n     * @param target                        The grantor of permission - should be a smart contract.\\n     * @param sig                           A struct containing the signature data (for checking EIP-1271).\\n     * @param sighash                   The hash of the signature payload (used for EIP-1271 check).\\n     *\\n     * @return isApprovedForContract        Whether the signer is either the grantor themselves, or approved.\\n     */\\n    function isApprovedForContract(\\n        address target,\\n        Signature calldata sig,\\n        bytes32 sighash\\n    ) public view override returns (bool) {\\n        bytes memory signature = new bytes(65);\\n\\n        // Construct byte array directly in assembly for efficiency\\n        uint8 v = sig.v;\\n        bytes32 r = sig.r;\\n        bytes32 s = sig.s;\\n\\n        assembly {\\n            mstore(add(signature, 32), r)\\n            mstore(add(signature, 64), s)\\n            mstore(add(signature, 96), v)\\n        }\\n\\n        // Convert sig struct to bytes\\n        (bool success, bytes memory result) = target.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, sighash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n\\n    /**\\n     * @notice Reports whether the signer matches the target or is approved by the target.\\n     *\\n     * @param target                        The grantor of permission.\\n     * @param signer                        The grantee of permission.\\n     *\\n     * @return isSelfOrApproved             Whether the signer is either the grantor themselves, or approved.\\n     */\\n    function isSelfOrApproved(address target, address signer) public view override returns (bool) {\\n        return target == signer || isApproved(target, signer);\\n    }\\n\\n    // ==================================== SIGNATURE VERIFICATION ======================================\\n\\n    /**\\n     * @notice Determine the external signer for a signature specifying only a collateral address and ID.\\n     *\\n     * @param loanTerms                     The terms of the loan.\\n     * @param sig                           The signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce.\\n     * @param side                          The side of the loan being signed.\\n     *\\n     * @return sighash                      The hash that was signed.\\n     * @return signer                       The address of the recovered signer.\\n     */\\n    function recoverTokenSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side\\n    ) public view override returns (bytes32 sighash, address signer) {\\n        bytes32 loanHash = keccak256(\\n            abi.encode(\\n                _TOKEN_ID_TYPEHASH,\\n                loanTerms.durationSecs,\\n                loanTerms.deadline,\\n                loanTerms.numInstallments,\\n                loanTerms.interestRate,\\n                loanTerms.principal,\\n                loanTerms.collateralAddress,\\n                loanTerms.collateralId,\\n                loanTerms.payableCurrency,\\n                nonce,\\n                uint8(side)\\n            )\\n        );\\n\\n        sighash = _hashTypedDataV4(loanHash);\\n        signer = ECDSA.recover(sighash, sig.v, sig.r, sig.s);\\n    }\\n\\n    /**\\n     * @notice Determine the external signer for a signature specifying specific items.\\n     * @dev    Bundle ID should _not_ be included in this signature, because the loan\\n     *         can be initiated with any arbitrary bundle - as long as the bundle contains the items.\\n     *\\n     * @param loanTerms                     The terms of the loan.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce.\\n     * @param side                          The side of the loan being signed.\\n     * @param itemsHash                     The required items in the specified bundle.\\n     *\\n     * @return sighash                      The hash that was signed.\\n     * @return signer                       The address of the recovered signer.\\n     */\\n    function recoverItemsSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side,\\n        bytes32 itemsHash\\n    ) public view override returns (bytes32 sighash, address signer) {\\n        bytes32 loanHash = keccak256(\\n            abi.encode(\\n                _ITEMS_TYPEHASH,\\n                loanTerms.durationSecs,\\n                loanTerms.deadline,\\n                loanTerms.numInstallments,\\n                loanTerms.interestRate,\\n                loanTerms.principal,\\n                loanTerms.collateralAddress,\\n                itemsHash,\\n                loanTerms.payableCurrency,\\n                nonce,\\n                uint8(side)\\n            )\\n        );\\n\\n        sighash = _hashTypedDataV4(loanHash);\\n        signer = ECDSA.recover(sighash, sig.v, sig.r, sig.s);\\n    }\\n\\n    // ==================================== VERIFICATION WHITELIST ======================================\\n\\n    /**\\n     * @notice Manage whitelist for contracts that are allowed to act as a predicate verifier.\\n     *         Prevents counterparties from abusing misleading/obscure verification logic.\\n     *         The contract owner should take extra care in whitelisting third-party verification contracts:\\n     *         for instance, an upgradeable third-party verifier controlled by a borrower could be maliciously\\n     *         upgraded to approve an empty bundle.\\n     *\\n     * @param verifier              The specified verifier contract, should implement IArcadeSignatureVerifier.\\n     * @param isAllowed             Whether the specified contract should be allowed.\\n     */\\n    function setAllowedVerifier(address verifier, bool isAllowed) public override onlyOwner {\\n        if (verifier == address(0)) revert OC_ZeroAddress();\\n\\n        allowedVerifiers[verifier] = isAllowed;\\n\\n        emit SetAllowedVerifier(verifier, isAllowed);\\n    }\\n\\n    /**\\n     * @notice Batch update for verification whitelist, in case of multiple verifiers\\n     *         active in production.\\n     *\\n     * @param verifiers             The list of specified verifier contracts, should implement IArcadeSignatureVerifier.\\n     * @param isAllowed             Whether the specified contracts should be allowed, respectively.\\n     */\\n    function setAllowedVerifierBatch(address[] calldata verifiers, bool[] calldata isAllowed) external override {\\n        if (verifiers.length != isAllowed.length) revert OC_BatchLengthMismatch();\\n\\n        for (uint256 i = 0; i < verifiers.length; i++) {\\n            setAllowedVerifier(verifiers[i], isAllowed[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return whether the address can be used as a verifier.\\n     *\\n     * @param verifier             The verifier contract to query.\\n     *\\n     * @return isVerified          Whether the contract is verified.\\n     */\\n    function isAllowedVerifier(address verifier) public view override returns (bool) {\\n        return allowedVerifiers[verifier];\\n    }\\n\\n    // =========================================== HELPERS ==============================================\\n\\n    /**\\n     * @dev Validates argument bounds for the loan terms.\\n     *\\n     * @param terms                     The terms of the loan.\\n     */\\n    function _validateLoanTerms(LoanLibrary.LoanTerms memory terms) internal view {\\n        // principal must be greater than or equal to 10000 wei\\n        if (terms.principal < 10_000) revert OC_PrincipalTooLow(terms.principal);\\n\\n        // loan duration must be greater than 1 hr and less than 3 years\\n        if (terms.durationSecs < 3600 || terms.durationSecs > 94_608_000) revert OC_LoanDuration(terms.durationSecs);\\n\\n        // interest rate must be greater than or equal to 0.01%\\n        // and less than 10,000% (1e8 basis points)\\n        if (terms.interestRate < 1e18 || terms.interestRate > 1e24) revert OC_InterestRate(terms.interestRate);\\n\\n        // number of installments must be between 2 and 1000.\\n        if (terms.numInstallments == 1 || terms.numInstallments > 1_000)\\n            revert OC_NumberInstallments(terms.numInstallments);\\n\\n        // signature must not have already expired\\n        if (terms.deadline < block.timestamp) revert OC_SignatureIsExpired(terms.deadline);\\n    }\\n\\n    /**\\n     * @dev Validate the rules for rolling over a loan - must be using the same\\n     *      currency and collateral.\\n     *\\n     * @param oldTerms              The terms of the old loan, fetched from LoanCore.\\n     * @param newTerms              The terms of the new loan, provided by the caller.\\n     */\\n    function _validateRollover(LoanLibrary.LoanTerms memory oldTerms, LoanLibrary.LoanTerms memory newTerms)\\n        internal\\n        pure\\n    {\\n        if (newTerms.payableCurrency != oldTerms.payableCurrency)\\n            revert OC_RolloverCurrencyMismatch(oldTerms.payableCurrency, newTerms.payableCurrency);\\n\\n        if (newTerms.collateralAddress != oldTerms.collateralAddress || newTerms.collateralId != oldTerms.collateralId)\\n            revert OC_RolloverCollateralMismatch(\\n                oldTerms.collateralAddress,\\n                oldTerms.collateralId,\\n                newTerms.collateralAddress,\\n                newTerms.collateralId\\n            );\\n    }\\n\\n    /**\\n     * @dev Ensure that one counterparty has signed the loan terms, and the other\\n     *      has initiated the transaction.\\n     *\\n     * @param borrower                  The specified borrower for the loan.\\n     * @param lender                    The specified lender for the loan.\\n     * @param caller                    The address initiating the transaction.\\n     * @param signer                    The address recovered from the loan terms signature.\\n     * @param sig                       A struct containing the signature data (for checking EIP-1271).\\n     * @param sighash                   The hash of the signature payload (used for EIP-1271 check).\\n     * @param neededSide                The side of the loan the signature will take (lend or borrow).\\n     */\\n    function _validateCounterparties(\\n        address borrower,\\n        address lender,\\n        address caller,\\n        address signer,\\n        Signature calldata sig,\\n        bytes32 sighash,\\n        Side neededSide\\n    ) internal view {\\n        if (caller == signer) revert OC_ApprovedOwnLoan(caller);\\n\\n        address shouldBeSigner = neededSide == Side.LEND ? lender : borrower;\\n        address shouldBeCaller = shouldBeSigner == lender ? borrower : lender;\\n\\n        if (!isSelfOrApproved(shouldBeCaller, caller) && !isApprovedForContract(shouldBeCaller, sig, sighash)) {\\n            revert OC_CallerNotParticipant(msg.sender);\\n        }\\n\\n        if (!isSelfOrApproved(shouldBeSigner, signer) && !isApprovedForContract(shouldBeSigner, sig, sighash)) {\\n            revert OC_InvalidSignature(shouldBeSigner, signer);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform loan initialization. Take custody of both principal and\\n     *      collateral, and tell LoanCore to create and start a loan.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function _initialize(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender\\n    ) internal nonReentrant returns (uint256 loanId) {\\n        // Take custody of funds\\n        IERC20(loanTerms.payableCurrency).safeTransferFrom(lender, address(this), loanTerms.principal);\\n        IERC20(loanTerms.payableCurrency).approve(loanCore, loanTerms.principal);\\n\\n        IERC721(loanTerms.collateralAddress).transferFrom(borrower, address(this), loanTerms.collateralId);\\n        IERC721(loanTerms.collateralAddress).approve(loanCore, loanTerms.collateralId);\\n\\n        // Start loan\\n        loanId = ILoanCore(loanCore).startLoan(lender, borrower, loanTerms);\\n    }\\n\\n    /**\\n     * @dev Perform loan rollover. Take custody of both principal and\\n     *      collateral, and tell LoanCore to roll over the existing loan.\\n     *\\n     * @param oldLoanId                     The ID of the loan to be rolled over.\\n     * @param newTerms                      The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function _rollover(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata newTerms,\\n        address borrower,\\n        address lender\\n    ) internal nonReentrant returns (uint256 loanId) {\\n        LoanLibrary.LoanData memory oldLoanData = ILoanCore(loanCore).getLoan(oldLoanId);\\n        LoanLibrary.LoanTerms memory oldTerms = oldLoanData.terms;\\n\\n        address oldLender = ILoanCore(loanCore).lenderNote().ownerOf(oldLoanId);\\n        IERC20 payableCurrency = IERC20(oldTerms.payableCurrency);\\n        uint256 rolloverFee = ILoanCore(loanCore).feeController().getRolloverFee();\\n\\n        // Settle amounts\\n        RolloverAmounts memory amounts = _calculateRolloverAmounts(\\n            oldLoanData,\\n            newTerms,\\n            lender,\\n            oldLender,\\n            rolloverFee\\n        );\\n\\n        // Collect funds\\n        uint256 settledAmount;\\n        if (lender != oldLender) {\\n            // Take new principal from lender\\n            // OriginationController should have collected\\n            payableCurrency.safeTransferFrom(lender, address(this), newTerms.principal);\\n            settledAmount += newTerms.principal;\\n        }\\n\\n        if (amounts.needFromBorrower > 0) {\\n            // Borrower must pay difference\\n            // OriginationController should have collected\\n            payableCurrency.safeTransferFrom(borrower, address(this), amounts.needFromBorrower);\\n            settledAmount += amounts.needFromBorrower;\\n        } else if (amounts.leftoverPrincipal > 0 && lender == oldLender) {\\n            // Lender must pay difference\\n            // OriginationController should have collected\\n            // Make sure to collect fee\\n            payableCurrency.safeTransferFrom(lender, address(this), amounts.leftoverPrincipal);\\n            settledAmount += amounts.leftoverPrincipal;\\n        }\\n\\n        {\\n            payableCurrency.approve(loanCore, settledAmount);\\n\\n            loanId = ILoanCore(loanCore).rollover(\\n                oldLoanId,\\n                borrower,\\n                lender,\\n                newTerms,\\n                settledAmount,\\n                amounts.amountToOldLender,\\n                amounts.amountToLender,\\n                amounts.amountToBorrower\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the net amounts needed for the rollover from each party - the\\n     *      borrower, the new lender, and the old lender (can be same as new lender).\\n     *      Determine the amount to either pay or withdraw from the borrower, and\\n     *      any payments to be sent to the old lender.\\n     *\\n     * @param oldLoanData           The LoanData struct for the old loan.\\n     * @param newTerms              The terms struct for the new loan.\\n     * @param lender                The lender for the new loan.\\n     * @param oldLender             The lender for the existing loan.\\n     * @param rolloverFee           The protocol fee for rollovers.\\n     *\\n     * @return amounts              The net amounts owed to each party.\\n     */\\n    function _calculateRolloverAmounts(\\n        LoanLibrary.LoanData memory oldLoanData,\\n        LoanLibrary.LoanTerms calldata newTerms,\\n        address lender,\\n        address oldLender,\\n        uint256 rolloverFee\\n    ) internal view returns (RolloverAmounts memory amounts) {\\n        LoanLibrary.LoanTerms memory oldTerms = oldLoanData.terms;\\n\\n        uint256 repayAmount;\\n        if (oldTerms.numInstallments == 0) {\\n            repayAmount = getFullInterestAmount(oldTerms.principal, oldTerms.interestRate);\\n        } else {\\n            (uint256 interestDue, uint256 lateFees, ) = _calcAmountsDue(\\n                oldLoanData.balance,\\n                oldLoanData.startDate,\\n                oldTerms.durationSecs,\\n                oldTerms.numInstallments,\\n                oldLoanData.numInstallmentsPaid,\\n                oldTerms.interestRate\\n            );\\n\\n            repayAmount = oldLoanData.balance + interestDue + lateFees;\\n        }\\n\\n        amounts.fee = (newTerms.principal * rolloverFee) / BASIS_POINTS_DENOMINATOR;\\n        uint256 borrowerWillGet = newTerms.principal - amounts.fee;\\n\\n        // Settle amounts\\n        if (repayAmount > borrowerWillGet) {\\n            amounts.needFromBorrower = repayAmount - borrowerWillGet;\\n        } else {\\n            amounts.leftoverPrincipal = newTerms.principal - repayAmount;\\n            amounts.amountToBorrower = amounts.leftoverPrincipal - amounts.fee;\\n        }\\n\\n        // Collect funds\\n        if (lender != oldLender) {\\n            amounts.amountToOldLender = repayAmount;\\n            amounts.amountToLender = 0;\\n        } else {\\n            amounts.amountToOldLender = 0;\\n\\n            if (amounts.needFromBorrower > 0 && repayAmount > newTerms.principal) {\\n                amounts.amountToLender = repayAmount - newTerms.principal;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x279d95639c8b7c4bfbf60ef254867be99c44d655eaa114a9b5fbb1a2df9dd339\",\"license\":\"MIT\"},\"contracts/errors/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror OC_ZeroAddress();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice Loan terms must have even number of installments and intallment periods must be < 1000000.\\n *\\n * @param numInstallments               Number of installment periods in loan.\\n */\\nerror OC_NumberInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param verifier                      The address of the verifier contract.\\n * @param data                          The verification data (to be parsed by verifier).\\n * @param vault                         The user's vault subject to verification.\\n */\\nerror OC_PredicateFailed(address verifier, bytes data, address vault);\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount1155(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring an invalid token ID.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId1155(address asset, int256 tokenId);\\n\\n/**\\n * @notice Provided ERC20 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount20(address asset, uint256 amount);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Repayment has already been completed for this loan without installments.\\n */\\nerror RC_NoPaymentDue();\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address caller);\\n\\n/**\\n * @notice Loan has not started yet.\\n *\\n * @param startDate                 block timestamp of the startDate of loan stored in LoanData.\\n */\\nerror RC_BeforeStartDate(uint256 startDate);\\n\\n/**\\n * @notice Loan terms do not have any installments, use repay for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_NoInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice Loan terms have installments, use repaypart or repayPartMinimum for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_HasInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice No interest payment or late fees due.\\n *\\n * @param amount                    Minimum interest plus late fee amount returned\\n *                                  from minimum payment calculation.\\n */\\nerror RC_NoMinPaymentDue(uint256 amount);\\n\\n/**\\n * @notice Repaid amount must be larger than zero.\\n */\\nerror RC_RepayPartZero();\\n\\n/**\\n * @notice Amount paramater less than the minimum amount due.\\n *\\n * @param amount                    Amount function call parameter.\\n * @param minAmount                 The minimum amount due.\\n */\\nerror RC_RepayPartLTMin(uint256 amount, uint256 minAmount);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror LC_ZeroAddress();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice Collateral is not in use for an attempted rollover.\\n */\\nerror LC_CollateralNotInUse();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param returnAmount                  Total amount due for entire loan repayment.\\n */\\nerror LC_BalanceGTZero(uint256 returnAmount);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Installment loan has not defaulted.\\n */\\nerror LC_LoanNotDefaulted();\\n\\n// ================================== Full Insterest Amount Calc ====================================\\n/// @notice All errors prefixed with FIAC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror FIAC_InterestRate(uint256 interestRate);\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deployer is allowed to initialize roles. Caller is not deployer.\\n */\\nerror PN_CannotInitialize();\\n\\n/**\\n * @notice Roles have been initialized.\\n */\\nerror PN_AlreadyInitialized();\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice No token transfers while contract is in paused state.\\n */\\nerror PN_ContractPaused();\\n\",\"keccak256\":\"0xd5eb071223bd51339354cc8548e4c9bf139e468bd50609cb1c2b3ad32d7243b0\",\"license\":\"MIT\"},\"contracts/interfaces/IAssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./ICallWhitelist.sol\\\";\\n\\ninterface IAssetVault {\\n    // ============= Events ==============\\n\\n    event WithdrawEnabled(address operator);\\n    event WithdrawERC20(address indexed operator, address indexed token, address recipient, uint256 amount);\\n    event WithdrawERC721(address indexed operator, address indexed token, address recipient, uint256 tokenId);\\n\\n    event WithdrawERC1155(\\n        address indexed operator,\\n        address indexed token,\\n        address recipient,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event WithdrawETH(address indexed operator, address indexed recipient, uint256 amount);\\n    event Call(address indexed operator, address indexed to, bytes data);\\n\\n    // ================= Initializer ==================\\n\\n    function initialize(address _whitelist) external;\\n\\n    // ================ View Functions ================\\n\\n    function withdrawEnabled() external view returns (bool);\\n\\n    function whitelist() external view returns (ICallWhitelist);\\n\\n    // ================ Withdrawal Operations ================\\n\\n    function enableWithdraw() external;\\n\\n    function withdrawERC20(address token, address to) external;\\n\\n    function withdrawERC721(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external;\\n\\n    function withdrawERC1155(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external;\\n\\n    function withdrawETH(address to) external;\\n\\n    // ================ Utility Operations ================\\n\\n    function call(address to, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0xd35960d7a0da37033e2797fba894f77a7096d3dd911f66bf7027a3ef67a7076a\",\"license\":\"MIT\"},\"contracts/interfaces/ICallWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface ICallWhitelist {\\n    // ============= Events ==============\\n\\n    event CallAdded(address operator, address callee, bytes4 selector);\\n    event CallRemoved(address operator, address callee, bytes4 selector);\\n\\n    // ================ View Functions ================\\n\\n    function isWhitelisted(address callee, bytes4 selector) external view returns (bool);\\n\\n    function isBlacklisted(bytes4 selector) external view returns (bool);\\n\\n    // ================ Update Operations ================\\n\\n    function add(address callee, bytes4 selector) external;\\n\\n    function remove(address callee, bytes4 selector) external;\\n}\\n\",\"keccak256\":\"0x732d4e4a0cfcec8325fd68867a457f000ef33ec32ace13c8791d6ac60997bcf0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    // ================ Permit Functionality ================\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ================ View Functions ================\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfc9739185bc9a2f85ef6e5e3c2b3e255b9f79a862e2610133ff7da84391492f3\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IFeeController {\\n    // ================ Events =================\\n\\n    event UpdateOriginationFee(uint256 _newFee);\\n    event UpdateRolloverFee(uint256 _newFee);\\n\\n    // ================ Fee Setters =================\\n\\n    function setOriginationFee(uint256 _originationFee) external;\\n\\n    function setRolloverFee(uint256 _rolloverFee) external;\\n\\n    // ================ Fee Getters =================\\n\\n    function getOriginationFee() external view returns (uint256);\\n\\n    function getRolloverFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x14a7c697be149c54757817c95864f05fc5c28faaab31bda39d4f815e654f36f2\",\"license\":\"MIT\"},\"contracts/interfaces/IInstallmentsCalc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IInstallmentsCalc {\\n    // ================ View Functions ================\\n\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x05b5eccc9e8b76a8aab5b5a32ea9cc17d33ee1748fa6843e796d3065ff42a921\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\nimport \\\"./IPromissoryNote.sol\\\";\\nimport \\\"./IFeeController.sol\\\";\\nimport \\\"./ILoanCore.sol\\\";\\n\\ninterface ILoanCore {\\n    // ================ Events =================\\n\\n    event LoanCreated(LoanLibrary.LoanTerms terms, uint256 loanId);\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event InstallmentPaymentReceived(uint256 loanId, uint256 repaidAmount, uint256 remBalance);\\n    event LoanClaimed(uint256 loanId);\\n    event FeesClaimed(address token, address to, uint256 amount);\\n    event SetFeeController(address feeController);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms\\n    ) external returns (uint256 loanId);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function repayPart(\\n        uint256 _loanId,\\n        uint256 _currentMissedPayments,\\n        uint256 _paymentToPrincipal,\\n        uint256 _paymentToInterest,\\n        uint256 _paymentToLateFees\\n    ) external;\\n\\n    function claim(uint256 loanId, uint256 currentInstallmentPeriod) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external returns (IPromissoryNote);\\n\\n    function lenderNote() external returns (IPromissoryNote);\\n\\n    function feeController() external returns (IFeeController);\\n}\\n\",\"keccak256\":\"0x46bc473cf9fcf8ca3ddf9f92f3f0f42917d321ff5b1f94b6ebde24721a932cec\",\"license\":\"MIT\"},\"contracts/interfaces/IOriginationController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\ninterface IOriginationController {\\n    // ================ Data Types =============\\n\\n    enum Side {\\n        BORROW,\\n        LEND\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct RolloverAmounts {\\n        uint256 needFromBorrower;\\n        uint256 leftoverPrincipal;\\n        uint256 amountToOldLender;\\n        uint256 amountToLender;\\n        uint256 amountToBorrower;\\n        uint256 fee;\\n    }\\n\\n    // ================ Events =================\\n\\n    event Approval(address indexed owner, address indexed signer, bool isApproved);\\n    event SetAllowedVerifier(address indexed verifier, bool isAllowed);\\n\\n    // ============== Origination Operations ==============\\n\\n    function initializeLoan(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithCollateralPermit(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithCollateralPermitAndItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 loanId);\\n\\n    function rolloverLoan(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) external returns (uint256 newLoanId);\\n\\n    function rolloverLoanWithItems(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 newLoanId);\\n\\n    // ================ Permission Management =================\\n\\n    function approve(address signer, bool approved) external;\\n\\n    function isApproved(address owner, address signer) external returns (bool);\\n\\n    function isSelfOrApproved(address target, address signer) external returns (bool);\\n\\n    function isApprovedForContract(\\n        address target,\\n        Signature calldata sig,\\n        bytes32 sighash\\n    ) external returns (bool);\\n\\n    // ============== Signature Verification ==============\\n\\n    function recoverTokenSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side\\n    ) external view returns (bytes32 sighash, address signer);\\n\\n    function recoverItemsSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side,\\n        bytes32 itemsHash\\n    ) external view returns (bytes32 sighash, address signer);\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAllowedVerifier(address verifier, bool isAllowed) external;\\n\\n    function setAllowedVerifierBatch(address[] calldata verifiers, bool[] calldata isAllowed) external;\\n\\n    function isAllowedVerifier(address verifier) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdf037cae96df61d46ac31048c0e18bf4cd6bee6db166d0f55ebc2c292de46474\",\"license\":\"MIT\"},\"contracts/interfaces/IPromissoryNote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPromissoryNote is IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setPaused(bool paused) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\",\"keccak256\":\"0xdd7786e272e67ac1732d6a45c5662e9f8f28824e4d6f8e365ecc9c76f9d4822c\",\"license\":\"MIT\"},\"contracts/interfaces/ISignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\ninterface IArcadeSignatureVerifier {\\n    // ============== Collateral Verification ==============\\n\\n    function verifyPredicates(bytes calldata predicates, address vault) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x574cf3529ed9063dc8473afac62706a47013dee900c0146e8d7820d8001c6e54\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IVaultFactory {\\n    // ============= Events ==============\\n\\n    event VaultCreated(address vault, address to);\\n\\n    // ================ View Functions ================\\n\\n    function isInstance(address instance) external view returns (bool validity);\\n\\n    function instanceCount() external view returns (uint256);\\n\\n    function instanceAt(uint256 tokenId) external view returns (address);\\n\\n    function instanceAtIndex(uint256 index) external view returns (address);\\n\\n    // ================ Factory Operations ================\\n\\n    function initializeBundle(address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x19fe9672e1b8527434a1c3ecc96dbf15da3ece6dea4189bda944ebcd2eddf148\",\"license\":\"MIT\"},\"contracts/libraries/LoanLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        /// @dev Must be an AssetVault for LoanTermsWithItems\\n        address collateralAddress;\\n        // An encoded list of predicates\\n        bytes items;\\n        // The payable currency for the loan principal and interest\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract\\n        bytes data;\\n        // The verifier contract\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan\\n        LoanState state;\\n        // Number of installment payments made on the loan\\n        uint24 numInstallmentsPaid;\\n        // installment loan specific\\n        // Start date of the loan, using block.timestamp - for determining installment period\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan\\n        LoanTerms terms;\\n        // Remaining balance of the loan. Starts as equal to principal. Can reduce based on\\n        // payments made, can increased based on compounded interest from missed payments and late fees\\n        uint256 balance;\\n        // Amount paid in total by the borrower\\n        uint256 balancePaid;\\n        // Total amount of late fees accrued\\n        uint256 lateFeesAccrued;\\n    }\\n}\\n\",\"keccak256\":\"0x9e0237c41db40fb4ffc5f58cd16e91a71bb02ad4481b487404262e6d9ce7ba33\",\"license\":\"MIT\"},\"contracts/verifiers/ItemsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../interfaces/IVaultFactory.sol\\\";\\nimport \\\"../interfaces/IAssetVault.sol\\\";\\nimport \\\"../interfaces/ISignatureVerifier.sol\\\";\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\nimport { IV_ItemMissingAddress, IV_InvalidCollateralType, IV_NonPositiveAmount1155, IV_InvalidTokenId1155, IV_NonPositiveAmount20 } from \\\"../errors/Lending.sol\\\";\\n\\n/**\\n * @title ArcadeItemsVerifier\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This contract can be used for verifying complex signature-encoded\\n * bundle descriptions. This resolves on a new array of SignatureItems[],\\n * which outside of verification, is passed around as bytes memory.\\n *\\n * Each SignatureItem has four fields:\\n *      - cType (collateral Type)\\n *      - asset (contract address of the asset)\\n *      - tokenId (token ID of the asset, if applicable)\\n *      - amount (amount of the asset, if applicable)\\n *\\n * - For token ids part of ERC721, other features beyond direct tokenIds are supported:\\n *      - A provided token id of -1 is a wildcard, meaning any token ID is accepted.\\n *      - Wildcard token ids are not supported for ERC1155.\\n * - All amounts are taken as minimums. For instance, if the \\\"amount\\\" field of an ERC1155 is 5,\\n *      then a bundle with 8 of those ERC1155s are accepted.\\n * - For an ERC20 cType, tokenId is ignored. For an ERC721 cType, amount is ignored.\\n *\\n * - Any deviation from the above rules represents an unparseable signature and will always\\n *      return invalid.\\n *\\n * - All multi-item signatures assume AND - any optional expressed by OR\\n *      can be implemented by simply signing multiple separate signatures.\\n */\\ncontract ArcadeItemsVerifier is IArcadeSignatureVerifier {\\n    using SafeCast for int256;\\n\\n    /// @dev Enum describing the collateral type of a signature item\\n    enum CollateralType {\\n        ERC_721,\\n        ERC_1155,\\n        ERC_20\\n    }\\n\\n    /// @dev Enum describing each item that should be validated\\n    struct SignatureItem {\\n        // The type of collateral - which interface does it implement\\n        CollateralType cType;\\n        // The address of the collateral contract\\n        address asset;\\n        // The token ID of the collateral (only applicable to 721 and 1155)\\n        // int256 because a negative value serves as wildcard\\n        int256 tokenId;\\n        // The minimum amount of collateral (only applicable for 20 and 1155)\\n        uint256 amount;\\n    }\\n\\n    // ==================================== COLLATERAL VERIFICATION =====================================\\n\\n    /**\\n     * @notice Verify that the items specified by the packed SignatureItem array are held by the vault.\\n     * @dev    Reverts on a malformed SignatureItem, returns false on missing contents.\\n     *\\n     * @param predicates                    The SignatureItem[] array of items, packed in bytes.\\n     * @param vault                         The vault that should own the specified items.\\n     *\\n     * @return verified                     Whether the bundle contains the specified items.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function verifyPredicates(bytes calldata predicates, address vault) external view override returns (bool) {\\n        // Unpack items\\n        SignatureItem[] memory items = abi.decode(predicates, (SignatureItem[]));\\n\\n        for (uint256 i = 0; i < items.length; i++) {\\n            SignatureItem memory item = items[i];\\n\\n            // No asset provided\\n            if (item.asset == address(0)) revert IV_ItemMissingAddress();\\n\\n            if (item.cType == CollateralType.ERC_721) {\\n                IERC721 asset = IERC721(item.asset);\\n                int256 id = item.tokenId;\\n\\n                // Wildcard, but vault has no assets\\n                if (id < 0 && asset.balanceOf(vault) == 0) return false;\\n                // Does not own specifically specified asset\\n                else if (id >= 0 && asset.ownerOf(id.toUint256()) != vault) return false;\\n            } else if (item.cType == CollateralType.ERC_1155) {\\n                IERC1155 asset = IERC1155(item.asset);\\n\\n                int256 id = item.tokenId;\\n                uint256 amt = item.amount;\\n\\n                // Cannot require 0 amount\\n                if (amt == 0) revert IV_NonPositiveAmount1155(item.asset, amt);\\n\\n                // Wildcard not allowed for 1155\\n                if (id < 0) revert IV_InvalidTokenId1155(item.asset, id);\\n\\n                // Does not own specifically specified asset\\n                if (asset.balanceOf(vault, id.toUint256()) < amt) return false;\\n            } else if (item.cType == CollateralType.ERC_20) {\\n                IERC20 asset = IERC20(item.asset);\\n\\n                uint256 amt = item.amount;\\n\\n                // Cannot require 0 amount\\n                if (amt == 0) revert IV_NonPositiveAmount20(item.asset, amt);\\n\\n                // Does not own specifically specified asset\\n                if (asset.balanceOf(vault) < amt) return false;\\n            } else {\\n                // Interface could not be parsed - fail\\n                revert IV_InvalidCollateralType(item.asset, uint256(item.cType));\\n            }\\n        }\\n\\n        // Loop completed - all items found\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xad287832e6ad7fca230debb2c66991f8998e2332ff499995260a2456ec7636ad\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405230610140523480156200001757600080fd5b50604080518082018252601581527f4f726967696e6174696f6e436f6e74726f6c6c657200000000000000000000006020808301918252835180850190945260018452601960f91b908401528151902060e08190527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a56101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200010b8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c05261012052505060018055506200012a9050336200019f565b6000620001386001620001f1565b9050801562000151576000805461ff0019166101001790555b801562000198576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000312565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156200028a578160ff1660011480156200022a575062000228306200030360201b62001c371760201c565b155b620002825760405162461bcd60e51b815260206004820152602e602482015260008051602062004add83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620002e95760405162461bcd60e51b815260206004820152602e602482015260008051602062004add83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000279565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b60805160a05160c05160e05161010051610120516101405161475462000389600039600081816109420152818161098b01528181610d2201528181610d620152610df501526000612b8901526000612bd801526000612bb301526000612b0c01526000612b3601526000612b6001526147546000f3fe6080604052600436106101c25760003560e01c806371f5d1c8116100f75780639c5e8e6b11610095578063cd43f63811610064578063cd43f63814610556578063cfa498a314610576578063f2fde38b1461058c578063f61ade83146105ac57600080fd5b80639c5e8e6b146104bc578063a389783e146104dc578063be74bce414610525578063cc3266e81461053a57600080fd5b80637e148502116100d15780637e148502146104375780638171ba27146104675780638da5cb5b1461047e57806399c994781461049c57600080fd5b806371f5d1c8146103d757806373bc4d1a146103f75780637a60f58d1461041757600080fd5b80633d140d211161016457806352d1902d1161013e57806352d1902d146103545780635bc1e507146103695780635cf0685f14610389578063715018a6146103c257600080fd5b80633d140d2114610301578063485cc955146103215780634f1ef2861461034157600080fd5b80632e71b535116101a05780632e71b53514610254578063304fedda146102745780633659cfe6146102a457806336d00bb6146102c457600080fd5b806304b86147146101c75780632434c20c146101e95780632692f36d1461021c575b600080fd5b3480156101d357600080fd5b506101e76101e23660046136f5565b6105cc565b005b3480156101f557600080fd5b506102096102043660046137ac565b610661565b6040519081526020015b60405180910390f35b34801561022857600080fd5b5060035461023c906001600160a01b031681565b6040516001600160a01b039091168152602001610213565b34801561026057600080fd5b5061020961026f366004613820565b610737565b34801561028057600080fd5b5061029461028f3660046138af565b6107e3565b6040519015158152602001610213565b3480156102b057600080fd5b506101e76102bf3660046138ee565b610937565b3480156102d057600080fd5b506102e46102df36600461391a565b610a20565b604080519283526001600160a01b03909116602083015201610213565b34801561030d57600080fd5b506101e761031c366004613984565b610b2b565b34801561032d57600080fd5b506101e761033c3660046139bd565b610bc3565b6101e761034f366004613a5b565b610d17565b34801561036057600080fd5b50610209610de8565b34801561037557600080fd5b50610209610384366004613b03565b610e9b565b34801561039557600080fd5b506102946103a43660046138ee565b6001600160a01b031660009081526005602052604090205460ff1690565b3480156103ce57600080fd5b506101e7610f4b565b3480156103e357600080fd5b506102096103f2366004613bc7565b610f81565b34801561040357600080fd5b506101e7610412366004613984565b6111f9565b34801561042357600080fd5b506102e4610432366004613bf1565b6112a9565b34801561044357600080fd5b506102946104523660046138ee565b60056020526000908152604090205460ff1681565b34801561047357600080fd5b50610209620f424081565b34801561048a57600080fd5b506002546001600160a01b031661023c565b3480156104a857600080fd5b506102096104b7366004613c56565b6113b4565b3480156104c857600080fd5b506102096104d7366004613c78565b61141f565b3480156104e857600080fd5b506102946104f73660046139bd565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b34801561053157600080fd5b50610209603281565b34801561054657600080fd5b50610209670de0b6b3a764000081565b34801561056257600080fd5b506102946105713660046139bd565b61172e565b34801561058257600080fd5b5061020961271081565b34801561059857600080fd5b506101e76105a73660046138ee565b611779565b3480156105b857600080fd5b506102096105c7366004613d1d565b611811565b8281146105ec57604051634400101160e01b815260040160405180910390fd5b60005b8381101561065a5761064885858381811061060c5761060c613d4a565b905060200201602081019061062191906138ee565b84848481811061063357610633613d4a565b90506020020160208101906104129190613d60565b8061065281613d93565b9150506105ef565b5050505050565b600061067a61067536889003880188613de7565b611c46565b6000610686863361172e565b610691576000610694565b60015b90506000806106a589878786610a20565b915091506106b8888833848a8789611db3565b60035460405163d3582ac760e01b81526001600160a01b03838116600483015287811660248301529091169063d3582ac790604401600060405180830381600087803b15801561070757600080fd5b505af115801561071b573d6000803e3d6000fd5b5050505061072a898989611ed5565b9998505050505050505050565b600061074960c0890160a08a016138ee565b6001600160a01b031663d505accf883060c08c01358661076c60208a018a613ea3565b89602001358a604001356040518863ffffffff1660e01b81526004016107989796959493929190613ec6565b600060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050506107d78888888888610661565b98975050505050505050565b6040805160418082526080820190925260009182919060208201818036833701905050905060006108176020860186613ea3565b9050600085602001359050600086604001359050816020850152806040850152826060850152600080896001600160a01b0316631626ba7e60e01b8988604051602401610865929190613f5f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516108a39190613f78565b600060405180830381855afa9150503d80600081146108de576040519150601f19603f3d011682016040523d82523d6000602084013e6108e3565b606091505b50915091508180156108f6575080516020145b801561092757508051630b135d3f60e11b9061091b9083016020908101908401613f94565b6001600160e01b031916145b96505050505050505b9392505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109895760405162461bcd60e51b815260040161098090613fbe565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d2600080516020614701833981519152546001600160a01b031690565b6001600160a01b0316146109f85760405162461bcd60e51b81526004016109809061400a565b610a018161215f565b60408051600080825260208201909252610a1d91839190612189565b50565b600080807fd22db81e53f545765b2652496a2f89c945c17690c8927d96e3d22588c319e75a610a526020890189614056565b610a6260408a0160208b01614056565b610a7260608b0160408c01614073565b610a8260808c0160608d016138ee565b60808c0135610a9760c08e0160a08f016138ee565b8d60c001358e60e0016020810190610aaf91906138ee565b8d8d6001811115610ac257610ac2614090565b604051602001610adc9b9a999897969594939291906140a6565b604051602081830303815290604052805190602001209050610afd816122f4565b9250610b1f83610b106020890189613ea3565b88602001358960400135612348565b91505094509492505050565b6001600160a01b038216331415610b575760405163204973fd60e21b8152336004820152602401610980565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f1d3e246ebbc933bf65d3290db9f93d67ab91a12d2b19308a35806e04d1c174c5910160405180910390a35050565b6000610bcf6001612372565b90508015610be7576000805461ff0019166101001790555b6000610c117fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610c50576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c65565b336001600160a01b03821614610c6557600080fd5b6001600160a01b038316610c8c57604051633c7efd1960e21b815260040160405180910390fd5b507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103839055600380546001600160a01b0319166001600160a01b0384161790558015610d12576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d605760405162461bcd60e51b815260040161098090613fbe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610da9600080516020614701833981519152546001600160a01b031690565b6001600160a01b031614610dcf5760405162461bcd60e51b81526004016109809061400a565b610dd88261215f565b610de482826001612189565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e885760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610980565b5060008051602061470183398151915290565b6000610ead60c08b0160a08c016138ee565b6001600160a01b031663d505accf8a3060c08e013588610ed060208c018c613ea3565b8b602001358c604001356040518863ffffffff1660e01b8152600401610efc9796959493929190613ec6565b600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b50505050610f3d8a8a8a8a8a888861141f565b9a9950505050505050505050565b6002546001600160a01b03163314610f755760405162461bcd60e51b815260040161098090614112565b610f7f60006123ff565b565b6000610f9561067536879003870187613de7565b600354604051632820036560e11b8152600481018890526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190614227565b905060018151600381111561101b5761101b614090565b1461103c57805160405163539312af60e11b815261098091906004016142af565b6003546040805163bf848f8160e01b815290516000926001600160a01b03169163bf848f81916004808301926020929190829003018187875af1158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab91906142d7565b6001600160a01b0316636352211e896040518263ffffffff1660e01b81526004016110d891815260200190565b602060405180830381865afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111991906142d7565b90506000611127823361172e565b611132576000611135565b60015b90506111558360600151898036038101906111509190613de7565b612451565b6000806111648a898986610a20565b91509150611177848a33848c8789611db3565b60035460405163d3582ac760e01b81526001600160a01b03838116600483015289811660248301529091169063d3582ac790604401600060405180830381600087803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b505050506111ea8b8b868c61252b565b9b9a5050505050505050505050565b6002546001600160a01b031633146112235760405162461bcd60e51b815260040161098090614112565b6001600160a01b03821661124a57604051633c7efd1960e21b815260040160405180910390fd5b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527f2444ef3f0b0b01a9fcfb3aec13a46d8ae0bfd2d4856166dd9928cc02304d1cac910160405180910390a25050565b600080807fdedafdcf0443db1836c819c3eef46fe5b223c771efc259eedc48cdd4cd35c6c46112db60208a018a614056565b6112eb60408b0160208c01614056565b6112fb60608c0160408d01614073565b61130b60808d0160608e016138ee565b8c608001358d60a001602081019061132391906138ee565b8a8f60e001602081019061133791906138ee565b8e8e600181111561134a5761134a614090565b6040516020016113649b9a999897969594939291906140a6565b604051602081830303815290604052805190602001209050611385816122f4565b92506113a78361139860208a018a613ea3565b89602001358a60400135612348565b9150509550959350505050565b600060016113ca670de0b6b3a76400008461430a565b10156113ec57604051637759d63560e01b815260048101839052602401610980565b612710611401670de0b6b3a76400008461430a565b61140b908561431e565b611415919061430a565b610930908461433d565b6000611433610675368a90038a018a613de7565b600061143f883361172e565b61144a57600061144d565b60015b9050600061146160c08b0160a08c016138ee565b6040516308ec149f60e11b815260c08c013560048201526001600160a01b0391909116906311d8293e90602401602060405180830381865afa1580156114ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cf91906142d7565b90506000806115098c8a8a878b8b6040516020016114ee92919061437e565b604051602081830303815290604052805190602001206112a9565b9150915061151c8b8b33848d878a611db3565b60005b868110156116ab57600088888381811061153b5761153b613d4a565b905060200281019061154d9190614457565b61155e9060408101906020016138ee565b9050611582816001600160a01b031660009081526005602052604090205460ff1690565b6115aa57604051636348af6d60e01b81526001600160a01b0382166004820152602401610980565b806001600160a01b03166393197b308a8a858181106115cb576115cb613d4a565b90506020028101906115dd9190614457565b6115e7908061446d565b886040518463ffffffff1660e01b8152600401611606939291906144b4565b602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164791906144e0565b611698578089898481811061165e5761165e613d4a565b90506020028101906116709190614457565b61167a908061446d565b87604051631b8f61f360e01b815260040161098094939291906144fd565b50806116a381613d93565b91505061151f565b5060035460405163d3582ac760e01b81526001600160a01b0383811660048301528a811660248301529091169063d3582ac790604401600060405180830381600087803b1580156116fb57600080fd5b505af115801561170f573d6000803e3d6000fd5b5050505061171e8c8c8c611ed5565b9c9b505050505050505050505050565b6000816001600160a01b0316836001600160a01b0316148061093057506001600160a01b0380841660009081526004602090815260408083209386168352929052205460ff16610930565b6002546001600160a01b031633146117a35760405162461bcd60e51b815260040161098090614112565b6001600160a01b0381166118085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610980565b610a1d816123ff565b600061182561067536899003890189613de7565b600354604051632820036560e11b8152600481018a90526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015611870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118949190614227565b90506118af8160600151898036038101906111509190613de7565b6003546040805163bf848f8160e01b815290516000926001600160a01b03169163bf848f81916004808301926020929190829003018187875af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e91906142d7565b6001600160a01b0316636352211e8b6040518263ffffffff1660e01b815260040161194b91815260200190565b602060405180830381865afa158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906142d7565b9050600061199a823361172e565b6119a55760006119a8565b60015b905060006119bc60c08c0160a08d016138ee565b6040516308ec149f60e11b815260c08d013560048201526001600160a01b0391909116906311d8293e90602401602060405180830381865afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a91906142d7565b9050600080611a498d8c8c878d8d6040516020016114ee92919061437e565b91509150611a5c858d33848f878a611db3565b60005b88811015611bb15760008a8a83818110611a7b57611a7b613d4a565b9050602002810190611a8d9190614457565b611a9e9060408101906020016138ee565b9050611ac2816001600160a01b031660009081526005602052604090205460ff1690565b611aea57604051636348af6d60e01b81526001600160a01b0382166004820152602401610980565b806001600160a01b03166393197b308c8c85818110611b0b57611b0b613d4a565b9050602002810190611b1d9190614457565b611b27908061446d565b886040518463ffffffff1660e01b8152600401611b46939291906144b4565b602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8791906144e0565b611b9e57808b8b8481811061165e5761165e613d4a565b5080611ba981613d93565b915050611a5f565b5060035460405163d3582ac760e01b81526001600160a01b0383811660048301528c811660248301529091169063d3582ac790604401600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050611c258e8e878f61252b565b9e9d5050505050505050505050505050565b6001600160a01b03163b151590565b61271081608001511015611c7557806080015160405163af08162560e01b815260040161098091815260200190565b610e10816000015163ffffffff161080611c9c57506305a39a80816000015163ffffffff16115b15611cc55780516040516328e1657560e21b815263ffffffff9091166004820152602401610980565b670de0b6b3a764000081606001516001600160a01b03161080611cfe575069d3c21bcecceda100000081606001516001600160a01b0316115b15611d2d57606081015160405163781bfedd60e11b81526001600160a01b039091166004820152602401610980565b806040015162ffffff1660011480611d4f57506103e8816040015162ffffff16115b15611d7a5760408082015190516376323b1b60e11b815262ffffff9091166004820152602401610980565b42816020015163ffffffff161015610a1d576020810151604051630bac0ecf60e11b815263ffffffff9091166004820152602401610980565b836001600160a01b0316856001600160a01b03161415611df157604051637b9ad10560e01b81526001600160a01b0386166004820152602401610980565b60006001826001811115611e0757611e07614090565b14611e125787611e14565b865b90506000876001600160a01b0316826001600160a01b031614611e375787611e39565b885b9050611e45818861172e565b158015611e5a5750611e588186866107e3565b155b15611e7a576040516371f839d960e01b8152336004820152602401610980565b611e84828761172e565b158015611e995750611e978286866107e3565b155b15611eca5760405163f770ff4d60e01b81526001600160a01b03808416600483015287166024820152604401610980565b505050505050505050565b600060026001541415611f2a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610980565b6002600155611f5b82306080870135611f4a610100890160e08a016138ee565b6001600160a01b03169291906129de565b611f6c610100850160e086016138ee565b60035460405163095ea7b360e01b81526001600160a01b0391821660048201526080870135602482015291169063095ea7b3906044016020604051808303816000875af1158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906144e0565b50611ff660c0850160a086016138ee565b6040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260c0870135604483015291909116906323b872dd90606401600060405180830381600087803b15801561204b57600080fd5b505af115801561205f573d6000803e3d6000fd5b506120749250505060c0850160a086016138ee565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260c0870135602482015291169063095ea7b390604401600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b50506003546040516333ff1bc760e11b81526001600160a01b0390911692506367fe378e9150612110908590879089906004016145e0565b6020604051808303816000875af115801561212f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121539190614606565b60018055949350505050565b6002546001600160a01b03163314610a1d5760405162461bcd60e51b815260040161098090614112565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121bc57610d1283612a3e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612216575060408051601f3d908101601f1916820190925261221391810190614606565b60015b6122795760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610980565b60008051602061470183398151915281146122e85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610980565b50610d12838383612ada565b6000612342612301612aff565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061235987878787612c26565b9150915061236681612d13565b5090505b949350505050565b60008054610100900460ff16156123b9578160ff1660011480156123955750303b155b6123b15760405162461bcd60e51b81526004016109809061461f565b506000919050565b60005460ff8084169116106123e05760405162461bcd60e51b81526004016109809061461f565b506000805460ff191660ff92909216919091179055600190565b919050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8160e001516001600160a01b03168160e001516001600160a01b0316146124a85760e08083015190820151604051631356231560e31b81526001600160a01b03928316600482015291166024820152604401610980565b8160a001516001600160a01b03168160a001516001600160a01b03161415806124d957508160c001518160c0015114155b15610de45760a08083015160c08085015192840151908401516040516323a7cf5360e11b81526001600160a01b0393841660048201526024810194909452911660448301526064820152608401610980565b6000600260015414156125805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610980565b6002600155600354604051632820036560e11b8152600481018790526000916001600160a01b03169063504006ca906024016101c060405180830381865afa1580156125d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f49190614227565b90506000816060015190506000600360009054906101000a90046001600160a01b03166001600160a01b031663ff7aab806040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267a91906142d7565b6001600160a01b0316636352211e896040518263ffffffff1660e01b81526004016126a791815260200190565b602060405180830381865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e891906142d7565b905060008260e0015190506000600360009054906101000a90046001600160a01b03166001600160a01b0316636999b3776040518163ffffffff1660e01b81526004016020604051808303816000875af115801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e91906142d7565b6001600160a01b0316632283487d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cf9190614606565b905060006127e0868b8a8786612ece565b90506000846001600160a01b0316896001600160a01b031614612827576128166001600160a01b0385168a3060808f01356129de565b61282460808c01358261433d565b90505b81511561285b578151612848906001600160a01b038616908c9030906129de565b8151612854908261433d565b90506128b4565b600082602001511180156128805750846001600160a01b0316896001600160a01b0316145b156128b45760208201516128a2906001600160a01b038616908b9030906129de565b60208201516128b1908261433d565b90505b60035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529085169063095ea7b3906044016020604051808303816000875af1158015612907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292b91906144e0565b50600360009054906101000a90046001600160a01b03166001600160a01b031663ba7624858d8c8c8f86886040015189606001518a608001516040518963ffffffff1660e01b815260040161298798979695949392919061466d565b6020604051808303816000875af11580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca9190614606565b600180559c9b505050505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612a38908590613091565b50505050565b6001600160a01b0381163b612aab5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610980565b60008051602061470183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612ae383613163565b600082511180612af05750805b15610d1257612a3883836131a3565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612b5857507f000000000000000000000000000000000000000000000000000000000000000046145b15612b8257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c5d5750600090506003612d0a565b8460ff16601b14158015612c7557508460ff16601c14155b15612c865750600090506004612d0a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612cda573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612d0357600060019250925050612d0a565b9150600090505b94509492505050565b6000816004811115612d2757612d27614090565b1415612d305750565b6001816004811115612d4457612d44614090565b1415612d925760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610980565b6002816004811115612da657612da6614090565b1415612df45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610980565b6003816004811115612e0857612e08614090565b1415612e615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610980565b6004816004811115612e7557612e75614090565b1415610a1d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610980565b612f076040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6060860151604081015160009062ffffff16612f3f57612f38826080015183606001516001600160a01b03166113b4565b9050612faf565b600080612f8a8a608001518b604001516001600160a01b0316866000015163ffffffff16876040015162ffffff168e6020015162ffffff1689606001516001600160a01b03166131c8565b509150915080828b60800151612fa0919061433d565b612faa919061433d565b925050505b612710612fc08560808a013561431e565b612fca919061430a565b60a08401819052600090612fe29060808a01356146c2565b905080821115612ffd57612ff681836146c2565b8452613026565b61300b8260808a01356146c2565b6020850181905260a0850151613020916146c2565b60808501525b856001600160a01b0316876001600160a01b031614613052576040840182905260006060850152613085565b6000604085015283511580159061306c5750876080013582115b156130855761307f6080890135836146c2565b60608501525b50505095945050505050565b60006130e6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132a89092919063ffffffff16565b805190915015610d12578080602001905181019061310491906144e0565b610d125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610980565b61316c81612a3e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109308383604051806060016040528060278152602001614721602791396132b7565b6000806000806131d9898989613394565b90508086106131f35760008060009350935093505061329c565b600061320087600161433d565b61320a90836146c2565b9050600088620f4240613225670de0b6b3a76400008a61430a565b61322f919061431e565b613239919061430a565b90508161327c576000612710620f4240838f613255919061431e565b61325f919061430a565b613269919061430a565b96506000955085945061329c9350505050565b60008061328a8e848661346f565b909850965092945061329c9350505050565b96509650969350505050565b606061236a848460008561353f565b60606001600160a01b0384163b61331f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610980565b600080856001600160a01b03168560405161333a9190613f78565b600060405180830381855af49150503d8060008114613375576040519150601f19603f3d011682016040523d82523d6000602084013e61337a565b606091505b509150915061338a828286613670565b9695505050505050565b60004260018268056bc75e2d63100000670de0b6b3a76400005b600a81106133fe57876133c182826146d9565b146133ec578168056bc75e2d6310000014156133ec576133e981670de0b6b3a764000061430a565b91505b6133f7600a8261430a565b90506133ae565b50600061340b878961430a565b9050816134188a876146c2565b613422919061431e565b925060015b8383613433838561431e565b61343d919061431e565b116134615761344d81600161433d565b94508061345981613d93565b915050613427565b509298975050505050505050565b600080808581805b86811015613502576000612710620f42406134928b8761431e565b61349c919061430a565b6134a6919061430a565b90506134b2818661433d565b94506127106134c260328661431e565b6134cc919061430a565b6134d6908461433d565b92506134e2838261433d565b6134ec908561433d565b93505080806134fa90613d93565b915050613477565b50612710620f4240613514898561431e565b61351e919061430a565b613528919061430a565b613532908461433d565b9890975095505050505050565b6060824710156135a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610980565b6001600160a01b0385163b6135f75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610980565b600080866001600160a01b031685876040516136139190613f78565b60006040518083038185875af1925050503d8060008114613650576040519150601f19603f3d011682016040523d82523d6000602084013e613655565b606091505b5091509150613665828286613670565b979650505050505050565b6060831561367f575081610930565b82511561368f5782518084602001fd5b8160405162461bcd60e51b815260040161098091906146ed565b60008083601f8401126136bb57600080fd5b50813567ffffffffffffffff8111156136d357600080fd5b6020830191508360208260051b85010111156136ee57600080fd5b9250929050565b6000806000806040858703121561370b57600080fd5b843567ffffffffffffffff8082111561372357600080fd5b61372f888389016136a9565b9096509450602087013591508082111561374857600080fd5b50613755878288016136a9565b95989497509550505050565b6000610100828403121561377457600080fd5b50919050565b6001600160a01b0381168114610a1d57600080fd5b80356123fa8161377a565b60006060828403121561377457600080fd5b60008060008060006101c086880312156137c557600080fd5b6137cf8787613761565b94506101008601356137e08161377a565b93506101208601356137f18161377a565b925061380187610140880161379a565b91506101a08601356138128161377a565b809150509295509295909350565b6000806000806000806000610240888a03121561383c57600080fd5b6138468989613761565b96506101008801356138578161377a565b95506101208801356138688161377a565b9450613878896101408a0161379a565b93506101a08801356138898161377a565b9250613899896101c08a0161379a565b9150610220880135905092959891949750929550565b600080600060a084860312156138c457600080fd5b83356138cf8161377a565b92506138de856020860161379a565b9150608084013590509250925092565b60006020828403121561390057600080fd5b81356109308161377a565b8035600281106123fa57600080fd5b6000806000806101a0858703121561393157600080fd5b61393b8686613761565b935061394b86610100870161379a565b925061016085013561395c8161377a565b915061396b610180860161390b565b905092959194509250565b8015158114610a1d57600080fd5b6000806040838503121561399757600080fd5b82356139a28161377a565b915060208301356139b281613976565b809150509250929050565b600080604083850312156139d057600080fd5b82356139db8161377a565b915060208301356139b28161377a565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613a2457613a246139eb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a5357613a536139eb565b604052919050565b60008060408385031215613a6e57600080fd5b8235613a798161377a565b915060208381013567ffffffffffffffff80821115613a9757600080fd5b818601915086601f830112613aab57600080fd5b813581811115613abd57613abd6139eb565b613acf601f8201601f19168501613a2a565b91508082528784828501011115613ae557600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060008060008060008060006102608a8c031215613b2257600080fd5b613b2c8b8b613761565b98506101008a0135613b3d8161377a565b97506101208a0135613b4e8161377a565b9650613b5e8b6101408c0161379a565b95506101a08a0135613b6f8161377a565b9450613b7f8b6101c08c0161379a565b93506102208a013592506102408a013567ffffffffffffffff811115613ba457600080fd5b613bb08c828d016136a9565b915080935050809150509295985092959850929598565b60008060008060006101c08688031215613be057600080fd5b853594506137e08760208801613761565b60008060008060006101c08688031215613c0a57600080fd5b613c148787613761565b9450613c2487610100880161379a565b9350610160860135613c358161377a565b9250613c44610180870161390b565b949793965091946101a0013592915050565b60008060408385031215613c6957600080fd5b50508035926020909101359150565b60008060008060008060006101e0888a031215613c9457600080fd5b613c9e8989613761565b9650610100880135613caf8161377a565b9550610120880135613cc08161377a565b9450613cd0896101408a0161379a565b93506101a0880135613ce18161377a565b92506101c088013567ffffffffffffffff811115613cfe57600080fd5b613d0a8a828b016136a9565b989b979a50959850939692959293505050565b60008060008060008060006101e0888a031215613d3957600080fd5b87359650613caf8960208a01613761565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d7257600080fd5b813561093081613976565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613da757613da7613d7d565b5060010190565b63ffffffff81168114610a1d57600080fd5b80356123fa81613dae565b62ffffff81168114610a1d57600080fd5b80356123fa81613dcb565b6000610100808385031215613dfb57600080fd5b6040519081019067ffffffffffffffff82118183101715613e1e57613e1e6139eb565b8160405283359150613e2f82613dae565b818152613e3e60208501613dc0565b6020820152613e4f60408501613ddc565b6040820152613e606060850161378f565b606082015260808401356080820152613e7b60a0850161378f565b60a082015260c084013560c0820152613e9660e0850161378f565b60e0820152949350505050565b600060208284031215613eb557600080fd5b813560ff8116811461093057600080fd5b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b83811015613f22578181015183820152602001613f0a565b83811115612a385750506000910152565b60008151808452613f4b816020860160208601613f07565b601f01601f19169290920160200192915050565b82815260406020820152600061236a6040830184613f33565b60008251613f8a818460208701613f07565b9190910192915050565b600060208284031215613fa657600080fd5b81516001600160e01b03198116811461093057600080fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561406857600080fd5b813561093081613dae565b60006020828403121561408557600080fd5b813561093081613dcb565b634e487b7160e01b600052602160045260246000fd5b9a8b5263ffffffff998a1660208c01529790981660408a015262ffffff9590951660608901526001600160a01b03938416608089015260a0880192909252821660c087015260e086015290811661010085015290911661012083015260ff166101408201526101600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b80516123fa81613dcb565b80516123fa8161377a565b80516123fa81613dae565b600061010080838503121561417c57600080fd5b6040519081019067ffffffffffffffff8211818310171561419f5761419f6139eb565b81604052809250835191506141b382613dae565b8181526141c26020850161415d565b60208201526141d360408501614147565b60408201526141e460608501614152565b6060820152608084015160808201526141ff60a08501614152565b60a082015260c084015160c082015261421a60e08501614152565b60e0820152505092915050565b60006101c0828403121561423a57600080fd5b614242613a01565b82516004811061425157600080fd5b815261425f60208401614147565b602082015261427060408401614152565b60408201526142828460608501614168565b6060820152610160830151608082015261018083015160a08201526101a09092015160c083015250919050565b60208101600483106142d157634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156142e957600080fd5b81516109308161377a565b634e487b7160e01b600052601260045260246000fd5b600082614319576143196142f4565b500490565b600081600019048311821515161561433857614338613d7d565b500290565b6000821982111561435057614350613d7d565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040808401600586901b8501820187855b8881101561444957878303603f190184528135368b9003603e190181126143c357600080fd5b8a01803536829003601e190181126143da57600080fd5b8101803567ffffffffffffffff8111156143f357600080fd5b80360383131561440257600080fd5b878652614414888701828b8501614355565b9150508782013591506144268261377a565b6001600160a01b039190911693870193909352928501929085019060010161439d565b509098975050505050505050565b60008235603e19833603018112613f8a57600080fd5b6000808335601e1984360301811261448457600080fd5b83018035915067ffffffffffffffff82111561449f57600080fd5b6020019150368190038213156136ee57600080fd5b6040815260006144c8604083018587614355565b905060018060a01b0383166020830152949350505050565b6000602082840312156144f257600080fd5b815161093081613976565b600060018060a01b03808716835260606020840152614520606084018688614355565b915080841660408401525095945050505050565b803561453f81613dae565b63ffffffff908116835260208201359061455882613dae565b166020830152604081013561456c81613dcb565b62ffffff16604083015260608101356145848161377a565b6001600160a01b03166060830152608081810135908301526145a860a0820161378f565b6001600160a01b031660a083015260c081810135908301526145cc60e0820161378f565b6001600160a01b03811660e0840152505050565b6001600160a01b03848116825283166020820152610140810161236a6040830184614534565b60006020828403121561461857600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8881526001600160a01b038881166020830152871660408201526101e081016146996060830188614534565b8561016083015284610180830152836101a0830152826101c08301529998505050505050505050565b6000828210156146d4576146d4613d7d565b500390565b6000826146e8576146e86142f4565b500690565b6020815260006109306020830184613f3356fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080b000a496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806371f5d1c8116100f75780639c5e8e6b11610095578063cd43f63811610064578063cd43f63814610556578063cfa498a314610576578063f2fde38b1461058c578063f61ade83146105ac57600080fd5b80639c5e8e6b146104bc578063a389783e146104dc578063be74bce414610525578063cc3266e81461053a57600080fd5b80637e148502116100d15780637e148502146104375780638171ba27146104675780638da5cb5b1461047e57806399c994781461049c57600080fd5b806371f5d1c8146103d757806373bc4d1a146103f75780637a60f58d1461041757600080fd5b80633d140d211161016457806352d1902d1161013e57806352d1902d146103545780635bc1e507146103695780635cf0685f14610389578063715018a6146103c257600080fd5b80633d140d2114610301578063485cc955146103215780634f1ef2861461034157600080fd5b80632e71b535116101a05780632e71b53514610254578063304fedda146102745780633659cfe6146102a457806336d00bb6146102c457600080fd5b806304b86147146101c75780632434c20c146101e95780632692f36d1461021c575b600080fd5b3480156101d357600080fd5b506101e76101e23660046136f5565b6105cc565b005b3480156101f557600080fd5b506102096102043660046137ac565b610661565b6040519081526020015b60405180910390f35b34801561022857600080fd5b5060035461023c906001600160a01b031681565b6040516001600160a01b039091168152602001610213565b34801561026057600080fd5b5061020961026f366004613820565b610737565b34801561028057600080fd5b5061029461028f3660046138af565b6107e3565b6040519015158152602001610213565b3480156102b057600080fd5b506101e76102bf3660046138ee565b610937565b3480156102d057600080fd5b506102e46102df36600461391a565b610a20565b604080519283526001600160a01b03909116602083015201610213565b34801561030d57600080fd5b506101e761031c366004613984565b610b2b565b34801561032d57600080fd5b506101e761033c3660046139bd565b610bc3565b6101e761034f366004613a5b565b610d17565b34801561036057600080fd5b50610209610de8565b34801561037557600080fd5b50610209610384366004613b03565b610e9b565b34801561039557600080fd5b506102946103a43660046138ee565b6001600160a01b031660009081526005602052604090205460ff1690565b3480156103ce57600080fd5b506101e7610f4b565b3480156103e357600080fd5b506102096103f2366004613bc7565b610f81565b34801561040357600080fd5b506101e7610412366004613984565b6111f9565b34801561042357600080fd5b506102e4610432366004613bf1565b6112a9565b34801561044357600080fd5b506102946104523660046138ee565b60056020526000908152604090205460ff1681565b34801561047357600080fd5b50610209620f424081565b34801561048a57600080fd5b506002546001600160a01b031661023c565b3480156104a857600080fd5b506102096104b7366004613c56565b6113b4565b3480156104c857600080fd5b506102096104d7366004613c78565b61141f565b3480156104e857600080fd5b506102946104f73660046139bd565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b34801561053157600080fd5b50610209603281565b34801561054657600080fd5b50610209670de0b6b3a764000081565b34801561056257600080fd5b506102946105713660046139bd565b61172e565b34801561058257600080fd5b5061020961271081565b34801561059857600080fd5b506101e76105a73660046138ee565b611779565b3480156105b857600080fd5b506102096105c7366004613d1d565b611811565b8281146105ec57604051634400101160e01b815260040160405180910390fd5b60005b8381101561065a5761064885858381811061060c5761060c613d4a565b905060200201602081019061062191906138ee565b84848481811061063357610633613d4a565b90506020020160208101906104129190613d60565b8061065281613d93565b9150506105ef565b5050505050565b600061067a61067536889003880188613de7565b611c46565b6000610686863361172e565b610691576000610694565b60015b90506000806106a589878786610a20565b915091506106b8888833848a8789611db3565b60035460405163d3582ac760e01b81526001600160a01b03838116600483015287811660248301529091169063d3582ac790604401600060405180830381600087803b15801561070757600080fd5b505af115801561071b573d6000803e3d6000fd5b5050505061072a898989611ed5565b9998505050505050505050565b600061074960c0890160a08a016138ee565b6001600160a01b031663d505accf883060c08c01358661076c60208a018a613ea3565b89602001358a604001356040518863ffffffff1660e01b81526004016107989796959493929190613ec6565b600060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050506107d78888888888610661565b98975050505050505050565b6040805160418082526080820190925260009182919060208201818036833701905050905060006108176020860186613ea3565b9050600085602001359050600086604001359050816020850152806040850152826060850152600080896001600160a01b0316631626ba7e60e01b8988604051602401610865929190613f5f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516108a39190613f78565b600060405180830381855afa9150503d80600081146108de576040519150601f19603f3d011682016040523d82523d6000602084013e6108e3565b606091505b50915091508180156108f6575080516020145b801561092757508051630b135d3f60e11b9061091b9083016020908101908401613f94565b6001600160e01b031916145b96505050505050505b9392505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109895760405162461bcd60e51b815260040161098090613fbe565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d2600080516020614701833981519152546001600160a01b031690565b6001600160a01b0316146109f85760405162461bcd60e51b81526004016109809061400a565b610a018161215f565b60408051600080825260208201909252610a1d91839190612189565b50565b600080807fd22db81e53f545765b2652496a2f89c945c17690c8927d96e3d22588c319e75a610a526020890189614056565b610a6260408a0160208b01614056565b610a7260608b0160408c01614073565b610a8260808c0160608d016138ee565b60808c0135610a9760c08e0160a08f016138ee565b8d60c001358e60e0016020810190610aaf91906138ee565b8d8d6001811115610ac257610ac2614090565b604051602001610adc9b9a999897969594939291906140a6565b604051602081830303815290604052805190602001209050610afd816122f4565b9250610b1f83610b106020890189613ea3565b88602001358960400135612348565b91505094509492505050565b6001600160a01b038216331415610b575760405163204973fd60e21b8152336004820152602401610980565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f1d3e246ebbc933bf65d3290db9f93d67ab91a12d2b19308a35806e04d1c174c5910160405180910390a35050565b6000610bcf6001612372565b90508015610be7576000805461ff0019166101001790555b6000610c117fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610c50576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c65565b336001600160a01b03821614610c6557600080fd5b6001600160a01b038316610c8c57604051633c7efd1960e21b815260040160405180910390fd5b507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103839055600380546001600160a01b0319166001600160a01b0384161790558015610d12576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d605760405162461bcd60e51b815260040161098090613fbe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610da9600080516020614701833981519152546001600160a01b031690565b6001600160a01b031614610dcf5760405162461bcd60e51b81526004016109809061400a565b610dd88261215f565b610de482826001612189565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e885760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610980565b5060008051602061470183398151915290565b6000610ead60c08b0160a08c016138ee565b6001600160a01b031663d505accf8a3060c08e013588610ed060208c018c613ea3565b8b602001358c604001356040518863ffffffff1660e01b8152600401610efc9796959493929190613ec6565b600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b50505050610f3d8a8a8a8a8a888861141f565b9a9950505050505050505050565b6002546001600160a01b03163314610f755760405162461bcd60e51b815260040161098090614112565b610f7f60006123ff565b565b6000610f9561067536879003870187613de7565b600354604051632820036560e11b8152600481018890526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190614227565b905060018151600381111561101b5761101b614090565b1461103c57805160405163539312af60e11b815261098091906004016142af565b6003546040805163bf848f8160e01b815290516000926001600160a01b03169163bf848f81916004808301926020929190829003018187875af1158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab91906142d7565b6001600160a01b0316636352211e896040518263ffffffff1660e01b81526004016110d891815260200190565b602060405180830381865afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111991906142d7565b90506000611127823361172e565b611132576000611135565b60015b90506111558360600151898036038101906111509190613de7565b612451565b6000806111648a898986610a20565b91509150611177848a33848c8789611db3565b60035460405163d3582ac760e01b81526001600160a01b03838116600483015289811660248301529091169063d3582ac790604401600060405180830381600087803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b505050506111ea8b8b868c61252b565b9b9a5050505050505050505050565b6002546001600160a01b031633146112235760405162461bcd60e51b815260040161098090614112565b6001600160a01b03821661124a57604051633c7efd1960e21b815260040160405180910390fd5b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527f2444ef3f0b0b01a9fcfb3aec13a46d8ae0bfd2d4856166dd9928cc02304d1cac910160405180910390a25050565b600080807fdedafdcf0443db1836c819c3eef46fe5b223c771efc259eedc48cdd4cd35c6c46112db60208a018a614056565b6112eb60408b0160208c01614056565b6112fb60608c0160408d01614073565b61130b60808d0160608e016138ee565b8c608001358d60a001602081019061132391906138ee565b8a8f60e001602081019061133791906138ee565b8e8e600181111561134a5761134a614090565b6040516020016113649b9a999897969594939291906140a6565b604051602081830303815290604052805190602001209050611385816122f4565b92506113a78361139860208a018a613ea3565b89602001358a60400135612348565b9150509550959350505050565b600060016113ca670de0b6b3a76400008461430a565b10156113ec57604051637759d63560e01b815260048101839052602401610980565b612710611401670de0b6b3a76400008461430a565b61140b908561431e565b611415919061430a565b610930908461433d565b6000611433610675368a90038a018a613de7565b600061143f883361172e565b61144a57600061144d565b60015b9050600061146160c08b0160a08c016138ee565b6040516308ec149f60e11b815260c08c013560048201526001600160a01b0391909116906311d8293e90602401602060405180830381865afa1580156114ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cf91906142d7565b90506000806115098c8a8a878b8b6040516020016114ee92919061437e565b604051602081830303815290604052805190602001206112a9565b9150915061151c8b8b33848d878a611db3565b60005b868110156116ab57600088888381811061153b5761153b613d4a565b905060200281019061154d9190614457565b61155e9060408101906020016138ee565b9050611582816001600160a01b031660009081526005602052604090205460ff1690565b6115aa57604051636348af6d60e01b81526001600160a01b0382166004820152602401610980565b806001600160a01b03166393197b308a8a858181106115cb576115cb613d4a565b90506020028101906115dd9190614457565b6115e7908061446d565b886040518463ffffffff1660e01b8152600401611606939291906144b4565b602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164791906144e0565b611698578089898481811061165e5761165e613d4a565b90506020028101906116709190614457565b61167a908061446d565b87604051631b8f61f360e01b815260040161098094939291906144fd565b50806116a381613d93565b91505061151f565b5060035460405163d3582ac760e01b81526001600160a01b0383811660048301528a811660248301529091169063d3582ac790604401600060405180830381600087803b1580156116fb57600080fd5b505af115801561170f573d6000803e3d6000fd5b5050505061171e8c8c8c611ed5565b9c9b505050505050505050505050565b6000816001600160a01b0316836001600160a01b0316148061093057506001600160a01b0380841660009081526004602090815260408083209386168352929052205460ff16610930565b6002546001600160a01b031633146117a35760405162461bcd60e51b815260040161098090614112565b6001600160a01b0381166118085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610980565b610a1d816123ff565b600061182561067536899003890189613de7565b600354604051632820036560e11b8152600481018a90526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015611870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118949190614227565b90506118af8160600151898036038101906111509190613de7565b6003546040805163bf848f8160e01b815290516000926001600160a01b03169163bf848f81916004808301926020929190829003018187875af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e91906142d7565b6001600160a01b0316636352211e8b6040518263ffffffff1660e01b815260040161194b91815260200190565b602060405180830381865afa158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906142d7565b9050600061199a823361172e565b6119a55760006119a8565b60015b905060006119bc60c08c0160a08d016138ee565b6040516308ec149f60e11b815260c08d013560048201526001600160a01b0391909116906311d8293e90602401602060405180830381865afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a91906142d7565b9050600080611a498d8c8c878d8d6040516020016114ee92919061437e565b91509150611a5c858d33848f878a611db3565b60005b88811015611bb15760008a8a83818110611a7b57611a7b613d4a565b9050602002810190611a8d9190614457565b611a9e9060408101906020016138ee565b9050611ac2816001600160a01b031660009081526005602052604090205460ff1690565b611aea57604051636348af6d60e01b81526001600160a01b0382166004820152602401610980565b806001600160a01b03166393197b308c8c85818110611b0b57611b0b613d4a565b9050602002810190611b1d9190614457565b611b27908061446d565b886040518463ffffffff1660e01b8152600401611b46939291906144b4565b602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8791906144e0565b611b9e57808b8b8481811061165e5761165e613d4a565b5080611ba981613d93565b915050611a5f565b5060035460405163d3582ac760e01b81526001600160a01b0383811660048301528c811660248301529091169063d3582ac790604401600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050611c258e8e878f61252b565b9e9d5050505050505050505050505050565b6001600160a01b03163b151590565b61271081608001511015611c7557806080015160405163af08162560e01b815260040161098091815260200190565b610e10816000015163ffffffff161080611c9c57506305a39a80816000015163ffffffff16115b15611cc55780516040516328e1657560e21b815263ffffffff9091166004820152602401610980565b670de0b6b3a764000081606001516001600160a01b03161080611cfe575069d3c21bcecceda100000081606001516001600160a01b0316115b15611d2d57606081015160405163781bfedd60e11b81526001600160a01b039091166004820152602401610980565b806040015162ffffff1660011480611d4f57506103e8816040015162ffffff16115b15611d7a5760408082015190516376323b1b60e11b815262ffffff9091166004820152602401610980565b42816020015163ffffffff161015610a1d576020810151604051630bac0ecf60e11b815263ffffffff9091166004820152602401610980565b836001600160a01b0316856001600160a01b03161415611df157604051637b9ad10560e01b81526001600160a01b0386166004820152602401610980565b60006001826001811115611e0757611e07614090565b14611e125787611e14565b865b90506000876001600160a01b0316826001600160a01b031614611e375787611e39565b885b9050611e45818861172e565b158015611e5a5750611e588186866107e3565b155b15611e7a576040516371f839d960e01b8152336004820152602401610980565b611e84828761172e565b158015611e995750611e978286866107e3565b155b15611eca5760405163f770ff4d60e01b81526001600160a01b03808416600483015287166024820152604401610980565b505050505050505050565b600060026001541415611f2a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610980565b6002600155611f5b82306080870135611f4a610100890160e08a016138ee565b6001600160a01b03169291906129de565b611f6c610100850160e086016138ee565b60035460405163095ea7b360e01b81526001600160a01b0391821660048201526080870135602482015291169063095ea7b3906044016020604051808303816000875af1158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906144e0565b50611ff660c0850160a086016138ee565b6040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260c0870135604483015291909116906323b872dd90606401600060405180830381600087803b15801561204b57600080fd5b505af115801561205f573d6000803e3d6000fd5b506120749250505060c0850160a086016138ee565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260c0870135602482015291169063095ea7b390604401600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b50506003546040516333ff1bc760e11b81526001600160a01b0390911692506367fe378e9150612110908590879089906004016145e0565b6020604051808303816000875af115801561212f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121539190614606565b60018055949350505050565b6002546001600160a01b03163314610a1d5760405162461bcd60e51b815260040161098090614112565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121bc57610d1283612a3e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612216575060408051601f3d908101601f1916820190925261221391810190614606565b60015b6122795760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610980565b60008051602061470183398151915281146122e85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610980565b50610d12838383612ada565b6000612342612301612aff565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061235987878787612c26565b9150915061236681612d13565b5090505b949350505050565b60008054610100900460ff16156123b9578160ff1660011480156123955750303b155b6123b15760405162461bcd60e51b81526004016109809061461f565b506000919050565b60005460ff8084169116106123e05760405162461bcd60e51b81526004016109809061461f565b506000805460ff191660ff92909216919091179055600190565b919050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8160e001516001600160a01b03168160e001516001600160a01b0316146124a85760e08083015190820151604051631356231560e31b81526001600160a01b03928316600482015291166024820152604401610980565b8160a001516001600160a01b03168160a001516001600160a01b03161415806124d957508160c001518160c0015114155b15610de45760a08083015160c08085015192840151908401516040516323a7cf5360e11b81526001600160a01b0393841660048201526024810194909452911660448301526064820152608401610980565b6000600260015414156125805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610980565b6002600155600354604051632820036560e11b8152600481018790526000916001600160a01b03169063504006ca906024016101c060405180830381865afa1580156125d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f49190614227565b90506000816060015190506000600360009054906101000a90046001600160a01b03166001600160a01b031663ff7aab806040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267a91906142d7565b6001600160a01b0316636352211e896040518263ffffffff1660e01b81526004016126a791815260200190565b602060405180830381865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e891906142d7565b905060008260e0015190506000600360009054906101000a90046001600160a01b03166001600160a01b0316636999b3776040518163ffffffff1660e01b81526004016020604051808303816000875af115801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e91906142d7565b6001600160a01b0316632283487d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cf9190614606565b905060006127e0868b8a8786612ece565b90506000846001600160a01b0316896001600160a01b031614612827576128166001600160a01b0385168a3060808f01356129de565b61282460808c01358261433d565b90505b81511561285b578151612848906001600160a01b038616908c9030906129de565b8151612854908261433d565b90506128b4565b600082602001511180156128805750846001600160a01b0316896001600160a01b0316145b156128b45760208201516128a2906001600160a01b038616908b9030906129de565b60208201516128b1908261433d565b90505b60035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529085169063095ea7b3906044016020604051808303816000875af1158015612907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292b91906144e0565b50600360009054906101000a90046001600160a01b03166001600160a01b031663ba7624858d8c8c8f86886040015189606001518a608001516040518963ffffffff1660e01b815260040161298798979695949392919061466d565b6020604051808303816000875af11580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca9190614606565b600180559c9b505050505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612a38908590613091565b50505050565b6001600160a01b0381163b612aab5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610980565b60008051602061470183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612ae383613163565b600082511180612af05750805b15610d1257612a3883836131a3565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612b5857507f000000000000000000000000000000000000000000000000000000000000000046145b15612b8257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c5d5750600090506003612d0a565b8460ff16601b14158015612c7557508460ff16601c14155b15612c865750600090506004612d0a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612cda573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612d0357600060019250925050612d0a565b9150600090505b94509492505050565b6000816004811115612d2757612d27614090565b1415612d305750565b6001816004811115612d4457612d44614090565b1415612d925760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610980565b6002816004811115612da657612da6614090565b1415612df45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610980565b6003816004811115612e0857612e08614090565b1415612e615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610980565b6004816004811115612e7557612e75614090565b1415610a1d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610980565b612f076040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6060860151604081015160009062ffffff16612f3f57612f38826080015183606001516001600160a01b03166113b4565b9050612faf565b600080612f8a8a608001518b604001516001600160a01b0316866000015163ffffffff16876040015162ffffff168e6020015162ffffff1689606001516001600160a01b03166131c8565b509150915080828b60800151612fa0919061433d565b612faa919061433d565b925050505b612710612fc08560808a013561431e565b612fca919061430a565b60a08401819052600090612fe29060808a01356146c2565b905080821115612ffd57612ff681836146c2565b8452613026565b61300b8260808a01356146c2565b6020850181905260a0850151613020916146c2565b60808501525b856001600160a01b0316876001600160a01b031614613052576040840182905260006060850152613085565b6000604085015283511580159061306c5750876080013582115b156130855761307f6080890135836146c2565b60608501525b50505095945050505050565b60006130e6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132a89092919063ffffffff16565b805190915015610d12578080602001905181019061310491906144e0565b610d125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610980565b61316c81612a3e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109308383604051806060016040528060278152602001614721602791396132b7565b6000806000806131d9898989613394565b90508086106131f35760008060009350935093505061329c565b600061320087600161433d565b61320a90836146c2565b9050600088620f4240613225670de0b6b3a76400008a61430a565b61322f919061431e565b613239919061430a565b90508161327c576000612710620f4240838f613255919061431e565b61325f919061430a565b613269919061430a565b96506000955085945061329c9350505050565b60008061328a8e848661346f565b909850965092945061329c9350505050565b96509650969350505050565b606061236a848460008561353f565b60606001600160a01b0384163b61331f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610980565b600080856001600160a01b03168560405161333a9190613f78565b600060405180830381855af49150503d8060008114613375576040519150601f19603f3d011682016040523d82523d6000602084013e61337a565b606091505b509150915061338a828286613670565b9695505050505050565b60004260018268056bc75e2d63100000670de0b6b3a76400005b600a81106133fe57876133c182826146d9565b146133ec578168056bc75e2d6310000014156133ec576133e981670de0b6b3a764000061430a565b91505b6133f7600a8261430a565b90506133ae565b50600061340b878961430a565b9050816134188a876146c2565b613422919061431e565b925060015b8383613433838561431e565b61343d919061431e565b116134615761344d81600161433d565b94508061345981613d93565b915050613427565b509298975050505050505050565b600080808581805b86811015613502576000612710620f42406134928b8761431e565b61349c919061430a565b6134a6919061430a565b90506134b2818661433d565b94506127106134c260328661431e565b6134cc919061430a565b6134d6908461433d565b92506134e2838261433d565b6134ec908561433d565b93505080806134fa90613d93565b915050613477565b50612710620f4240613514898561431e565b61351e919061430a565b613528919061430a565b613532908461433d565b9890975095505050505050565b6060824710156135a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610980565b6001600160a01b0385163b6135f75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610980565b600080866001600160a01b031685876040516136139190613f78565b60006040518083038185875af1925050503d8060008114613650576040519150601f19603f3d011682016040523d82523d6000602084013e613655565b606091505b5091509150613665828286613670565b979650505050505050565b6060831561367f575081610930565b82511561368f5782518084602001fd5b8160405162461bcd60e51b815260040161098091906146ed565b60008083601f8401126136bb57600080fd5b50813567ffffffffffffffff8111156136d357600080fd5b6020830191508360208260051b85010111156136ee57600080fd5b9250929050565b6000806000806040858703121561370b57600080fd5b843567ffffffffffffffff8082111561372357600080fd5b61372f888389016136a9565b9096509450602087013591508082111561374857600080fd5b50613755878288016136a9565b95989497509550505050565b6000610100828403121561377457600080fd5b50919050565b6001600160a01b0381168114610a1d57600080fd5b80356123fa8161377a565b60006060828403121561377457600080fd5b60008060008060006101c086880312156137c557600080fd5b6137cf8787613761565b94506101008601356137e08161377a565b93506101208601356137f18161377a565b925061380187610140880161379a565b91506101a08601356138128161377a565b809150509295509295909350565b6000806000806000806000610240888a03121561383c57600080fd5b6138468989613761565b96506101008801356138578161377a565b95506101208801356138688161377a565b9450613878896101408a0161379a565b93506101a08801356138898161377a565b9250613899896101c08a0161379a565b9150610220880135905092959891949750929550565b600080600060a084860312156138c457600080fd5b83356138cf8161377a565b92506138de856020860161379a565b9150608084013590509250925092565b60006020828403121561390057600080fd5b81356109308161377a565b8035600281106123fa57600080fd5b6000806000806101a0858703121561393157600080fd5b61393b8686613761565b935061394b86610100870161379a565b925061016085013561395c8161377a565b915061396b610180860161390b565b905092959194509250565b8015158114610a1d57600080fd5b6000806040838503121561399757600080fd5b82356139a28161377a565b915060208301356139b281613976565b809150509250929050565b600080604083850312156139d057600080fd5b82356139db8161377a565b915060208301356139b28161377a565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613a2457613a246139eb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a5357613a536139eb565b604052919050565b60008060408385031215613a6e57600080fd5b8235613a798161377a565b915060208381013567ffffffffffffffff80821115613a9757600080fd5b818601915086601f830112613aab57600080fd5b813581811115613abd57613abd6139eb565b613acf601f8201601f19168501613a2a565b91508082528784828501011115613ae557600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060008060008060008060006102608a8c031215613b2257600080fd5b613b2c8b8b613761565b98506101008a0135613b3d8161377a565b97506101208a0135613b4e8161377a565b9650613b5e8b6101408c0161379a565b95506101a08a0135613b6f8161377a565b9450613b7f8b6101c08c0161379a565b93506102208a013592506102408a013567ffffffffffffffff811115613ba457600080fd5b613bb08c828d016136a9565b915080935050809150509295985092959850929598565b60008060008060006101c08688031215613be057600080fd5b853594506137e08760208801613761565b60008060008060006101c08688031215613c0a57600080fd5b613c148787613761565b9450613c2487610100880161379a565b9350610160860135613c358161377a565b9250613c44610180870161390b565b949793965091946101a0013592915050565b60008060408385031215613c6957600080fd5b50508035926020909101359150565b60008060008060008060006101e0888a031215613c9457600080fd5b613c9e8989613761565b9650610100880135613caf8161377a565b9550610120880135613cc08161377a565b9450613cd0896101408a0161379a565b93506101a0880135613ce18161377a565b92506101c088013567ffffffffffffffff811115613cfe57600080fd5b613d0a8a828b016136a9565b989b979a50959850939692959293505050565b60008060008060008060006101e0888a031215613d3957600080fd5b87359650613caf8960208a01613761565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d7257600080fd5b813561093081613976565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613da757613da7613d7d565b5060010190565b63ffffffff81168114610a1d57600080fd5b80356123fa81613dae565b62ffffff81168114610a1d57600080fd5b80356123fa81613dcb565b6000610100808385031215613dfb57600080fd5b6040519081019067ffffffffffffffff82118183101715613e1e57613e1e6139eb565b8160405283359150613e2f82613dae565b818152613e3e60208501613dc0565b6020820152613e4f60408501613ddc565b6040820152613e606060850161378f565b606082015260808401356080820152613e7b60a0850161378f565b60a082015260c084013560c0820152613e9660e0850161378f565b60e0820152949350505050565b600060208284031215613eb557600080fd5b813560ff8116811461093057600080fd5b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b83811015613f22578181015183820152602001613f0a565b83811115612a385750506000910152565b60008151808452613f4b816020860160208601613f07565b601f01601f19169290920160200192915050565b82815260406020820152600061236a6040830184613f33565b60008251613f8a818460208701613f07565b9190910192915050565b600060208284031215613fa657600080fd5b81516001600160e01b03198116811461093057600080fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561406857600080fd5b813561093081613dae565b60006020828403121561408557600080fd5b813561093081613dcb565b634e487b7160e01b600052602160045260246000fd5b9a8b5263ffffffff998a1660208c01529790981660408a015262ffffff9590951660608901526001600160a01b03938416608089015260a0880192909252821660c087015260e086015290811661010085015290911661012083015260ff166101408201526101600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b80516123fa81613dcb565b80516123fa8161377a565b80516123fa81613dae565b600061010080838503121561417c57600080fd5b6040519081019067ffffffffffffffff8211818310171561419f5761419f6139eb565b81604052809250835191506141b382613dae565b8181526141c26020850161415d565b60208201526141d360408501614147565b60408201526141e460608501614152565b6060820152608084015160808201526141ff60a08501614152565b60a082015260c084015160c082015261421a60e08501614152565b60e0820152505092915050565b60006101c0828403121561423a57600080fd5b614242613a01565b82516004811061425157600080fd5b815261425f60208401614147565b602082015261427060408401614152565b60408201526142828460608501614168565b6060820152610160830151608082015261018083015160a08201526101a09092015160c083015250919050565b60208101600483106142d157634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156142e957600080fd5b81516109308161377a565b634e487b7160e01b600052601260045260246000fd5b600082614319576143196142f4565b500490565b600081600019048311821515161561433857614338613d7d565b500290565b6000821982111561435057614350613d7d565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040808401600586901b8501820187855b8881101561444957878303603f190184528135368b9003603e190181126143c357600080fd5b8a01803536829003601e190181126143da57600080fd5b8101803567ffffffffffffffff8111156143f357600080fd5b80360383131561440257600080fd5b878652614414888701828b8501614355565b9150508782013591506144268261377a565b6001600160a01b039190911693870193909352928501929085019060010161439d565b509098975050505050505050565b60008235603e19833603018112613f8a57600080fd5b6000808335601e1984360301811261448457600080fd5b83018035915067ffffffffffffffff82111561449f57600080fd5b6020019150368190038213156136ee57600080fd5b6040815260006144c8604083018587614355565b905060018060a01b0383166020830152949350505050565b6000602082840312156144f257600080fd5b815161093081613976565b600060018060a01b03808716835260606020840152614520606084018688614355565b915080841660408401525095945050505050565b803561453f81613dae565b63ffffffff908116835260208201359061455882613dae565b166020830152604081013561456c81613dcb565b62ffffff16604083015260608101356145848161377a565b6001600160a01b03166060830152608081810135908301526145a860a0820161378f565b6001600160a01b031660a083015260c081810135908301526145cc60e0820161378f565b6001600160a01b03811660e0840152505050565b6001600160a01b03848116825283166020820152610140810161236a6040830184614534565b60006020828403121561461857600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8881526001600160a01b038881166020830152871660408201526101e081016146996060830188614534565b8561016083015284610180830152836101a0830152826101c08301529998505050505050505050565b6000828210156146d4576146d4613d7d565b500390565b6000826146e8576146e86142f4565b500690565b6020815260006109306020830184613f3356fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080b000a",
  "devdoc": {
    "author": "Non-Fungible Technologies, Inc. The Origination Controller is the entry point for all new loans in the Arcade.xyz lending protocol. This contract should have the exclusive responsibility to create new loans in LoanCore. All permissioning, signature verification, and collateral verification takes place in this contract. To originate a loan, the controller also takes custody of both the collateral and loan principal.",
    "errors": {
      "FIAC_InterestRate(uint256)": [
        {
          "params": {
            "interestRate": "InterestRate with 1e18 multiplier."
          }
        }
      ],
      "OC_ApprovedOwnLoan(address)": [
        {
          "params": {
            "caller": "The caller of the approve function, who was also the signer."
          }
        }
      ],
      "OC_CallerNotParticipant(address)": [
        {
          "params": {
            "caller": "The unapproved function caller."
          }
        }
      ],
      "OC_InterestRate(uint256)": [
        {
          "params": {
            "interestRate": "InterestRate with 1e18 multiplier."
          }
        }
      ],
      "OC_InvalidSignature(address,address)": [
        {
          "params": {
            "signer": "The signer determined from ECDSA.recover.",
            "target": "The target party of the signature, which should either be the signer,                                      or someone who has approved the signer."
          }
        }
      ],
      "OC_InvalidState(uint8)": [
        {
          "params": {
            "state": "Current state of a loan according to LoanState enum."
          }
        }
      ],
      "OC_InvalidVerifier(address)": [
        {
          "params": {
            "verifier": "The verifier the caller attempted to use."
          }
        }
      ],
      "OC_LoanDuration(uint256)": [
        {
          "params": {
            "durationSecs": "Total amount of time in seconds."
          }
        }
      ],
      "OC_NumberInstallments(uint256)": [
        {
          "params": {
            "numInstallments": "Number of installment periods in loan."
          }
        }
      ],
      "OC_PredicateFailed(address,bytes,address)": [
        {
          "params": {
            "data": "The verification data (to be parsed by verifier).",
            "vault": "The user's vault subject to verification.",
            "verifier": "The address of the verifier contract."
          }
        }
      ],
      "OC_PrincipalTooLow(uint256)": [
        {
          "params": {
            "principal": "Principal in ether."
          }
        }
      ],
      "OC_RolloverCollateralMismatch(address,uint256,address,uint256)": [
        {
          "params": {
            "newCollateralAddress": "The token ID of the active loan's collateral.",
            "newCollateralId": "The token ID of the new loan's collateral.",
            "oldCollateralAddress": "The address of the active loan's collateral.",
            "oldCollateralId": "The address of the new loan's collateral."
          }
        }
      ],
      "OC_RolloverCurrencyMismatch(address,address)": [
        {
          "params": {
            "newCurrency": "The currency of the new loan.",
            "oldCurrency": "The currency of the active loan."
          }
        }
      ],
      "OC_SelfApprove(address)": [
        {
          "params": {
            "caller": "The caller of the approve function."
          }
        }
      ],
      "OC_SignatureIsExpired(uint256)": [
        {
          "params": {
            "deadline": "Deadline in seconds."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approve(address,bool)": {
        "params": {
          "approved": "Whether the party should be approved.",
          "signer": "The party to set approval for."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getFullInterestAmount(uint256,uint256)": {
        "details": "Interest and principal must be entered with 18 units of      precision from the basis point unit (e.g. 1e18 == 0.01%)",
        "params": {
          "interestRate": "Interest rate in the loan terms.",
          "principal": "Principal amount in the loan terms."
        },
        "returns": {
          "_0": "interest                  The amount of interest due."
        }
      },
      "initialize(address,address)": {
        "details": "For this controller to work, it needs to be granted the ORIGINATOR_ROLE      in loan core after deployment.",
        "params": {
          "_loanCore": "The address of the loan core logic of the protocol."
        }
      },
      "initializeLoan((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160)": {
        "details": "The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.",
        "params": {
          "borrower": "Address of the borrower.",
          "lender": "Address of the lender.",
          "loanTerms": "The terms agreed by the lender and borrower.",
          "nonce": "The signature nonce.",
          "sig": "The loan terms signature, with v, r, s fields, and a nonce."
        },
        "returns": {
          "loanId": "                      The unique ID of the new loan."
        }
      },
      "initializeLoanWithCollateralPermit((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256)": {
        "details": "The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.",
        "params": {
          "borrower": "Address of the borrower.",
          "collateralSig": "The collateral permit signature, with v, r, s fields.",
          "lender": "Address of the lender.",
          "loanTerms": "The terms agreed by the lender and borrower.",
          "nonce": "The signature nonce for the loan terms signature.",
          "permitDeadline": "The last timestamp for which the signature is valid.",
          "sig": "The loan terms signature, with v, r, s fields."
        },
        "returns": {
          "loanId": "                      The unique ID of the new loan."
        }
      },
      "initializeLoanWithCollateralPermitAndItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256,(bytes,address)[])": {
        "details": "The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.",
        "params": {
          "borrower": "Address of the borrower.",
          "collateralSig": "The collateral permit signature, with v, r, s fields.",
          "itemPredicates": "The predicate rules for the items in the bundle.",
          "lender": "Address of the lender.",
          "loanTerms": "The terms agreed by the lender and borrower.",
          "nonce": "The signature nonce for the loan terms signature.",
          "permitDeadline": "The last timestamp for which the signature is valid.",
          "sig": "The loan terms signature, with v, r, s fields."
        },
        "returns": {
          "loanId": "                      The unique ID of the new loan."
        }
      },
      "initializeLoanWithItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])": {
        "details": "The caller must be a borrower or lender, or approved by a borrower or lender.The external signer must be a borrower or lender, or approved by a borrower or lender.The external signer must come from the opposite side of the loan as the caller.",
        "params": {
          "borrower": "Address of the borrower.",
          "itemPredicates": "The predicate rules for the items in the bundle.",
          "lender": "Address of the lender.",
          "loanTerms": "The terms agreed by the lender and borrower.",
          "nonce": "The signature nonce.",
          "sig": "The loan terms signature, with v, r, s fields, and a nonce."
        },
        "returns": {
          "loanId": "                      The unique ID of the new loan."
        }
      },
      "isAllowedVerifier(address)": {
        "params": {
          "verifier": "The verifier contract to query."
        },
        "returns": {
          "_0": "isVerified          Whether the contract is verified."
        }
      },
      "isApproved(address,address)": {
        "params": {
          "owner": "The grantor of permission.",
          "signer": "The grantee of permission."
        },
        "returns": {
          "_0": "isApproved                   Whether the grantee has been approved by the grantor."
        }
      },
      "isApprovedForContract(address,(uint8,bytes32,bytes32),bytes32)": {
        "params": {
          "sig": "A struct containing the signature data (for checking EIP-1271).",
          "sighash": "The hash of the signature payload (used for EIP-1271 check).",
          "target": "The grantor of permission - should be a smart contract."
        },
        "returns": {
          "_0": "isApprovedForContract        Whether the signer is either the grantor themselves, or approved."
        }
      },
      "isSelfOrApproved(address,address)": {
        "params": {
          "signer": "The grantee of permission.",
          "target": "The grantor of permission."
        },
        "returns": {
          "_0": "isSelfOrApproved             Whether the signer is either the grantor themselves, or approved."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "recoverItemsSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8,bytes32)": {
        "details": "Bundle ID should _not_ be included in this signature, because the loan         can be initiated with any arbitrary bundle - as long as the bundle contains the items.",
        "params": {
          "itemsHash": "The required items in the specified bundle.",
          "loanTerms": "The terms of the loan.",
          "nonce": "The signature nonce.",
          "side": "The side of the loan being signed.",
          "sig": "The loan terms signature, with v, r, s fields."
        },
        "returns": {
          "sighash": "                     The hash that was signed.",
          "signer": "                      The address of the recovered signer."
        }
      },
      "recoverTokenSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8)": {
        "params": {
          "loanTerms": "The terms of the loan.",
          "nonce": "The signature nonce.",
          "side": "The side of the loan being signed.",
          "sig": "The signature, with v, r, s fields."
        },
        "returns": {
          "sighash": "                     The hash that was signed.",
          "signer": "                      The address of the recovered signer."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rolloverLoan(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160)": {
        "params": {
          "lender": "Address of the lender.",
          "loanTerms": "The terms agreed by the lender and borrower.",
          "nonce": "The signature nonce for the loan terms signature.",
          "oldLoanId": "The ID of the old loan.",
          "sig": "The loan terms signature, with v, r, s fields."
        },
        "returns": {
          "newLoanId": "                   The unique ID of the new loan."
        }
      },
      "rolloverLoanWithItems(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])": {
        "params": {
          "itemPredicates": "The predicate rules for the items in the bundle.",
          "lender": "Address of the lender.",
          "loanTerms": "The terms agreed by the lender and borrower.",
          "nonce": "The signature nonce for the loan terms signature.",
          "oldLoanId": "The ID of the old loan.",
          "sig": "The loan terms signature, with v, r, s fields."
        },
        "returns": {
          "newLoanId": "                   The unique ID of the new loan."
        }
      },
      "setAllowedVerifier(address,bool)": {
        "params": {
          "isAllowed": "Whether the specified contract should be allowed.",
          "verifier": "The specified verifier contract, should implement IArcadeSignatureVerifier."
        }
      },
      "setAllowedVerifierBatch(address[],bool[])": {
        "params": {
          "isAllowed": "Whether the specified contracts should be allowed, respectively.",
          "verifiers": "The list of specified verifier contracts, should implement IArcadeSignatureVerifier."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "OriginationController",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FIAC_InterestRate(uint256)": [
        {
          "notice": "Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)"
        }
      ],
      "OC_ApprovedOwnLoan(address)": [
        {
          "notice": "A caller attempted to originate a loan with their own signature."
        }
      ],
      "OC_BatchLengthMismatch()": [
        {
          "notice": "Two related parameters for batch operations did not match in length."
        }
      ],
      "OC_CallerNotParticipant(address)": [
        {
          "notice": "The function caller was neither borrower or lender, and was not approved by either."
        }
      ],
      "OC_InterestRate(uint256)": [
        {
          "notice": "Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)"
        }
      ],
      "OC_InvalidSignature(address,address)": [
        {
          "notice": "The signature could not be recovered to the counterparty or approved party."
        }
      ],
      "OC_InvalidState(uint8)": [
        {
          "notice": "Ensure valid loan state for loan lifceycle operations."
        }
      ],
      "OC_InvalidVerifier(address)": [
        {
          "notice": "The verifier contract specified in a predicate has not been whitelisted."
        }
      ],
      "OC_LoanDuration(uint256)": [
        {
          "notice": "Loan duration must be greater than 1hr and less than 3yrs."
        }
      ],
      "OC_NumberInstallments(uint256)": [
        {
          "notice": "Loan terms must have even number of installments and intallment periods must be < 1000000."
        }
      ],
      "OC_PredicateFailed(address,bytes,address)": [
        {
          "notice": "One of the predicates for item verification failed."
        }
      ],
      "OC_PrincipalTooLow(uint256)": [
        {
          "notice": "Principal must be greater than 9999 Wei."
        }
      ],
      "OC_RolloverCollateralMismatch(address,uint256,address,uint256)": [
        {
          "notice": "New currency does not match for a loan rollover request."
        }
      ],
      "OC_RolloverCurrencyMismatch(address,address)": [
        {
          "notice": "New currency does not match for a loan rollover request."
        }
      ],
      "OC_SelfApprove(address)": [
        {
          "notice": "A caller attempted to approve themselves."
        }
      ],
      "OC_SignatureIsExpired(uint256)": [
        {
          "notice": "Signature must not be expired."
        }
      ],
      "OC_ZeroAddress()": [
        {
          "notice": "Zero address passed in where not allowed."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "allowedVerifiers(address)": {
        "notice": "Mapping from address to whether that verifier contract has been whitelisted"
      },
      "approve(address,bool)": {
        "notice": "Approve a third party to sign or initialize loans on a counterparties' behalf.Useful to multisig counterparties (who cannot sign themselves) or third-party integrations."
      },
      "getFullInterestAmount(uint256,uint256)": {
        "notice": "Calculate the interest due over a full term."
      },
      "initialize(address,address)": {
        "notice": "Creates a new origination controller contract, also initializing the parent signature verifier."
      },
      "initializeLoan((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160)": {
        "notice": "Initializes a loan with Loan Core.Works with either wrapped bundles with an ID, or specific ERC721 unwrapped NFTs.         In that case, collateralAddress should be the token contract."
      },
      "initializeLoanWithCollateralPermit((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256)": {
        "notice": "Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral."
      },
      "initializeLoanWithCollateralPermitAndItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(uint8,bytes32,bytes32),uint256,(bytes,address)[])": {
        "notice": "Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.Compared to initializeLoanWithCollateralPermit, this verifies the specific items in a bundle."
      },
      "initializeLoanWithItems((uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])": {
        "notice": "Initializes a loan with Loan Core.Compared to initializeLoan, this verifies the specific items in a bundle.Only works with bundles implementing the IVaultFactory interface."
      },
      "isAllowedVerifier(address)": {
        "notice": "Return whether the address can be used as a verifier."
      },
      "isApproved(address,address)": {
        "notice": "Reports whether a party is approved to act on a counterparties' behalf."
      },
      "isApprovedForContract(address,(uint8,bytes32,bytes32),bytes32)": {
        "notice": "Reports whether the signer matches the target or is approved by the target."
      },
      "isSelfOrApproved(address,address)": {
        "notice": "Reports whether the signer matches the target or is approved by the target."
      },
      "recoverItemsSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8,bytes32)": {
        "notice": "Determine the external signer for a signature specifying specific items."
      },
      "recoverTokenSignature((uint32,uint32,uint24,uint160,uint256,address,uint256,address),(uint8,bytes32,bytes32),uint160,uint8)": {
        "notice": "Determine the external signer for a signature specifying only a collateral address and ID."
      },
      "rolloverLoan(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160)": {
        "notice": "Rolls over an existing loan via Loan Core, using a signature         for a new loan to create. The lender can be the same lender as         the loan to be rolled over, or a new lender. The net funding between         the old and new loan is calculated, with funds withdrawn from relevant         parties."
      },
      "rolloverLoanWithItems(uint256,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),address,(uint8,bytes32,bytes32),uint160,(bytes,address)[])": {
        "notice": "Rolls over an existing loan via Loan Core, using a signature         for a new loan to create (of items type). The lender can be the same lender as         the loan to be rolled over, or a new lender. The net funding between         the old and new loan is calculated, with funds withdrawn from relevant         parties."
      },
      "setAllowedVerifier(address,bool)": {
        "notice": "Manage whitelist for contracts that are allowed to act as a predicate verifier.         Prevents counterparties from abusing misleading/obscure verification logic.         The contract owner should take extra care in whitelisting third-party verification contracts:         for instance, an upgradeable third-party verifier controlled by a borrower could be maliciously         upgraded to approve an empty bundle."
      },
      "setAllowedVerifierBatch(address[],bool[])": {
        "notice": "Batch update for verification whitelist, in case of multiple verifiers         active in production."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1191,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1194,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1545,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10798,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "loanCore",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10805,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "_signerApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10810,
        "contract": "contracts/OriginationController.sol:OriginationController",
        "label": "allowedVerifiers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}