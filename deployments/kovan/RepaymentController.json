{
  "address": "0x5d21297F14da947c01Af0b1F4a8FB618C9E41954",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILoanCore",
          "name": "_loanCore",
          "type": "address"
        },
        {
          "internalType": "contract IPromissoryNote",
          "name": "_borrowerNote",
          "type": "address"
        },
        {
          "internalType": "contract IPromissoryNote",
          "name": "_lenderNote",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "FIAC_InterestRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "RC_CannotDereference",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numInstallments",
          "type": "uint256"
        }
      ],
      "name": "RC_HasInstallments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numInstallments",
          "type": "uint256"
        }
      ],
      "name": "RC_NoInstallments",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RC_NoPaymentDue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RC_OnlyLender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "RC_RepayPartLTMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RC_RepayPartZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GRACE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSTALLMENT_PERIOD_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LATE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "amountToCloseLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "closeLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "getFullInterestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getInstallmentMinPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayPart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repayPartMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9bec16db94c9da795bac16aee4a9b6c58ea4b6284d9d1fde444672bb78592bc",
  "receipt": {
    "to": null,
    "from": "0x19F684cE81d774f306224627424dbA41D841cAD8",
    "contractAddress": "0x5d21297F14da947c01Af0b1F4a8FB618C9E41954",
    "transactionIndex": 1,
    "gasUsed": "1720179",
    "logsBloom": "0x
    "blockHash": "0x47cc9269f4266e30fc97c0b07c700e78390e4016b424cb57e7f6415c025b0bad",
    "transactionHash": "0xe9bec16db94c9da795bac16aee4a9b6c58ea4b6284d9d1fde444672bb78592bc",
    "logs": [],
    "blockNumber": 31951133,
    "cumulativeGasUsed": "4789383",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73917Cc86a523761466553BDE96bC4e790E33dDB",
    "0xce948d56C3CD243Eb6aB4Bbf722AD3E672fE3F83",
    "0x68b799abE6BE876E7905C41d8bc107F58F6b33ce"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8d88f69c17aa23c4805e0fc29994ffd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILoanCore\",\"name\":\"_loanCore\",\"type\":\"address\"},{\"internalType\":\"contract IPromissoryNote\",\"name\":\"_borrowerNote\",\"type\":\"address\"},{\"internalType\":\"contract IPromissoryNote\",\"name\":\"_lenderNote\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"FIAC_InterestRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"RC_CannotDereference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numInstallments\",\"type\":\"uint256\"}],\"name\":\"RC_HasInstallments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numInstallments\",\"type\":\"uint256\"}],\"name\":\"RC_NoInstallments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RC_NoPaymentDue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RC_OnlyLender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"RC_RepayPartLTMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RC_RepayPartZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTALLMENT_PERIOD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LATE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"amountToCloseLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"getFullInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getInstallmentMinPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayPartMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Non-Fungible Technologies, Inc. The Repayment Controller is the entry point for all loan lifecycle operations in the Arcade.xyz lending protocol once a loan has begun. This contract allows a caller to calculate an amount due on a loan, make a payment (either in full or part, for installment loans), and claim collateral on a defaulted loan. It is this contract's responsibility to verify loan conditions before calling LoanCore.\",\"errors\":{\"FIAC_InterestRate(uint256)\":[{\"params\":{\"interestRate\":\"InterestRate with 1e18 multiplier.\"}}],\"RC_CannotDereference(uint256)\":[{\"params\":{\"target\":\"The loanId being checked.\"}}],\"RC_HasInstallments(uint256)\":[{\"params\":{\"numInstallments\":\"Number of installments returned from LoanTerms.\"}}],\"RC_NoInstallments(uint256)\":[{\"params\":{\"numInstallments\":\"Number of installments returned from LoanTerms.\"}}],\"RC_OnlyLender(address)\":[{\"params\":{\"caller\":\"Msg.sender of the function call.\"}}],\"RC_RepayPartLTMin(uint256,uint256)\":[{\"params\":{\"amount\":\"Amount function call parameter.\",\"minAmount\":\"The minimum amount due.\"}}]},\"kind\":\"dev\",\"methods\":{\"amountToCloseLoan(uint256)\":{\"details\":\"Pay off the current interest and, if applicable any late fees accrued, in addition to any      remaining principal left on the loan.\",\"params\":{\"loanId\":\"LoanId, used to locate terms.\"},\"returns\":{\"_0\":\"amountDue                        The total amount due to close the loan, including principal, interest,                                          and late fees.\",\"_1\":\"numMissedPayments                The number of overdue installment periods since the last payment.\"}},\"claim(uint256)\":{\"params\":{\"loanId\":\"The ID of the loan.\"}},\"closeLoan(uint256)\":{\"details\":\"Pay off the current interest and, if applicable any late fees accrued, and the remaining principal      left on the loan.\",\"params\":{\"loanId\":\"LoanId, used to locate terms.\"}},\"getFullInterestAmount(uint256,uint256)\":{\"details\":\"Interest and principal must be entered with 18 units of      precision from the basis point unit (e.g. 1e18 == 0.01%)\",\"params\":{\"interestRate\":\"Interest rate in the loan terms.\",\"principal\":\"Principal amount in the loan terms.\"},\"returns\":{\"_0\":\"interest                  The amount of interest due.\"}},\"getInstallmentMinPayment(uint256)\":{\"details\":\"Calls _calcAmountsDue similar to repayPart and repayPartMinimum, but does not call LoanCore.\",\"params\":{\"loanId\":\"LoanId, used to locate terms.\"},\"returns\":{\"_0\":\"minInterestDue                   The amount of interest due, compounded over missed payments.\",\"_1\":\"lateFees                         The amount of late fees due, compounded over missed payments.\",\"_2\":\"_installmentsMissed              The number of overdue installment periods since the last payment.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"repay(uint256)\":{\"params\":{\"loanId\":\"The ID of the loan.\"}},\"repayPart(uint256,uint256)\":{\"details\":\"Pay off the current interest and, if applicable any late fees accrued, and an additional      amount to be deducted from the loan principal.\",\"params\":{\"amount\":\"Amount = minBalDue + lateFees + amountToPayOffPrincipal                                          value must be greater than minBalDue + latefees returned                                          from getInstallmentMinPayment function call.\",\"loanId\":\"LoanId, used to locate terms.\"}},\"repayPartMinimum(uint256)\":{\"details\":\"Only pay off the current interest amount and, if applicable, any late fees accrued.\",\"params\":{\"loanId\":\"LoanId, used to locate terms.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"RepaymentController\",\"version\":1},\"userdoc\":{\"errors\":{\"FIAC_InterestRate(uint256)\":[{\"notice\":\"Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\"}],\"RC_CannotDereference(uint256)\":[{\"notice\":\"Could not dereference loan from loan ID.\"}],\"RC_HasInstallments(uint256)\":[{\"notice\":\"Loan terms have installments, use repaypart or repayPartMinimum for repayments.\"}],\"RC_NoInstallments(uint256)\":[{\"notice\":\"Loan terms do not have any installments, use repay for repayments.\"}],\"RC_NoPaymentDue()\":[{\"notice\":\"Repayment has already been completed for this loan without installments.\"}],\"RC_OnlyLender(address)\":[{\"notice\":\"Caller is not the owner of lender note.\"}],\"RC_RepayPartLTMin(uint256,uint256)\":[{\"notice\":\"Amount paramater less than the minimum amount due.\"}],\"RC_RepayPartZero()\":[{\"notice\":\"Repaid amount must be larger than zero.\"}]},\"kind\":\"user\",\"methods\":{\"amountToCloseLoan(uint256)\":{\"notice\":\"Called when the user wants to close an installment loan without needing to determine the         amount to pass to the repayPart function. This is done by paying the remaining principal         and any interest or late fees due.\"},\"claim(uint256)\":{\"notice\":\"Claim collateral an active loan, referenced by lender note ID (equivalent to loan ID). The loan         must be passed the due date, or, in the case of an installment, the amount         overdue must be beyond the liquidation threshold. No funds are collected         from the borrower.\"},\"closeLoan(uint256)\":{\"notice\":\"Called when the user wants to close an installment loan without neededing to deteremine the         amount to pass to the repayPart function. This is done by paying the remaining principal         and any interest or late fees due.\"},\"getFullInterestAmount(uint256,uint256)\":{\"notice\":\"Calculate the interest due over a full term.\"},\"getInstallmentMinPayment(uint256)\":{\"notice\":\"Call _calcAmountsDue publicly to determine the amount of the payable currency         must be approved for the payment. Returns minimum balance due, late fees, and number         of missed payments.\"},\"repay(uint256)\":{\"notice\":\"Repay an active loan, referenced by borrower note ID (equivalent to loan ID). The interest for a loan         is calculated, and the principal plus interest is withdrawn from the borrower.         Control is passed to LoanCore to complete repayment.\"},\"repayPart(uint256,uint256)\":{\"notice\":\"Called when paying back installment loan with an amount greater than the minimum amount due.         Do not call for single payment loan types.\"},\"repayPartMinimum(uint256)\":{\"notice\":\"Called when paying back installment loan with the minimum amount due.         Do not call for single payment loan types. Calling this function does not         reduce the loans principal.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RepaymentController.sol\":\"RepaymentController\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/InstallmentsCalc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IInstallmentsCalc.sol\\\";\\n\\nimport { FIAC_InterestRate } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title OriginationController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for a calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InstallmentsCalc is IInstallmentsCalc {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n    /// @dev The denominator to express the final interest in terms of basis ponits.\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 10_000;\\n    // Interest rate parameter\\n    uint256 public constant INSTALLMENT_PERIOD_MULTIPLIER = 1_000_000;\\n    // 50 / BASIS_POINTS_DENOMINATOR = 0.5%\\n    uint256 public constant LATE_FEE = 50;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                  Principal amount in the loan terms.\\n     * @param interestRate               Interest rate in the loan terms.\\n     *\\n     * @return interest                  The amount of interest due.\\n     */\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) public pure virtual returns (uint256) {\\n        // Interest rate to be greater than or equal to 0.01%\\n        if (interestRate / INTEREST_RATE_DENOMINATOR < 1) revert FIAC_InterestRate(interestRate);\\n\\n        return principal + ((principal * (interestRate / INTEREST_RATE_DENOMINATOR)) / BASIS_POINTS_DENOMINATOR);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the current installment period relative to the loan's startDate,\\n     *         durationSecs, and numInstallments. Using these three paremeters and the blocks current timestamp\\n     *         we are able to determine the current timeframe relative to the total number of installments.\\n     *\\n     * @dev Get current installment using the startDate, duration, and current time.\\n     *      NOTE!!! DurationSecs must be greater than 10 seconds (10%10 = 0).\\n     *              Also verify the _timestampMultiplier value for what is determined on the max and min loan durations.\\n     *\\n     * @param startDate                    The start date of the loan as a timestamp.\\n     * @param durationSecs                 The duration of the loan in seconds.\\n     * @param numInstallments              The total number of installments in the loan terms.\\n     */\\n    function currentInstallmentPeriod(\\n        uint256 startDate,\\n        uint256 durationSecs,\\n        uint256 numInstallments\\n    ) internal view returns (uint256) {\\n        // *** Local State\\n        uint256 _currentTime = block.timestamp;\\n        uint256 _installmentPeriod = 1; // can only be called after the loan has started\\n        uint256 _relativeTimeInLoan = 0; // initial value\\n        uint256 _timestampMultiplier = 1e20; // inital value\\n\\n        // *** Get Timestamp Mulitpier\\n        for (uint256 i = 1e18; i >= 10; i = i / 10) {\\n            if (durationSecs % i != durationSecs) {\\n                if (_timestampMultiplier == 1e20) {\\n                    _timestampMultiplier = (1e18 / i);\\n                }\\n            }\\n        }\\n\\n        // *** Time Per Installment\\n        uint256 _timePerInstallment = durationSecs / numInstallments;\\n\\n        // *** Relative Time In Loan\\n        _relativeTimeInLoan = (_currentTime - startDate) * _timestampMultiplier;\\n\\n        // *** Check to see when _timePerInstallment * i is greater than _relativeTimeInLoan\\n        // Used to determine the current installment period. (j+1 to account for the current period)\\n        uint256 j = 1;\\n        while ((_timePerInstallment * j) * _timestampMultiplier <= _relativeTimeInLoan) {\\n            _installmentPeriod = j + 1;\\n            j++;\\n        }\\n        // *** Return\\n        return (_installmentPeriod);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the compounded fees and minimum balance for all the missed payments\\n     *\\n     * @dev Get minimum installment payment due, and any late fees accrued due to payment being late\\n     *\\n     * @param balance                           Current balance of the loan\\n     * @param _interestRatePerInstallment       Interest rate per installment period\\n     * @param _installmentsMissed               Number of missed installment periods\\n     */\\n    function _getFees(\\n        uint256 balance,\\n        uint256 _interestRatePerInstallment,\\n        uint256 _installmentsMissed\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 minInterestDue = 0; // initial state\\n        uint256 currentBal = balance; // remaining principal\\n        uint256 lateFees = 0; // initial state\\n        // calculate the late fees based on number of installments missed\\n        // late fees compound on any installment periods missed. For consecutive missed payments\\n        // late fees of first installment missed are added to the principal of the next late fees calculation\\n        for (uint256 i = 0; i < _installmentsMissed; i++) {\\n            // interest due per period based on currentBal value\\n            uint256 intDuePerPeriod = (((currentBal * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n                BASIS_POINTS_DENOMINATOR);\\n            // update local state, next interest payment and late fee calculated off updated currentBal variable\\n            minInterestDue += intDuePerPeriod;\\n            lateFees += ((currentBal * LATE_FEE) / BASIS_POINTS_DENOMINATOR);\\n            currentBal += intDuePerPeriod + lateFees;\\n        }\\n\\n        // one additional interest period added to _installmentsMissed for the current payment being made.\\n        // no late fees added to this payment. currentBal compounded.\\n        minInterestDue +=\\n            ((currentBal * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n            BASIS_POINTS_DENOMINATOR;\\n\\n        return (minInterestDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Calulates and returns the minimum interest balance on loan, current late fees,\\n     *         and the current number of payments missed. If called twice in the same installment\\n     *         period, will return all zeros the second call.\\n     *\\n     * @dev Get minimum installment payment due, any late fees accrued, and\\n     *      the number of missed payments since last installment payment.\\n     *\\n     *      1. Calculate relative time values to determine the number of installment periods missed.\\n     *      2. Is the repayment late based on the number of installment periods missed?\\n     *          Y. Calculate minimum balance due with late fees.\\n     *          N. Return only interest rate payment as minimum balance due.\\n     *\\n     * @param balance                           Current balance of the loan\\n     * @param startDate                         Timestamp of the start of the loan duration\\n     * @param durationSecs                      Duration of the loan in seconds\\n     * @param numInstallments                   Total number of installments in the loan\\n     * @param numInstallmentsPaid               Total number of installments paid, not including this current payment\\n     * @param interestRate                      The total interest rate for the loans duration from the loan terms\\n     */\\n    function _calcAmountsDue(\\n        uint256 balance,\\n        uint256 startDate,\\n        uint256 durationSecs,\\n        uint256 numInstallments,\\n        uint256 numInstallmentsPaid,\\n        uint256 interestRate\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // *** Installment Time\\n        uint256 _installmentPeriod = currentInstallmentPeriod(startDate, durationSecs, numInstallments);\\n\\n        // *** Time related to number of installments paid\\n        if (numInstallmentsPaid >= _installmentPeriod) {\\n            // When numInstallmentsPaid is greater than or equal to the _installmentPeriod\\n            // this indicates that the minimum interest and any late fees for this installment period\\n            // have alread been repaid. Any additional amount sent in this installment period goes to principal\\n            return (0, 0, 0);\\n        }\\n\\n        // +1 for current install payment\\n        uint256 _installmentsMissed = _installmentPeriod - (numInstallmentsPaid + 1);\\n\\n        // ** Installment Interest - using mulitpier of 1 million.\\n        // There should not be loan with more than 1 million installment periods. Checked in LoanCore.\\n        uint256 _interestRatePerInstallment = ((interestRate / INTEREST_RATE_DENOMINATOR) *\\n            INSTALLMENT_PERIOD_MULTIPLIER) / numInstallments;\\n\\n        // ** Determine if late fees are added and if so, how much?\\n        // Calulate number of payments missed based on _latePayment, _pastDueDate\\n\\n        // * If payment on time...\\n        if (_installmentsMissed == 0) {\\n            // Minimum balance due calculation. Based on interest per installment period\\n            uint256 minBalDue = ((balance * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n                BASIS_POINTS_DENOMINATOR;\\n\\n            return (minBalDue, 0, 0);\\n        }\\n        // * If payment is late, or past the loan duration...\\n        else {\\n            // get late fees based on number of payments missed and current principal due\\n            (uint256 minInterestDue, uint256 lateFees) = _getFees(\\n                balance,\\n                _interestRatePerInstallment,\\n                _installmentsMissed\\n            );\\n\\n            return (minInterestDue, lateFees, _installmentsMissed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d5ea881981a2ebea770077cfdcce1197ff8cfe329641c94e59f498709838a88\",\"license\":\"MIT\"},\"contracts/RepaymentController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/** V2 Notes\\n * Interest input as a rate/ percent value.\\n *\\n * _calcAmountsDue - function which returns the current balanceDue(uint256),\\n * defaulted(bool), and payableCurrency(address)\\n *\\n * repayPartMinimum - function for repaying installment payments. The minimum amount payable.\\n * Interest and any fees only.\\n *\\n * repayPart - function for repaying installment payments. The amount must be higher than\\n * the minimum amount payable.\\n */\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./InstallmentsCalc.sol\\\";\\nimport \\\"./libraries/LoanLibrary.sol\\\";\\nimport \\\"./interfaces/IPromissoryNote.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/IRepaymentController.sol\\\";\\n\\nimport { RC_CannotDereference, RC_NoPaymentDue, RC_OnlyLender, RC_BeforeStartDate, RC_NoInstallments, RC_NoMinPaymentDue, RC_RepayPartZero, RC_RepayPartLTMin, RC_HasInstallments } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title RepaymentController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Repayment Controller is the entry point for all loan lifecycle\\n * operations in the Arcade.xyz lending protocol once a loan has begun.\\n * This contract allows a caller to calculate an amount due on a loan,\\n * make a payment (either in full or part, for installment loans), and\\n * claim collateral on a defaulted loan. It is this contract's responsibility\\n * to verify loan conditions before calling LoanCore.\\n */\\ncontract RepaymentController is IRepaymentController, InstallmentsCalc, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ===============================================\\n\\n    ILoanCore private loanCore;\\n    IPromissoryNote private borrowerNote;\\n    IPromissoryNote private lenderNote;\\n\\n    // Installment parameters\\n    // * * * NOTE!!! Finish implementation of grace period\\n    uint256 public constant GRACE_PERIOD = 604800; // 60*60*24*7 // 1 week\\n\\n    constructor(\\n        ILoanCore _loanCore,\\n        IPromissoryNote _borrowerNote,\\n        IPromissoryNote _lenderNote\\n    ) {\\n        loanCore = _loanCore;\\n        borrowerNote = _borrowerNote;\\n        lenderNote = _lenderNote;\\n    }\\n\\n    // ==================================== LIFECYCLE OPERATIONS ========================================\\n\\n    /**\\n     * @notice Repay an active loan, referenced by borrower note ID (equivalent to loan ID). The interest for a loan\\n     *         is calculated, and the principal plus interest is withdrawn from the borrower.\\n     *         Control is passed to LoanCore to complete repayment.\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function repay(uint256 loanId) external override {\\n        LoanLibrary.LoanTerms memory terms = loanCore.getLoan(loanId).terms;\\n        if (terms.durationSecs == 0) revert RC_CannotDereference(loanId);\\n\\n        //cannot use for installment loans, call repayPart or repayPartMinimum\\n        if (terms.numInstallments != 0) revert RC_HasInstallments(terms.numInstallments);\\n\\n        // withdraw principal plus interest from borrower and send to loan core\\n        uint256 total = getFullInterestAmount(terms.principal, terms.interestRate);\\n        if (total == 0) revert RC_NoPaymentDue();\\n\\n        IERC20(terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), total);\\n        IERC20(terms.payableCurrency).approve(address(loanCore), total);\\n\\n        // call repay function in loan core\\n        loanCore.repay(loanId);\\n    }\\n\\n    /**\\n     * @notice Claim collateral an active loan, referenced by lender note ID (equivalent to loan ID). The loan\\n     *         must be passed the due date, or, in the case of an installment, the amount\\n     *         overdue must be beyond the liquidation threshold. No funds are collected\\n     *         from the borrower.\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function claim(uint256 loanId) external override {\\n        // make sure that caller owns lender note\\n        address lender = lenderNote.ownerOf(loanId);\\n        if (lender != msg.sender) revert RC_OnlyLender(msg.sender);\\n        // get LoanData for determining how to send the current installment parameter to LoanCore\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        if (data.terms.numInstallments > 0) {\\n            // get the current installment period\\n            uint256 _installmentPeriod = currentInstallmentPeriod(\\n                data.startDate,\\n                data.terms.durationSecs,\\n                data.terms.numInstallments\\n            );\\n            // call claim function in loan core\\n            loanCore.claim(loanId, _installmentPeriod);\\n        } else {\\n            // call claim function in loan core indicating a legacy loan type with 0 as the installment period\\n            // installment loans cannot have an installment period of 0\\n            loanCore.claim(loanId, 0);\\n        }\\n    }\\n\\n    // =========================== INSTALLMENT SPECIFIC OPERATIONS ===============================\\n\\n    /**\\n     * @notice Call _calcAmountsDue publicly to determine the amount of the payable currency\\n     *         must be approved for the payment. Returns minimum balance due, late fees, and number\\n     *         of missed payments.\\n     *\\n     * @dev Calls _calcAmountsDue similar to repayPart and repayPartMinimum, but does not call LoanCore.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     *\\n     * @return minInterestDue                   The amount of interest due, compounded over missed payments.\\n     * @return lateFees                         The amount of late fees due, compounded over missed payments.\\n     * @return _installmentsMissed              The number of overdue installment periods since the last payment.\\n     */\\n    function getInstallmentMinPayment(uint256 loanId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // load terms from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // get loan from borrower note\\n        if (data.state == LoanLibrary.LoanState.DUMMY_DO_NOT_USE) revert RC_CannotDereference(loanId);\\n\\n        uint256 installments = data.terms.numInstallments;\\n        if (installments == 0) revert RC_NoInstallments(installments);\\n\\n        // get the current minimum balance due for the installment\\n        (uint256 minInterestDue, uint256 lateFees, uint256 numMissedPayments) = _calcAmountsDue(\\n            data.balance,\\n            data.startDate,\\n            data.terms.durationSecs,\\n            installments,\\n            data.numInstallmentsPaid,\\n            data.terms.interestRate\\n        );\\n\\n        return (minInterestDue, lateFees, numMissedPayments);\\n    }\\n\\n    /**\\n     * @notice Called when paying back installment loan with the minimum amount due.\\n     *         Do not call for single payment loan types. Calling this function does not\\n     *         reduce the loans principal.\\n     *\\n     * @dev Only pay off the current interest amount and, if applicable, any late fees accrued.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     */\\n    function repayPartMinimum(uint256 loanId) external override {\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // total amount due, interest amount plus any late fees\\n        uint256 _minAmount = minBalanceDue + lateFees;\\n        // cannot call repayPartMinimum twice in the same installment period\\n        if (_minAmount == 0) revert RC_NoPaymentDue();\\n\\n        // load terms from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // gather minimum payment from _msgSender()\\n        IERC20(data.terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), _minAmount);\\n        // approve loanCore to take minBalanceDue\\n        IERC20(data.terms.payableCurrency).approve(address(loanCore), _minAmount);\\n        // call repayPart function in loanCore\\n        loanCore.repayPart(loanId, numMissedPayments, 0, minBalanceDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Called when paying back installment loan with an amount greater than the minimum amount due.\\n     *         Do not call for single payment loan types.\\n     *\\n     * @dev Pay off the current interest and, if applicable any late fees accrued, and an additional\\n     *      amount to be deducted from the loan principal.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     * @param amount                            Amount = minBalDue + lateFees + amountToPayOffPrincipal\\n     *                                          value must be greater than minBalDue + latefees returned\\n     *                                          from getInstallmentMinPayment function call.\\n     */\\n    function repayPart(uint256 loanId, uint256 amount) external override {\\n        if (amount == 0) revert RC_RepayPartZero();\\n\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // total minimum amount due, interest amount plus any late fees\\n        uint256 _minAmount = minBalanceDue + lateFees;\\n        // require amount taken from the _msgSender() to be larger than or equal to minBalanceDue\\n        if (amount < _minAmount) revert RC_RepayPartLTMin(amount, _minAmount);\\n        // load data from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // calculate the payment to principal after subtracting (minBalanceDue + lateFees)\\n        uint256 _totalPaymentToPrincipal = amount - (_minAmount);\\n        // gather amount specified in function call params from _msgSender()\\n        IERC20(data.terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), amount);\\n        // approve loanCore to take amount\\n        IERC20(data.terms.payableCurrency).approve(address(loanCore), amount);\\n        // call repayPart function in loanCore\\n        loanCore.repayPart(loanId, numMissedPayments, _totalPaymentToPrincipal, minBalanceDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Called when the user wants to close an installment loan without neededing to deteremine the\\n     *         amount to pass to the repayPart function. This is done by paying the remaining principal\\n     *         and any interest or late fees due.\\n     *\\n     * @dev Pay off the current interest and, if applicable any late fees accrued, and the remaining principal\\n     *      left on the loan.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     */\\n    function closeLoan(uint256 loanId) external override {\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // load data from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // total amount to close loan (remaining balance + current interest + late fees)\\n        uint256 _totalAmount = data.balance + minBalanceDue + lateFees;\\n        // gather amount specified in function call params from _msgSender()\\n        IERC20(data.terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), _totalAmount);\\n        // approve loanCore to take minBalanceDue\\n        IERC20(data.terms.payableCurrency).approve(address(loanCore), _totalAmount);\\n        // Call repayPart function in loanCore.\\n        loanCore.repayPart(loanId, numMissedPayments, data.balance, minBalanceDue, lateFees);\\n    }\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Called when the user wants to close an installment loan without needing to determine the\\n     *         amount to pass to the repayPart function. This is done by paying the remaining principal\\n     *         and any interest or late fees due.\\n     *\\n     * @dev Pay off the current interest and, if applicable any late fees accrued, in addition to any\\n     *      remaining principal left on the loan.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     *\\n     * @return amountDue                        The total amount due to close the loan, including principal, interest,\\n     *                                          and late fees.\\n     * @return numMissedPayments                The number of overdue installment periods since the last payment.\\n     */\\n    function amountToCloseLoan(uint256 loanId) external view override returns (uint256, uint256) {\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // load data from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n\\n        // the required total amount needed to close the loan (remaining balance + current interest + late fees)\\n        return ((data.balance + minBalanceDue + lateFees), numMissedPayments);\\n    }\\n}\\n\",\"keccak256\":\"0xc2bba2732e8d2224f461e911c3824f77963fa5bfbba81480f5de6404d521edf0\",\"license\":\"MIT\"},\"contracts/errors/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror OC_ZeroAddress();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice Loan terms must have even number of installments and intallment periods must be < 1000000.\\n *\\n * @param numInstallments               Number of installment periods in loan.\\n */\\nerror OC_NumberInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param verifier                      The address of the verifier contract.\\n * @param data                          The verification data (to be parsed by verifier).\\n * @param vault                         The user's vault subject to verification.\\n */\\nerror OC_PredicateFailed(address verifier, bytes data, address vault);\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount1155(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring an invalid token ID.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId1155(address asset, int256 tokenId);\\n\\n/**\\n * @notice Provided ERC20 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount20(address asset, uint256 amount);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Repayment has already been completed for this loan without installments.\\n */\\nerror RC_NoPaymentDue();\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address caller);\\n\\n/**\\n * @notice Loan has not started yet.\\n *\\n * @param startDate                 block timestamp of the startDate of loan stored in LoanData.\\n */\\nerror RC_BeforeStartDate(uint256 startDate);\\n\\n/**\\n * @notice Loan terms do not have any installments, use repay for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_NoInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice Loan terms have installments, use repaypart or repayPartMinimum for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_HasInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice No interest payment or late fees due.\\n *\\n * @param amount                    Minimum interest plus late fee amount returned\\n *                                  from minimum payment calculation.\\n */\\nerror RC_NoMinPaymentDue(uint256 amount);\\n\\n/**\\n * @notice Repaid amount must be larger than zero.\\n */\\nerror RC_RepayPartZero();\\n\\n/**\\n * @notice Amount paramater less than the minimum amount due.\\n *\\n * @param amount                    Amount function call parameter.\\n * @param minAmount                 The minimum amount due.\\n */\\nerror RC_RepayPartLTMin(uint256 amount, uint256 minAmount);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror LC_ZeroAddress();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice Collateral is not in use for an attempted rollover.\\n */\\nerror LC_CollateralNotInUse();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param returnAmount                  Total amount due for entire loan repayment.\\n */\\nerror LC_BalanceGTZero(uint256 returnAmount);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Installment loan has not defaulted.\\n */\\nerror LC_LoanNotDefaulted();\\n\\n// ================================== Full Insterest Amount Calc ====================================\\n/// @notice All errors prefixed with FIAC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror FIAC_InterestRate(uint256 interestRate);\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deployer is allowed to initialize roles. Caller is not deployer.\\n */\\nerror PN_CannotInitialize();\\n\\n/**\\n * @notice Roles have been initialized.\\n */\\nerror PN_AlreadyInitialized();\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice No token transfers while contract is in paused state.\\n */\\nerror PN_ContractPaused();\\n\",\"keccak256\":\"0xd5eb071223bd51339354cc8548e4c9bf139e468bd50609cb1c2b3ad32d7243b0\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IFeeController {\\n    // ================ Events =================\\n\\n    event UpdateOriginationFee(uint256 _newFee);\\n    event UpdateRolloverFee(uint256 _newFee);\\n\\n    // ================ Fee Setters =================\\n\\n    function setOriginationFee(uint256 _originationFee) external;\\n\\n    function setRolloverFee(uint256 _rolloverFee) external;\\n\\n    // ================ Fee Getters =================\\n\\n    function getOriginationFee() external view returns (uint256);\\n\\n    function getRolloverFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x14a7c697be149c54757817c95864f05fc5c28faaab31bda39d4f815e654f36f2\",\"license\":\"MIT\"},\"contracts/interfaces/IInstallmentsCalc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IInstallmentsCalc {\\n    // ================ View Functions ================\\n\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x05b5eccc9e8b76a8aab5b5a32ea9cc17d33ee1748fa6843e796d3065ff42a921\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\nimport \\\"./IPromissoryNote.sol\\\";\\nimport \\\"./IFeeController.sol\\\";\\nimport \\\"./ILoanCore.sol\\\";\\n\\ninterface ILoanCore {\\n    // ================ Events =================\\n\\n    event LoanCreated(LoanLibrary.LoanTerms terms, uint256 loanId);\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event InstallmentPaymentReceived(uint256 loanId, uint256 repaidAmount, uint256 remBalance);\\n    event LoanClaimed(uint256 loanId);\\n    event FeesClaimed(address token, address to, uint256 amount);\\n    event SetFeeController(address feeController);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms\\n    ) external returns (uint256 loanId);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function repayPart(\\n        uint256 _loanId,\\n        uint256 _currentMissedPayments,\\n        uint256 _paymentToPrincipal,\\n        uint256 _paymentToInterest,\\n        uint256 _paymentToLateFees\\n    ) external;\\n\\n    function claim(uint256 loanId, uint256 currentInstallmentPeriod) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external returns (IPromissoryNote);\\n\\n    function lenderNote() external returns (IPromissoryNote);\\n\\n    function feeController() external returns (IFeeController);\\n}\\n\",\"keccak256\":\"0x46bc473cf9fcf8ca3ddf9f92f3f0f42917d321ff5b1f94b6ebde24721a932cec\",\"license\":\"MIT\"},\"contracts/interfaces/IPromissoryNote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPromissoryNote is IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setPaused(bool paused) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\",\"keccak256\":\"0xdd7786e272e67ac1732d6a45c5662e9f8f28824e4d6f8e365ecc9c76f9d4822c\",\"license\":\"MIT\"},\"contracts/interfaces/IRepaymentController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRepaymentController {\\n    // ============== Lifeycle Operations ==============\\n\\n    function repay(uint256 loanId) external;\\n\\n    function claim(uint256 loanId) external;\\n\\n    function repayPartMinimum(uint256 loanId) external;\\n\\n    function repayPart(uint256 loanId, uint256 amount) external;\\n\\n    function closeLoan(uint256 loanId) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getInstallmentMinPayment(uint256 loanId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function amountToCloseLoan(uint256 loanId) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xfc63c1b396806325923c0a2a6df0e00501e9a6e56a147201cff09c176a1debbc\",\"license\":\"MIT\"},\"contracts/libraries/LoanLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        /// @dev Must be an AssetVault for LoanTermsWithItems\\n        address collateralAddress;\\n        // An encoded list of predicates\\n        bytes items;\\n        // The payable currency for the loan principal and interest\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract\\n        bytes data;\\n        // The verifier contract\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan\\n        LoanState state;\\n        // Number of installment payments made on the loan\\n        uint24 numInstallmentsPaid;\\n        // installment loan specific\\n        // Start date of the loan, using block.timestamp - for determining installment period\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan\\n        LoanTerms terms;\\n        // Remaining balance of the loan. Starts as equal to principal. Can reduce based on\\n        // payments made, can increased based on compounded interest from missed payments and late fees\\n        uint256 balance;\\n        // Amount paid in total by the borrower\\n        uint256 balancePaid;\\n        // Total amount of late fees accrued\\n        uint256 lateFeesAccrued;\\n    }\\n}\\n\",\"keccak256\":\"0x9e0237c41db40fb4ffc5f58cd16e91a71bb02ad4481b487404262e6d9ce7ba33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dd438038062001dd4833981016040819052620000349162000090565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169382169390931790925560038054919093169116179055620000e4565b6001600160a01b03811681146200008d57600080fd5b50565b600080600060608486031215620000a657600080fd5b8351620000b38162000077565b6020850151909350620000c68162000077565b6040850151909250620000d98162000077565b809150509250925092565b611ce080620000f46000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806399c99478116100ad578063cfa498a311610071578063cfa498a31461026c578063d05951a014610275578063d547741f14610288578063f416e8fc1461029b578063fd884d99146102ae57600080fd5b806399c9947814610230578063a217fddf14610243578063be74bce41461024b578063c1a287e214610253578063cc3266e81461025d57600080fd5b8063371fd8e6116100f4578063371fd8e6146101da578063379607f5146101ed578063493070b6146102005780638171ba271461021357806391d148541461021d57600080fd5b806301ffc9a714610131578063248a9ca3146101595780632f2ff15d1461018a5780633545ed7f1461019f57806336568abe146101c7575b600080fd5b61014461013f366004611821565b6102dc565b60405190151581526020015b60405180910390f35b61017c61016736600461184b565b60009081526020819052604090206001015490565b604051908152602001610150565b61019d610198366004611879565b610313565b005b6101b26101ad36600461184b565b61033d565b60408051928352602083019190915201610150565b61019d6101d5366004611879565b6103f1565b61019d6101e836600461184b565b610474565b61019d6101fb36600461184b565b61067e565b61019d61020e3660046118a9565b610877565b61017c620f424081565b61014461022b366004611879565b610a84565b61017c61023e3660046118a9565b610aad565b61017c600081565b61017c603281565b61017c62093a8081565b61017c670de0b6b3a764000081565b61017c61271081565b61019d61028336600461184b565b610b1f565b61019d610296366004611879565b610cee565b61019d6102a936600461184b565b610d13565b6102c16102bc36600461184b565b610eb0565b60408051938452602084019290925290820152606001610150565b60006001600160e01b03198216637965db0b60e01b148061030d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461032e81610fed565b6103388383610ffa565b505050565b600080600080600061034e86610eb0565b600154604051632820036560e11b8152600481018b905293965091945092506000916001600160a01b039091169063504006ca906024016101c060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c79190611a1c565b9050828482608001516103da9190611aba565b6103e49190611aba565b9791965090945050505050565b6001600160a01b03811633146104665760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610470828261107e565b5050565b600154604051632820036560e11b8152600481018390526000916001600160a01b03169063504006ca906024016101c060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190611a1c565b60600151805190915063ffffffff1661051257604051630fd8a76760e01b81526004810183905260240161045d565b604081015162ffffff1615610547576040808201519051634ea91ce960e11b815262ffffff909116600482015260240161045d565b6000610564826080015183606001516001600160a01b0316610aad565b905080610584576040516368a72ecb60e01b815260040160405180910390fd5b61059e3360e08401516001600160a01b03169030846110e3565b60e082015160015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af11580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190611ad2565b50600154604051631b8fec7360e11b8152600481018590526001600160a01b039091169063371fd8e6906024015b600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b50505050505050565b6003546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e90602401602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611af4565b90506001600160a01b03811633146107195760405163034d539960e01b815233600482015260240161045d565b600154604051632820036560e11b8152600481018490526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190611a1c565b60608101516040015190915062ffffff161561083f5760006107d382604001516001600160a01b031683606001516000015163ffffffff1684606001516040015162ffffff16611143565b60015460405163c349026360e01b815260048101879052602481018390529192506001600160a01b03169063c349026390604401600060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b5050505050505050565b60015460405163c349026360e01b815260048101859052600060248201526001600160a01b039091169063c349026390604401610647565b8061089557604051631e142f8160e11b815260040160405180910390fd5b60008060006108a385610eb0565b9194509250905060006108b68385611aba565b9050808510156108e3576040516353c02d8360e01b8152600481018690526024810182905260440161045d565b600154604051632820036560e11b8152600481018890526000916001600160a01b03169063504006ca906024016101c060405180830381865afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190611a1c565b905060006109608388611b11565b905061098033606084015160e001516001600160a01b031690308a6110e3565b606082015160e0015160015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018a905291169063095ea7b3906044016020604051808303816000875af11580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611ad2565b5060015460405163401b403360e01b8152600481018a9052602481018690526044810183905260648101889052608481018790526001600160a01b039091169063401b40339060a401600060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b505050505050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001610ac3670de0b6b3a764000084611b3e565b1015610ae557604051637759d63560e01b81526004810183905260240161045d565b612710610afa670de0b6b3a764000084611b3e565b610b049085611b52565b610b0e9190611b3e565b610b189084611aba565b9392505050565b6000806000610b2d84610eb0565b600154604051632820036560e11b81526004810189905293965091945092506000916001600160a01b039091169063504006ca906024016101c060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190611a1c565b9050600083858360800151610bbb9190611aba565b610bc59190611aba565b9050610be533606084015160e001516001600160a01b03169030846110e3565b606082015160e0015160015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190611ad2565b50600154608083015160405163401b403360e01b81526004810189905260248101869052604481019190915260648101879052608481018690526001600160a01b039091169063401b40339060a4015b600060405180830381600087803b158015610cce57600080fd5b505af1158015610ce2573d6000803e3d6000fd5b50505050505050505050565b600082815260208190526040902060010154610d0981610fed565b610338838361107e565b6000806000610d2184610eb0565b919450925090506000610d348385611aba565b905080610d54576040516368a72ecb60e01b815260040160405180910390fd5b600154604051632820036560e11b8152600481018790526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611a1c565b9050610de333606083015160e001516001600160a01b03169030856110e3565b606081015160e0015160015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e629190611ad2565b5060015460405163401b403360e01b815260048101889052602481018590526000604482015260648101879052608481018690526001600160a01b039091169063401b40339060a401610cb4565b600154604051632820036560e11b8152600481018390526000918291829182916001600160a01b039091169063504006ca906024016101c060405180830381865afa158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f279190611a1c565b9050600081516003811115610f3e57610f3e611b71565b1415610f6057604051630fd8a76760e01b81526004810186905260240161045d565b60608101516040015162ffffff1680610f8f57604051636865beff60e01b81526004810182905260240161045d565b6000806000610fdb856080015186604001516001600160a01b031687606001516000015163ffffffff1687896020015162ffffff168a60600151606001516001600160a01b031661121e565b919b909a509098509650505050505050565b610ff781336112fe565b50565b6110048282610a84565b610470576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561103a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110888282610a84565b15610470576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261113d908590611362565b50505050565b60004260018268056bc75e2d63100000670de0b6b3a76400005b600a81106111ad57876111708282611b87565b1461119b578168056bc75e2d63100000141561119b5761119881670de0b6b3a7640000611b3e565b91505b6111a6600a82611b3e565b905061115d565b5060006111ba8789611b3e565b9050816111c78a87611b11565b6111d19190611b52565b925060015b83836111e28385611b52565b6111ec9190611b52565b11611210576111fc816001611aba565b94508061120881611b9b565b9150506111d6565b509298975050505050505050565b60008060008061122f898989611143565b9050808610611249576000806000935093509350506112f2565b6000611256876001611aba565b6112609083611b11565b9050600088620f424061127b670de0b6b3a76400008a611b3e565b6112859190611b52565b61128f9190611b3e565b9050816112d2576000612710620f4240838f6112ab9190611b52565b6112b59190611b3e565b6112bf9190611b3e565b9650600095508594506112f29350505050565b6000806112e08e8486611434565b90985096509294506112f29350505050565b96509650969350505050565b6113088282610a84565b61047057611320816001600160a01b03166014611504565b61132b836020611504565b60405160200161133c929190611be2565b60408051601f198184030181529082905262461bcd60e51b825261045d91600401611c57565b60006113b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116a09092919063ffffffff16565b80519091501561033857808060200190518101906113d59190611ad2565b6103385760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045d565b600080808581805b868110156114c7576000612710620f42406114578b87611b52565b6114619190611b3e565b61146b9190611b3e565b90506114778186611aba565b9450612710611487603286611b52565b6114919190611b3e565b61149b9084611aba565b92506114a78382611aba565b6114b19085611aba565b93505080806114bf90611b9b565b91505061143c565b50612710620f42406114d98985611b52565b6114e39190611b3e565b6114ed9190611b3e565b6114f79084611aba565b9890975095505050505050565b60606000611513836002611b52565b61151e906002611aba565b67ffffffffffffffff811115611536576115366118cb565b6040519080825280601f01601f191660200182016040528015611560576020820181803683370190505b509050600360fc1b8160008151811061157b5761157b611c8a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115aa576115aa611c8a565b60200101906001600160f81b031916908160001a90535060006115ce846002611b52565b6115d9906001611aba565b90505b6001811115611651576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061160d5761160d611c8a565b1a60f81b82828151811061162357611623611c8a565b60200101906001600160f81b031916908160001a90535060049490941c9361164a81611ca0565b90506115dc565b508315610b185760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161045d565b60606116af84846000856116b7565b949350505050565b6060824710156117185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045d565b6001600160a01b0385163b61176f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045d565b600080866001600160a01b0316858760405161178b9190611cb7565b60006040518083038185875af1925050503d80600081146117c8576040519150601f19603f3d011682016040523d82523d6000602084013e6117cd565b606091505b50915091506117dd8282866117e8565b979650505050505050565b606083156117f7575081610b18565b8251156118075782518084602001fd5b8160405162461bcd60e51b815260040161045d9190611c57565b60006020828403121561183357600080fd5b81356001600160e01b031981168114610b1857600080fd5b60006020828403121561185d57600080fd5b5035919050565b6001600160a01b0381168114610ff757600080fd5b6000806040838503121561188c57600080fd5b82359150602083013561189e81611864565b809150509250929050565b600080604083850312156118bc57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561191257634e487b7160e01b600052604160045260246000fd5b60405290565b805162ffffff8116811461192b57600080fd5b919050565b805161192b81611864565b805163ffffffff8116811461192b57600080fd5b600061010080838503121561196357600080fd5b6040519081019067ffffffffffffffff8211818310171561199457634e487b7160e01b600052604160045260246000fd5b816040528092506119a48461193b565b81526119b26020850161193b565b60208201526119c360408501611918565b6040820152606084015191506119d882611864565b816060820152608084015160808201526119f460a08501611930565b60a082015260c084015160c0820152611a0f60e08501611930565b60e0820152505092915050565b60006101c08284031215611a2f57600080fd5b611a376118e1565b825160048110611a4657600080fd5b8152611a5460208401611918565b6020820152611a6560408401611930565b6040820152611a77846060850161194f565b6060820152610160830151608082015261018083015160a08201526101a09092015160c083015250919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611acd57611acd611aa4565b500190565b600060208284031215611ae457600080fd5b81518015158114610b1857600080fd5b600060208284031215611b0657600080fd5b8151610b1881611864565b600082821015611b2357611b23611aa4565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611b4d57611b4d611b28565b500490565b6000816000190483118215151615611b6c57611b6c611aa4565b500290565b634e487b7160e01b600052602160045260246000fd5b600082611b9657611b96611b28565b500690565b6000600019821415611baf57611baf611aa4565b5060010190565b60005b83811015611bd1578181015183820152602001611bb9565b8381111561113d5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c1a816017850160208801611bb6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611c4b816028840160208801611bb6565b01602801949350505050565b6020815260008251806020840152611c76816040850160208701611bb6565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600081611caf57611caf611aa4565b506000190190565b60008251611cc9818460208701611bb6565b919091019291505056fea164736f6c634300080b000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806399c99478116100ad578063cfa498a311610071578063cfa498a31461026c578063d05951a014610275578063d547741f14610288578063f416e8fc1461029b578063fd884d99146102ae57600080fd5b806399c9947814610230578063a217fddf14610243578063be74bce41461024b578063c1a287e214610253578063cc3266e81461025d57600080fd5b8063371fd8e6116100f4578063371fd8e6146101da578063379607f5146101ed578063493070b6146102005780638171ba271461021357806391d148541461021d57600080fd5b806301ffc9a714610131578063248a9ca3146101595780632f2ff15d1461018a5780633545ed7f1461019f57806336568abe146101c7575b600080fd5b61014461013f366004611821565b6102dc565b60405190151581526020015b60405180910390f35b61017c61016736600461184b565b60009081526020819052604090206001015490565b604051908152602001610150565b61019d610198366004611879565b610313565b005b6101b26101ad36600461184b565b61033d565b60408051928352602083019190915201610150565b61019d6101d5366004611879565b6103f1565b61019d6101e836600461184b565b610474565b61019d6101fb36600461184b565b61067e565b61019d61020e3660046118a9565b610877565b61017c620f424081565b61014461022b366004611879565b610a84565b61017c61023e3660046118a9565b610aad565b61017c600081565b61017c603281565b61017c62093a8081565b61017c670de0b6b3a764000081565b61017c61271081565b61019d61028336600461184b565b610b1f565b61019d610296366004611879565b610cee565b61019d6102a936600461184b565b610d13565b6102c16102bc36600461184b565b610eb0565b60408051938452602084019290925290820152606001610150565b60006001600160e01b03198216637965db0b60e01b148061030d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461032e81610fed565b6103388383610ffa565b505050565b600080600080600061034e86610eb0565b600154604051632820036560e11b8152600481018b905293965091945092506000916001600160a01b039091169063504006ca906024016101c060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c79190611a1c565b9050828482608001516103da9190611aba565b6103e49190611aba565b9791965090945050505050565b6001600160a01b03811633146104665760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610470828261107e565b5050565b600154604051632820036560e11b8152600481018390526000916001600160a01b03169063504006ca906024016101c060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190611a1c565b60600151805190915063ffffffff1661051257604051630fd8a76760e01b81526004810183905260240161045d565b604081015162ffffff1615610547576040808201519051634ea91ce960e11b815262ffffff909116600482015260240161045d565b6000610564826080015183606001516001600160a01b0316610aad565b905080610584576040516368a72ecb60e01b815260040160405180910390fd5b61059e3360e08401516001600160a01b03169030846110e3565b60e082015160015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af11580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190611ad2565b50600154604051631b8fec7360e11b8152600481018590526001600160a01b039091169063371fd8e6906024015b600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b50505050505050565b6003546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e90602401602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611af4565b90506001600160a01b03811633146107195760405163034d539960e01b815233600482015260240161045d565b600154604051632820036560e11b8152600481018490526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190611a1c565b60608101516040015190915062ffffff161561083f5760006107d382604001516001600160a01b031683606001516000015163ffffffff1684606001516040015162ffffff16611143565b60015460405163c349026360e01b815260048101879052602481018390529192506001600160a01b03169063c349026390604401600060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b5050505050505050565b60015460405163c349026360e01b815260048101859052600060248201526001600160a01b039091169063c349026390604401610647565b8061089557604051631e142f8160e11b815260040160405180910390fd5b60008060006108a385610eb0565b9194509250905060006108b68385611aba565b9050808510156108e3576040516353c02d8360e01b8152600481018690526024810182905260440161045d565b600154604051632820036560e11b8152600481018890526000916001600160a01b03169063504006ca906024016101c060405180830381865afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190611a1c565b905060006109608388611b11565b905061098033606084015160e001516001600160a01b031690308a6110e3565b606082015160e0015160015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018a905291169063095ea7b3906044016020604051808303816000875af11580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611ad2565b5060015460405163401b403360e01b8152600481018a9052602481018690526044810183905260648101889052608481018790526001600160a01b039091169063401b40339060a401600060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b505050505050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001610ac3670de0b6b3a764000084611b3e565b1015610ae557604051637759d63560e01b81526004810183905260240161045d565b612710610afa670de0b6b3a764000084611b3e565b610b049085611b52565b610b0e9190611b3e565b610b189084611aba565b9392505050565b6000806000610b2d84610eb0565b600154604051632820036560e11b81526004810189905293965091945092506000916001600160a01b039091169063504006ca906024016101c060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190611a1c565b9050600083858360800151610bbb9190611aba565b610bc59190611aba565b9050610be533606084015160e001516001600160a01b03169030846110e3565b606082015160e0015160015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190611ad2565b50600154608083015160405163401b403360e01b81526004810189905260248101869052604481019190915260648101879052608481018690526001600160a01b039091169063401b40339060a4015b600060405180830381600087803b158015610cce57600080fd5b505af1158015610ce2573d6000803e3d6000fd5b50505050505050505050565b600082815260208190526040902060010154610d0981610fed565b610338838361107e565b6000806000610d2184610eb0565b919450925090506000610d348385611aba565b905080610d54576040516368a72ecb60e01b815260040160405180910390fd5b600154604051632820036560e11b8152600481018790526000916001600160a01b03169063504006ca906024016101c060405180830381865afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611a1c565b9050610de333606083015160e001516001600160a01b03169030856110e3565b606081015160e0015160015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e629190611ad2565b5060015460405163401b403360e01b815260048101889052602481018590526000604482015260648101879052608481018690526001600160a01b039091169063401b40339060a401610cb4565b600154604051632820036560e11b8152600481018390526000918291829182916001600160a01b039091169063504006ca906024016101c060405180830381865afa158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f279190611a1c565b9050600081516003811115610f3e57610f3e611b71565b1415610f6057604051630fd8a76760e01b81526004810186905260240161045d565b60608101516040015162ffffff1680610f8f57604051636865beff60e01b81526004810182905260240161045d565b6000806000610fdb856080015186604001516001600160a01b031687606001516000015163ffffffff1687896020015162ffffff168a60600151606001516001600160a01b031661121e565b919b909a509098509650505050505050565b610ff781336112fe565b50565b6110048282610a84565b610470576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561103a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110888282610a84565b15610470576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261113d908590611362565b50505050565b60004260018268056bc75e2d63100000670de0b6b3a76400005b600a81106111ad57876111708282611b87565b1461119b578168056bc75e2d63100000141561119b5761119881670de0b6b3a7640000611b3e565b91505b6111a6600a82611b3e565b905061115d565b5060006111ba8789611b3e565b9050816111c78a87611b11565b6111d19190611b52565b925060015b83836111e28385611b52565b6111ec9190611b52565b11611210576111fc816001611aba565b94508061120881611b9b565b9150506111d6565b509298975050505050505050565b60008060008061122f898989611143565b9050808610611249576000806000935093509350506112f2565b6000611256876001611aba565b6112609083611b11565b9050600088620f424061127b670de0b6b3a76400008a611b3e565b6112859190611b52565b61128f9190611b3e565b9050816112d2576000612710620f4240838f6112ab9190611b52565b6112b59190611b3e565b6112bf9190611b3e565b9650600095508594506112f29350505050565b6000806112e08e8486611434565b90985096509294506112f29350505050565b96509650969350505050565b6113088282610a84565b61047057611320816001600160a01b03166014611504565b61132b836020611504565b60405160200161133c929190611be2565b60408051601f198184030181529082905262461bcd60e51b825261045d91600401611c57565b60006113b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116a09092919063ffffffff16565b80519091501561033857808060200190518101906113d59190611ad2565b6103385760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045d565b600080808581805b868110156114c7576000612710620f42406114578b87611b52565b6114619190611b3e565b61146b9190611b3e565b90506114778186611aba565b9450612710611487603286611b52565b6114919190611b3e565b61149b9084611aba565b92506114a78382611aba565b6114b19085611aba565b93505080806114bf90611b9b565b91505061143c565b50612710620f42406114d98985611b52565b6114e39190611b3e565b6114ed9190611b3e565b6114f79084611aba565b9890975095505050505050565b60606000611513836002611b52565b61151e906002611aba565b67ffffffffffffffff811115611536576115366118cb565b6040519080825280601f01601f191660200182016040528015611560576020820181803683370190505b509050600360fc1b8160008151811061157b5761157b611c8a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115aa576115aa611c8a565b60200101906001600160f81b031916908160001a90535060006115ce846002611b52565b6115d9906001611aba565b90505b6001811115611651576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061160d5761160d611c8a565b1a60f81b82828151811061162357611623611c8a565b60200101906001600160f81b031916908160001a90535060049490941c9361164a81611ca0565b90506115dc565b508315610b185760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161045d565b60606116af84846000856116b7565b949350505050565b6060824710156117185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045d565b6001600160a01b0385163b61176f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045d565b600080866001600160a01b0316858760405161178b9190611cb7565b60006040518083038185875af1925050503d80600081146117c8576040519150601f19603f3d011682016040523d82523d6000602084013e6117cd565b606091505b50915091506117dd8282866117e8565b979650505050505050565b606083156117f7575081610b18565b8251156118075782518084602001fd5b8160405162461bcd60e51b815260040161045d9190611c57565b60006020828403121561183357600080fd5b81356001600160e01b031981168114610b1857600080fd5b60006020828403121561185d57600080fd5b5035919050565b6001600160a01b0381168114610ff757600080fd5b6000806040838503121561188c57600080fd5b82359150602083013561189e81611864565b809150509250929050565b600080604083850312156118bc57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561191257634e487b7160e01b600052604160045260246000fd5b60405290565b805162ffffff8116811461192b57600080fd5b919050565b805161192b81611864565b805163ffffffff8116811461192b57600080fd5b600061010080838503121561196357600080fd5b6040519081019067ffffffffffffffff8211818310171561199457634e487b7160e01b600052604160045260246000fd5b816040528092506119a48461193b565b81526119b26020850161193b565b60208201526119c360408501611918565b6040820152606084015191506119d882611864565b816060820152608084015160808201526119f460a08501611930565b60a082015260c084015160c0820152611a0f60e08501611930565b60e0820152505092915050565b60006101c08284031215611a2f57600080fd5b611a376118e1565b825160048110611a4657600080fd5b8152611a5460208401611918565b6020820152611a6560408401611930565b6040820152611a77846060850161194f565b6060820152610160830151608082015261018083015160a08201526101a09092015160c083015250919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611acd57611acd611aa4565b500190565b600060208284031215611ae457600080fd5b81518015158114610b1857600080fd5b600060208284031215611b0657600080fd5b8151610b1881611864565b600082821015611b2357611b23611aa4565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611b4d57611b4d611b28565b500490565b6000816000190483118215151615611b6c57611b6c611aa4565b500290565b634e487b7160e01b600052602160045260246000fd5b600082611b9657611b96611b28565b500690565b6000600019821415611baf57611baf611aa4565b5060010190565b60005b83811015611bd1578181015183820152602001611bb9565b8381111561113d5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c1a816017850160208801611bb6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611c4b816028840160208801611bb6565b01602801949350505050565b6020815260008251806020840152611c76816040850160208701611bb6565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600081611caf57611caf611aa4565b506000190190565b60008251611cc9818460208701611bb6565b919091019291505056fea164736f6c634300080b000a",
  "devdoc": {
    "author": "Non-Fungible Technologies, Inc. The Repayment Controller is the entry point for all loan lifecycle operations in the Arcade.xyz lending protocol once a loan has begun. This contract allows a caller to calculate an amount due on a loan, make a payment (either in full or part, for installment loans), and claim collateral on a defaulted loan. It is this contract's responsibility to verify loan conditions before calling LoanCore.",
    "errors": {
      "FIAC_InterestRate(uint256)": [
        {
          "params": {
            "interestRate": "InterestRate with 1e18 multiplier."
          }
        }
      ],
      "RC_CannotDereference(uint256)": [
        {
          "params": {
            "target": "The loanId being checked."
          }
        }
      ],
      "RC_HasInstallments(uint256)": [
        {
          "params": {
            "numInstallments": "Number of installments returned from LoanTerms."
          }
        }
      ],
      "RC_NoInstallments(uint256)": [
        {
          "params": {
            "numInstallments": "Number of installments returned from LoanTerms."
          }
        }
      ],
      "RC_OnlyLender(address)": [
        {
          "params": {
            "caller": "Msg.sender of the function call."
          }
        }
      ],
      "RC_RepayPartLTMin(uint256,uint256)": [
        {
          "params": {
            "amount": "Amount function call parameter.",
            "minAmount": "The minimum amount due."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "amountToCloseLoan(uint256)": {
        "details": "Pay off the current interest and, if applicable any late fees accrued, in addition to any      remaining principal left on the loan.",
        "params": {
          "loanId": "LoanId, used to locate terms."
        },
        "returns": {
          "_0": "amountDue                        The total amount due to close the loan, including principal, interest,                                          and late fees.",
          "_1": "numMissedPayments                The number of overdue installment periods since the last payment."
        }
      },
      "claim(uint256)": {
        "params": {
          "loanId": "The ID of the loan."
        }
      },
      "closeLoan(uint256)": {
        "details": "Pay off the current interest and, if applicable any late fees accrued, and the remaining principal      left on the loan.",
        "params": {
          "loanId": "LoanId, used to locate terms."
        }
      },
      "getFullInterestAmount(uint256,uint256)": {
        "details": "Interest and principal must be entered with 18 units of      precision from the basis point unit (e.g. 1e18 == 0.01%)",
        "params": {
          "interestRate": "Interest rate in the loan terms.",
          "principal": "Principal amount in the loan terms."
        },
        "returns": {
          "_0": "interest                  The amount of interest due."
        }
      },
      "getInstallmentMinPayment(uint256)": {
        "details": "Calls _calcAmountsDue similar to repayPart and repayPartMinimum, but does not call LoanCore.",
        "params": {
          "loanId": "LoanId, used to locate terms."
        },
        "returns": {
          "_0": "minInterestDue                   The amount of interest due, compounded over missed payments.",
          "_1": "lateFees                         The amount of late fees due, compounded over missed payments.",
          "_2": "_installmentsMissed              The number of overdue installment periods since the last payment."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "repay(uint256)": {
        "params": {
          "loanId": "The ID of the loan."
        }
      },
      "repayPart(uint256,uint256)": {
        "details": "Pay off the current interest and, if applicable any late fees accrued, and an additional      amount to be deducted from the loan principal.",
        "params": {
          "amount": "Amount = minBalDue + lateFees + amountToPayOffPrincipal                                          value must be greater than minBalDue + latefees returned                                          from getInstallmentMinPayment function call.",
          "loanId": "LoanId, used to locate terms."
        }
      },
      "repayPartMinimum(uint256)": {
        "details": "Only pay off the current interest amount and, if applicable, any late fees accrued.",
        "params": {
          "loanId": "LoanId, used to locate terms."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "RepaymentController",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FIAC_InterestRate(uint256)": [
        {
          "notice": "Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)"
        }
      ],
      "RC_CannotDereference(uint256)": [
        {
          "notice": "Could not dereference loan from loan ID."
        }
      ],
      "RC_HasInstallments(uint256)": [
        {
          "notice": "Loan terms have installments, use repaypart or repayPartMinimum for repayments."
        }
      ],
      "RC_NoInstallments(uint256)": [
        {
          "notice": "Loan terms do not have any installments, use repay for repayments."
        }
      ],
      "RC_NoPaymentDue()": [
        {
          "notice": "Repayment has already been completed for this loan without installments."
        }
      ],
      "RC_OnlyLender(address)": [
        {
          "notice": "Caller is not the owner of lender note."
        }
      ],
      "RC_RepayPartLTMin(uint256,uint256)": [
        {
          "notice": "Amount paramater less than the minimum amount due."
        }
      ],
      "RC_RepayPartZero()": [
        {
          "notice": "Repaid amount must be larger than zero."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "amountToCloseLoan(uint256)": {
        "notice": "Called when the user wants to close an installment loan without needing to determine the         amount to pass to the repayPart function. This is done by paying the remaining principal         and any interest or late fees due."
      },
      "claim(uint256)": {
        "notice": "Claim collateral an active loan, referenced by lender note ID (equivalent to loan ID). The loan         must be passed the due date, or, in the case of an installment, the amount         overdue must be beyond the liquidation threshold. No funds are collected         from the borrower."
      },
      "closeLoan(uint256)": {
        "notice": "Called when the user wants to close an installment loan without neededing to deteremine the         amount to pass to the repayPart function. This is done by paying the remaining principal         and any interest or late fees due."
      },
      "getFullInterestAmount(uint256,uint256)": {
        "notice": "Calculate the interest due over a full term."
      },
      "getInstallmentMinPayment(uint256)": {
        "notice": "Call _calcAmountsDue publicly to determine the amount of the payable currency         must be approved for the payment. Returns minimum balance due, late fees, and number         of missed payments."
      },
      "repay(uint256)": {
        "notice": "Repay an active loan, referenced by borrower note ID (equivalent to loan ID). The interest for a loan         is calculated, and the principal plus interest is withdrawn from the borrower.         Control is passed to LoanCore to complete repayment."
      },
      "repayPart(uint256,uint256)": {
        "notice": "Called when paying back installment loan with an amount greater than the minimum amount due.         Do not call for single payment loan types."
      },
      "repayPartMinimum(uint256)": {
        "notice": "Called when paying back installment loan with the minimum amount due.         Do not call for single payment loan types. Calling this function does not         reduce the loans principal."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/RepaymentController.sol:RepaymentController",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 12929,
        "contract": "contracts/RepaymentController.sol:RepaymentController",
        "label": "loanCore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILoanCore)14984"
      },
      {
        "astId": 12932,
        "contract": "contracts/RepaymentController.sol:RepaymentController",
        "label": "borrowerNote",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPromissoryNote)15277"
      },
      {
        "astId": 12935,
        "contract": "contracts/RepaymentController.sol:RepaymentController",
        "label": "lenderNote",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPromissoryNote)15277"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILoanCore)14984": {
        "encoding": "inplace",
        "label": "contract ILoanCore",
        "numberOfBytes": "20"
      },
      "t_contract(IPromissoryNote)15277": {
        "encoding": "inplace",
        "label": "contract IPromissoryNote",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/RepaymentController.sol:RepaymentController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/RepaymentController.sol:RepaymentController",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}